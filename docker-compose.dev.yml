services:
    kodus-orchestrator:
        container_name: ${GLOBAL_API_CONTAINER_NAME}
        build:
            context: .
            dockerfile: DockerFiles/Dockerfile.dev
            args:
                - API_CLOUD_MODE=${API_CLOUD_MODE:-false}
        ports:
            - '${API_PORT}:${API_PORT}'
            - '9229:9229'
        env_file:
            - .env
        environment:
            - CHOKIDAR_USEPOLLING=true
            - API_DEVELOPMENT_MODE=true
        restart: unless-stopped
        volumes:
            - .:/usr/src/app:delegated
            - /usr/src/app/node_modules
            - ./certs:/usr/src/app/certs:ro
        networks:
            - kodus-backend-services
            - shared-network

    db_postgres:
        build:
            context: ./docker/postgres
        image: pgvector/pgvector:pg16
        container_name: db_postgres
        ports:
            - '5432:5432'
        environment:
            POSTGRES_USER: ${API_PG_DB_USERNAME}
            POSTGRES_PASSWORD: ${API_PG_DB_PASSWORD}
            POSTGRES_DB: ${API_PG_DB_DATABASE}
        volumes:
            - pgdata:/var/lib/postgresql/data
            - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
        networks:
            - kodus-backend-services

    db_mongodb:
        image: mongo:8
        container_name: mongodb
        ports:
            - '27017:27017'
        volumes:
            - mongodbdata:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${API_MG_DB_USERNAME}
            MONGO_INITDB_ROOT_PASSWORD: ${API_MG_DB_PASSWORD}
            MONGO_INITDB_DATABASE: ${API_MG_DB_DATABASE}
        networks:
            - kodus-backend-services

volumes:
    pgdata:
    mongodbdata:

networks:
    kodus-backend-services:
        driver: bridge
        name: kodus-backend-services
        external: true
    shared-network:
        external: true
