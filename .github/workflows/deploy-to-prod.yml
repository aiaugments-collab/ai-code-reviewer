name: üöÄ Deploy Manual para Cloud Production

on:
    workflow_dispatch:
        inputs:
            image_tag:
                description: "Tag da imagem Docker para deploy. Se vazio, ser√° usada a √∫ltima publicada no ECR."
                required: false

env:
    ECR_REPOSITORY: kodus-orchestrator-prod

jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - name: üß† Definir imagem a ser usada
              id: define-image
              env:
                  AWS_REGION: ${{ secrets.AWS_REGION }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              run: |
                  IMAGE_TAG_INPUT="${{ github.event.inputs.image_tag }}"

                  if [ -n "$IMAGE_TAG_INPUT" ]; then
                    echo "üß™ Validando se a imagem com tag '$IMAGE_TAG_INPUT' existe no ECR..."
                    IMAGE_EXISTS=$(aws ecr describe-images \
                      --repository-name $ECR_REPOSITORY \
                      --region $AWS_REGION \
                      --query "imageDetails[?contains(imageTags, '$IMAGE_TAG_INPUT')]" \
                      --output text)

                    if [ -z "$IMAGE_EXISTS" ]; then
                      echo "‚ùå Imagem com a tag '$IMAGE_TAG_INPUT' n√£o encontrada no ECR."
                      exit 1
                    fi
                    echo "üü¢ Imagem v√°lida. Usando tag: $IMAGE_TAG_INPUT"
                    echo "IMAGE_TAG=$IMAGE_TAG_INPUT" >> $GITHUB_ENV
                  else
                    echo "‚ÑπÔ∏è Nenhuma tag fornecida. Buscando a mais recente no ECR..."
                    LAST_TAG=$(aws ecr describe-images \
                      --repository-name $ECR_REPOSITORY \
                      --region $AWS_REGION \
                      --query "sort_by(imageDetails[?imageTags], &imagePushedAt)[-1].imageTags[0]" \
                      --output text)

                    if [ -z "$LAST_TAG" ]; then
                      echo "‚ùå Nenhuma imagem encontrada no ECR."
                      exit 1
                    fi

                    echo "üü¢ √öltima tag encontrada: $LAST_TAG"
                    echo "IMAGE_TAG=$LAST_TAG" >> $GITHUB_ENV
                  fi

            - name: üåê Obter IP do Runner
              run: |
                  ip=$(curl -s https://ipinfo.io/ip)
                  echo "::add-mask::$ip"
                  echo "runner_ip=$ip" >> $GITHUB_ENV

            - name: üîê Liberar acesso tempor√°rio SSH
              run: |
                  aws ec2 authorize-security-group-ingress \
                    --group-id ${{ secrets.AWS_SECURITY_GROUP }} \
                    --protocol tcp --port 22 \
                    --cidr ${{ env.runner_ip }}/32 > /dev/null 2>&1
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

            - name: üöÄ Executar Deploy na inst√¢ncia EC2
              uses: appleboy/ssh-action@v1.2.2
              with:
                  host: ${{ secrets.AWS_PROD_HOST }}
                  username: ${{ secrets.AWS_PROD_USERNAME }}
                  key: ${{ secrets.AWS_PROD_KEY_SSH }}
                  script: |
                      cd ~/kodus-orchestrator
                      ./start-app.sh prod ${{ env.IMAGE_TAG }} > /dev/null 2>&1

            - name: üîí Revogar acesso SSH
              if: always()
              run: |
                  aws ec2 revoke-security-group-ingress \
                    --group-id ${{ secrets.AWS_SECURITY_GROUP }} \
                    --protocol tcp --port 22 \
                    --cidr ${{ env.runner_ip }}/32 > /dev/null 2>&1
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

            - name: üì£ Notificar Sucesso no Discord
              if: success()
              uses: sarisia/actions-status-discord@v1.15.3
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}
                  content: ":tada: Deploy realizado com a imagem `${{ env.IMAGE_TAG }}` com sucesso em produ√ß√£o!"
                  title: "Deploy - kodus-orchestrator"
                  color: 0x00FF00

            - name: ‚ùå Notificar Falha no Discord
              if: failure()
              uses: sarisia/actions-status-discord@v1.15.3
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}
                  content: ":x: Falha ao fazer deploy com a imagem `${{ env.IMAGE_TAG }}`. Verifique os logs!"
                  title: "Deploy - kodus-orchestrator"
                  color: 0xFF0000
