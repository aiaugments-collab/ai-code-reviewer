[
    {
      "title": "Write a clear, scoped PR title",
      "rule": "PR titles must follow the pattern: <scope>: <concise change summary>. Keep it under 72 characters and avoid vague words like 'stuff' or 'minor tweaks'.",
      "why_is_this_important": "Consistent, scannable titles speed up triage, changelogs, and search.",
      "severity": "High",
      "bad_example": "fixes and updates",
      "good_example": "billing: fix proration bug when downgrading annual plan",
      "examples": [
        {
          "snippet": "feat: add things",
          "isCorrect": false
        },
        {
          "snippet": "auth: enforce 2FA on password reset",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "9e7b6dc6-7b19-4e1f-9c71-2c9c1a3b1d00",
      "buckets": ["pr-hygiene", "style-conventions"],
      "scope": "pull-request"
    },
    {
      "title": "Provide a complete PR description template",
      "rule": "Include Motivation, Approach, Considered Alternatives, Risk & Rollout, and Testing Evidence. Use bullet points; avoid single-line descriptions.",
      "why_is_this_important": "Structured context reduces back-and-forth and prevents misinterpretation.",
      "severity": "High",
      "bad_example": "just implemented the feature",
      "good_example": "Motivation: reduce checkout drop-off.\nApproach: lazy-load payment widget; retries w/ backoff.\nAlternatives: full iframe (rejected: perf).\nRisk & Rollout: staged behind flag; monitor errors.\nTesting: manual steps + unit tests attached.",
      "examples": [
        {
          "snippet": "This PR fixes it",
          "isCorrect": false
        },
        {
          "snippet": "Motivation: ...\nApproach: ...\nRisk & Rollout: ...",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "6b1f2d9a-0d78-4f0e-a9f2-8c3f0b6b6a11",
      "buckets": ["pr-hygiene", "docs-adrs"],
      "scope": "pull-request"
    },
    {
      "title": "Link an issue or ticket reference",
      "rule": "Reference at least one tracking ID (e.g., JIRA/GitHub issue) in the PR description using a consistent format (e.g., 'Refs: ABC-123').",
      "why_is_this_important": "Traceability ties changes to requirements and makes auditing simpler.",
      "severity": "Medium",
      "bad_example": "No linked issues.",
      "good_example": "Refs: PAY-742\nCloses: GH-1189",
      "examples": [
        {
          "snippet": "Implements new thing",
          "isCorrect": false
        },
        {
          "snippet": "Refs: OPS-22; Closes: #4512",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "b4a6b6f1-3b2d-4c4a-9f3b-5a0a0d3b5a22",
      "buckets": ["pr-hygiene", "maintainability"],
      "scope": "pull-request"
    },
    {
      "title": "Right-size the PR or justify size",
      "rule": "If the PR is large (many files/lines), split it into logical chunks or provide a clear justification and review guide listing file groups and what to focus on.",
      "why_is_this_important": "Smaller, focused PRs speed reviews and reduce defects.",
      "severity": "High",
      "bad_example": "132 files changed, no guidance.",
      "good_example": "Big change rationale + review guide:\n- mechanical renames (safe)\n- core logic (focus)\n- docs updates",
      "examples": [
        {
          "snippet": "Huge PR, no description",
          "isCorrect": false
        },
        {
          "snippet": "Review guide section with file clusters",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "c2d2d1e2-91f0-4d4e-9b6d-8c4b7a7b5a33",
      "buckets": ["pr-hygiene", "readability-refactor"],
      "scope": "pull-request"
    },
    {
      "title": "Avoid mixed concerns in one PR",
      "rule": "Do not combine mechanical changes (formatting, renames) with behavioral changes. If unavoidable, separate commits and call out which commits are mechanical.",
      "why_is_this_important": "Mixed concerns hide logic changes and slow reviews.",
      "severity": "High",
      "bad_example": "Refactors + feature + formatting in a single squashed commit.",
      "good_example": "Commit 1: format/rename only\nCommit 2: business logic change\nCommit 3: docs",
      "examples": [
        {
          "snippet": "Rename files + change logic silently",
          "isCorrect": false
        },
        {
          "snippet": "Mechanical commit separated from logic",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "d6c7a3e4-3b04-4c5e-8d9b-2d1f2c3b4a44",
      "buckets": ["pr-hygiene", "readability-refactor", "maintainability"],
      "scope": "pull-request"
    },
    {
      "title": "Include testing evidence or steps-to-reproduce",
      "rule": "Provide explicit verification steps (manual or automated), expected vs actual outcomes, and attach any logs or screenshots relevant to the changes.",
      "why_is_this_important": "Reproducible verification accelerates review and catch regressions.",
      "severity": "High",
      "bad_example": "Tests pass locally.",
      "good_example": "Steps:\n1) Start service\n2) Call /v1/quote with payload X\nExpected: 200 w/ field Y\nActual before: 500; after: 200\nScreenshot/log attached.",
      "examples": [
        {
          "snippet": "Trust me, it works",
          "isCorrect": false
        },
        {
          "snippet": "Steps + expected/actual",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "f1a9c2d3-4b5a-4c6d-8e9f-0a1b2c3d5a55",
      "buckets": ["pr-hygiene", "testing-quality"],
      "scope": "pull-request"
    },
    {
      "title": "Attach visual diffs for UI changes",
      "rule": "When altering UI, include before/after screenshots or a short clip demonstrating the change, and note responsive states and accessibility impacts.",
      "why_is_this_important": "Visual evidence clarifies intent and reduces UI regressions.",
      "severity": "Medium",
      "bad_example": "No visuals for layout overhaul.",
      "good_example": "Screenshots: desktop/mobile before vs after; notes: contrast + keyboard nav unaffected.",
      "examples": [
        {
          "snippet": "Changed styles; no screenshots",
          "isCorrect": false
        },
        {
          "snippet": "Before/after images + notes",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "a0f0b5e4-6d1e-4c2b-8a7f-9e8d7c6b5a66",
      "buckets": ["pr-hygiene", "ui-robustness", "accessibility-a11y"],
      "scope": "pull-request"
    },
    {
      "title": "Document rollout, flags, and rollback",
      "rule": "If the change is risky or user-facing, describe the feature flag, rollout plan (stages/segments), monitoring signals, and a clear rollback procedure.",
      "why_is_this_important": "Safe rollout reduces incident blast radius and MTTR.",
      "severity": "High",
      "bad_example": "Ship all at once, no rollback plan.",
      "good_example": "Flag: checkout.lazy_widget\nRollout: 5% → 25% → 100%\nMonitor: error rate, CLS\nRollback: disable flag; revert commit X if needed.",
      "examples": [
        {
          "snippet": "No flags, no plan",
          "isCorrect": false
        },
        {
          "snippet": "Flag + staged rollout + rollback",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "e3b7a4c6-9d8e-4a1b-b3c7-1a2d3e4f5a77",
      "buckets": ["pr-hygiene", "resilience-retries-idempotency"],
      "scope": "pull-request"
    },
    {
      "title": "Call out breaking changes explicitly",
      "rule": "If an API/contract or behavior is breaking, add a 'BREAKING CHANGE' section detailing what breaks, migration steps, and affected consumers.",
      "why_is_this_important": "Explicit warnings prevent downstream failures and accelerate coordination.",
      "severity": "High",
      "bad_example": "Changed response shape silently.",
      "good_example": "BREAKING CHANGE: /v1/users no longer returns 'age'.\nMigration: read 'birthDate' instead.\nConsumers: mobile v2, web app.",
      "examples": [
        {
          "snippet": "Refactor without noting breakage",
          "isCorrect": false
        },
        {
          "snippet": "Dedicated BREAKING CHANGE section",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "7f3d2c1a-2b4e-4c6d-9a8f-1b2c3d4e5a88",
      "buckets": ["pr-hygiene", "api-contracts-versioning", "docs-adrs"],
      "scope": "pull-request"
    },
    {
      "title": "Remove dead code and noisy diffs",
      "rule": "Do not include commented-out code, unused files, or unrelated snapshots. Keep diffs minimal and relevant to the change.",
      "why_is_this_important": "Clean diffs improve focus, reduce repo bloat, and avoid confusion.",
      "severity": "Medium",
      "bad_example": "// old impl kept for reference\n// function oldDo() { ... }",
      "good_example": "Removed obsolete helpers and snapshots not used by the new logic.",
      "examples": [
        {
          "snippet": "Commented blocks left in diff",
          "isCorrect": false
        },
        {
          "snippet": "Separate gist/ADR for historical context; diff is minimal",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "2d4e6f8a-1b3c-4d5e-9f0a-2b3c4d5e6a99",
      "buckets": ["pr-hygiene", "maintainability"],
      "scope": "pull-request"
    },
    {
      "title": "Update docs and changelog when user-facing",
      "rule": "If the change affects users or operators, update end-user docs/runbooks and add a concise changelog entry in the PR description or designated file.",
      "why_is_this_important": "Docs keep teams aligned and reduce support load.",
      "severity": "Medium",
      "bad_example": "UI labels changed; no docs touched.",
      "good_example": "Docs: updated 'Checkout Flow' page.\nChangelog: 'Improved payment retry UX'.",
      "examples": [
        {
          "snippet": "Behavior changed; no docs",
          "isCorrect": false
        },
        {
          "snippet": "Docs + changelog updated",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "5a6b7c8d-9e0f-4a1b-b2c3-d4e5f6a7b100",
      "buckets": ["pr-hygiene", "docs-adrs"],
      "scope": "pull-request"
    },
    {
      "title": "Assign owners and request targeted reviewers",
      "rule": "Tag code owners or subject-matter experts for impacted areas. Include a short 'What to review' section to guide each reviewer.",
      "why_is_this_important": "The right reviewers find the right issues faster.",
      "severity": "Medium",
      "bad_example": "No reviewers requested; generic ping.",
      "good_example": "Owners: @payments-team @observability\nWhat to review: proration calc; dashboard metric mapping.",
      "examples": [
        {
          "snippet": "@here please review",
          "isCorrect": false
        },
        {
          "snippet": "Owners + targeted checklist",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "8c9d0a1b-2e3f-4a5b-9c7d-6e5f4a3b2c11",
      "buckets": ["pr-hygiene", "observability-logging"],
      "scope": "pull-request"
    },
    {
      "title": "Add a reviewer checklist in the PR",
      "rule": "Provide a short checklist tailored to this change (e.g., 'logic matches spec', 'docs updated', 'flags in place', 'rollback plan noted').",
      "why_is_this_important": "Checklists reduce omissions and standardize quality gates.",
      "severity": "Medium",
      "bad_example": "No checklist.",
      "good_example": "[ ] Logic matches spec\n[ ] Tests added\n[ ] Docs updated\n[ ] Flag + rollback documented",
      "examples": [
        {
          "snippet": "LGTM",
          "isCorrect": false
        },
        {
          "snippet": "[ ] Tests added\n[ ] Docs updated",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "0f1e2d3c-4b5a-6a7b-8c9d-0e1f2a3b4c22",
      "buckets": ["pr-hygiene", "testing-quality", "docs-adrs"],
      "scope": "pull-request"
    },
    {
      "title": "Keep 'use client' at the leaf: default to Server Components",
      "rule": "Prefer Server Components for pages/layouts and move interactivity to small leaf Client Components. Only add 'use client' where browser APIs or event handlers are strictly necessary.",
      "why_is_this_important": "Reduces bundle size and hydration, improves Web Vitals, and simplifies server-side data fetching.",
      "severity": "High",
      "bad_example": "'use client'\nexport default function Page(){ const data = await fetch('/api/posts').then(r=>r.json()); return <div onClick={()=>{}}>{data.title}</div> }",
      "good_example": "export default async function Page(){ const data = await fetch('https://api.example.com/posts',{ next:{ revalidate: 3600 } }).then(r=>r.json()); return (<div><h1>{data.title}</h1><LikeButton /></div>) }\n\n// LikeButton.tsx\n'use client'\nexport function LikeButton(){ function handleClick(){ /* client-only */ } return <button onClick={handleClick}>Like</button> }",
      "examples": [
        {
          "snippet": "'use client' at the top of app/(marketing)/page.tsx",
          "isCorrect": false
        },
        {
          "snippet": "Server page + small client child like <LikeButton />",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "b1d6b3b2-6e4c-4c8a-8c7d-1a2d7c9b1001",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "performance-efficiency",
        "readability-refactor"
      ],
      "scope": "file"
    },
    {
      "title": "Use next/image with explicit dimensions and alt",
      "rule": "Always use the Next.js Image component for images with width/height (or fill) and meaningful alt text. Avoid plain <img> for app assets.",
      "why_is_this_important": "Ensures optimization, stable layout (no CLS), and responsive loading.",
      "severity": "High",
      "bad_example": "<img src=\"/hero.png\" />",
      "good_example": "import Image from 'next/image'\nexport default function Hero(){ return (<Image src=\"/hero.png\" width={1200} height={600} alt=\"Product hero\" priority />) }",
      "examples": [
        {
          "snippet": "<img src=\"/avatar.jpg\">",
          "isCorrect": false
        },
        {
          "snippet": "<Image src=\"/avatar.jpg\" width={64} height={64} alt=\"User avatar\" />",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "c2a7a2f1-4a1e-4c8e-9e4f-9d8a7c1a2002",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "web-static-assets",
        "accessibility-a11y",
        "performance-efficiency"
      ],
      "scope": "file"
    },
    {
      "title": "Prefer next/link for internal navigation",
      "rule": "Use <Link> from 'next/link' for internal routes; reserve <a> only for external URLs or downloadable assets.",
      "why_is_this_important": "Enables client-side navigation, controlled prefetch, and better UX.",
      "severity": "Medium",
      "bad_example": "<a href=\"/dashboard\">Go</a>",
      "good_example": "import Link from 'next/link'\nexport function Nav(){ return <Link href=\"/dashboard\" prefetch>Dashboard</Link> }",
      "examples": [
        {
          "snippet": "<a href=\"/settings\">Settings</a>",
          "isCorrect": false
        },
        {
          "snippet": "<Link href=\"/settings\">Settings</Link>",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "d3f8c4e2-8d1a-4f7d-baa0-1f2b3c4d3003",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "performance-efficiency",
        "ui-robustness"
      ],
      "scope": "file"
    },
    {
      "title": "Make fetch caching explicit in Server Components",
      "rule": "For dynamic data use { cache: 'no-store' } or file-level dynamic = 'force-dynamic'. For ISR use { next: { revalidate: N, tags: [...] } }.",
      "why_is_this_important": "Prevents unexpected caching and makes SSR vs ISR strategy explicit.",
      "severity": "High",
      "bad_example": "await fetch('https://api.example.com/stats') // implicit cache",
      "good_example": "await fetch('https://api.example.com/stats', { cache: 'no-store' })\nawait fetch('https://api.example.com/posts', { next: { revalidate: 3600, tags: ['posts'] } })",
      "examples": [
        {
          "snippet": "fetch(url) with no options",
          "isCorrect": false
        },
        {
          "snippet": "fetch(url,{ cache:'no-store' }) // real-time dashboard",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "e4a9d5c3-5f2e-4c0b-b5b8-7e1f2a4e4004",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "caching-strategy",
        "performance-efficiency"
      ],
      "scope": "file"
    },
    {
      "title": "Revalidate after mutations to keep UI cache coherent",
      "rule": "After server-side mutations, call revalidatePath or revalidateTag to refresh cached RSC data.",
      "why_is_this_important": "Prevents stale UI after POST/PUT/DELETE.",
      "severity": "High",
      "bad_example": "export async function POST(){ await db.post.create(...); return NextResponse.json({ ok:true }) }",
      "good_example": "import { revalidatePath, revalidateTag } from 'next/cache'\nexport async function POST(){ await db.post.create(...); revalidateTag('posts'); revalidatePath('/posts'); return NextResponse.json({ ok:true }) }",
      "examples": [
        {
          "snippet": "Mutation without revalidate*",
          "isCorrect": false
        },
        {
          "snippet": "revalidateTag('posts') after create/delete",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "f5c0e6d4-7b9a-42b8-99ee-1a2f3b5a5005",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "caching-strategy",
        "resilience-retries-idempotency"
      ],
      "scope": "file"
    },
    {
      "title": "Use Route Handlers in app/api with NextResponse",
      "rule": "Prefer app/api route handlers over legacy pages/api. Return NextResponse.json, validate input, and handle allowed HTTP methods explicitly.",
      "why_is_this_important": "Integrates with RSC, cache tags, and Edge runtime.",
      "severity": "High",
      "bad_example": "// pages/api/create.ts (legacy)\nexport default (req,res)=>{ res.status(200).json({}) }",
      "good_example": "import { NextResponse } from 'next/server'\nexport async function POST(req){ const body = await req.json(); /* validate */ return NextResponse.json({ ok:true },{ status:201 }) }\nexport function GET(){ return NextResponse.json({ error:'Method not allowed' },{ status:405 }) }",
      "examples": [
        {
          "snippet": "pages/api/*",
          "isCorrect": false
        },
        {
          "snippet": "app/api/* with NextResponse.json()",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "0a6a8b2f-2c3d-4f6e-9a1b-6e7f8a6b6006",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "api-conventions",
        "security-hardening"
      ],
      "scope": "file"
    },
    {
      "title": "Never expose secrets to the client",
      "rule": "Read secrets (process.env.*) only in Server Components, Route Handlers, or server actions. Client Components must use ONLY NEXT_PUBLIC_* variables.",
      "why_is_this_important": "Protects credentials and prevents leaks in the client bundle.",
      "severity": "High",
      "bad_example": "'use client'\nconsole.log(process.env.STRIPE_SECRET_KEY)",
      "good_example": "export async function GET(){ const key = process.env.STRIPE_SECRET_KEY; return NextResponse.json({ configured: !!key }) }",
      "examples": [
        {
          "snippet": "process.env.DB_URL inside a Client Component",
          "isCorrect": false
        },
        {
          "snippet": "process.env.DB_URL inside a Route Handler",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "1b7c9d3e-4f5a-4b6c-9d8e-2f3a4b7c7007",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "secrets-credentials",
        "security-hardening",
        "config-environment"
      ],
      "scope": "file"
    },
    {
      "title": "Use Metadata API instead of <Head>",
      "rule": "Declare SEO metadata via export const metadata or generateMetadata; avoid manual <Head> in App Router.",
      "why_is_this_important": "Provides consistent, typed SEO that works with RSC.",
      "severity": "Medium",
      "bad_example": "import Head from 'next/head'\nexport default function Page(){ return (<><Head><title>Title</title></Head></>) }",
      "good_example": "export const metadata = { title: 'Dashboard', description: 'KPIs' }\nexport default function Page(){ return <main>...</main> }",
      "examples": [
        {
          "snippet": "<Head> in app/*",
          "isCorrect": false
        },
        {
          "snippet": "export const metadata = { title:'X' }",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "2c8de4f1-7a6b-4d9a-8c1e-3f4b5a8d8008",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "maintainability",
        "web-static-assets"
      ],
      "scope": "file"
    },
    {
      "title": "Provide loading.tsx and error.tsx per segment",
      "rule": "For async routes, add loading.tsx for suspense fallbacks and error.tsx for boundaries. Use notFound() for 404 states.",
      "why_is_this_important": "Improves UX and isolates failures per route segment.",
      "severity": "Medium",
      "bad_example": "Manual spinner inside page.tsx with local state",
      "good_example": "// app/posts/loading.tsx -> skeleton\n// app/posts/error.tsx -> friendly error\nimport { notFound } from 'next/navigation'\nexport default async function Page(){ const post = await getPost(); if(!post) return notFound(); return <div>{post.title}</div> }",
      "examples": [
        {
          "snippet": "try/catch inside page.tsx without error.tsx",
          "isCorrect": false
        },
        {
          "snippet": "error.tsx + loading.tsx in the segment",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "3d9ef5a2-9b7c-4c1d-8e2f-4a5b6c9e9009",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "ui-robustness",
        "testing-quality"
      ],
      "scope": "file"
    },
    {
      "title": "Use generateStaticParams for SSG on dynamic routes",
      "rule": "When statically prebuilding dynamic segments, implement generateStaticParams and validate params; fall back to notFound() for invalid slugs.",
      "why_is_this_important": "Brings SSG performance with safe fallbacks.",
      "severity": "Medium",
      "bad_example": "// app/blog/[slug]/page.tsx fetching only at runtime without SSG",
      "good_example": "export async function generateStaticParams(){ const slugs = await api.listSlugs(); return slugs.map(s=>({ slug:s })) }\nexport default async function Page({ params }){ const post = await api.getPost(params.slug); if(!post) notFound(); return <article>{post.title}</article> }",
      "examples": [
        {
          "snippet": "Missing generateStaticParams for static content",
          "isCorrect": false
        },
        {
          "snippet": "generateStaticParams + notFound()",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "4ea0f6b3-a1c2-4d3e-9f4a-5b6c7d0ea010",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "caching-strategy",
        "performance-efficiency"
      ],
      "scope": "file"
    },
    {
      "title": "Dynamic import for heavy client-only widgets",
      "rule": "Use next/dynamic with { ssr: false } for large client-only components (maps, editors) and provide a lightweight loading fallback.",
      "why_is_this_important": "Avoids SSR cost and reduces JS sent to the client.",
      "severity": "Medium",
      "bad_example": "import Map from './map'\nexport default function Page(){ return <Map /> }",
      "good_example": "import dynamic from 'next/dynamic'\nconst Map = dynamic(()=>import('./map'),{ ssr:false, loading:()=> <div>Loading map…</div> })\nexport default function Page(){ return <Map /> }",
      "examples": [
        {
          "snippet": "Static import of a heavy editor",
          "isCorrect": false
        },
        {
          "snippet": "dynamic(...,{ ssr:false })",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "5fb1a7c4-b2d3-4e4f-a05b-6c7d8e1fb011",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "performance-efficiency",
        "web-static-assets"
      ],
      "scope": "file"
    },
    {
      "title": "Read headers/cookies only on the server",
      "rule": "Use headers() and cookies() in Server Components, Route Handlers, or server actions; never in Client Components.",
      "why_is_this_important": "Ensures security and compatibility with RSC.",
      "severity": "High",
      "bad_example": "'use client'\nimport { cookies } from 'next/headers'\nconst c = cookies()",
      "good_example": "import { headers, cookies } from 'next/headers'\nexport default function Layout(){ const locale = headers().get('x-locale') ?? 'en'; return <html lang={locale}><body>{/* ... */}</body></html> }",
      "examples": [
        {
          "snippet": "cookies() inside a Client Component",
          "isCorrect": false
        },
        {
          "snippet": "headers() inside a server layout",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "6ac2b8d5-c3e4-4f5a-b16c-7d8e9f2ac012",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "security-hardening",
        "config-environment"
      ],
      "scope": "file"
    },
    {
      "title": "Use next/font for fonts (no <link> to external CDNs)",
      "rule": "Load fonts via next/font (google or local) and apply on html/body; avoid runtime <link> to fonts that cause FOUT/CLS.",
      "why_is_this_important": "Improves performance and eliminates layout shifts.",
      "severity": "Medium",
      "bad_example": "<link href=\"https://fonts.googleapis.com/css2?family=Inter\" rel=\"stylesheet\" />",
      "good_example": "import { Inter } from 'next/font/google'\nconst inter = Inter({ subsets:['latin'] })\nexport default function RootLayout({ children }){ return (<html className={inter.className}><body>{children}</body></html>) }",
      "examples": [
        {
          "snippet": "<link rel=\"stylesheet\" href=\"...google fonts...\">",
          "isCorrect": false
        },
        {
          "snippet": "Inter({ subsets:['latin'] }) + className",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "7bd3c9e6-d4f5-4a6b-b27d-8e9f0a3bd013",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "web-static-assets",
        "performance-efficiency"
      ],
      "scope": "file"
    },
    {
      "title": "Use redirect() and notFound() from next/navigation",
      "rule": "Prefer redirect() and notFound() over manual 302/404 handling and custom components in App Router.",
      "why_is_this_important": "Integrates with the router and simplifies control flow.",
      "severity": "Medium",
      "bad_example": "return NextResponse.redirect('/login', 302) inside page.tsx",
      "good_example": "import { redirect, notFound } from 'next/navigation'\nexport default async function Page(){ const session = await getSession(); if(!session) redirect('/login'); const post = await getPost(); if(!post) notFound(); return <div>{post.title}</div> }",
      "examples": [
        {
          "snippet": "Rendering a custom <NotFound /> component",
          "isCorrect": false
        },
        {
          "snippet": "notFound() for a true 404",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "8ce4dae7-e5f6-4b7c-b38e-9f0a1b4ce014",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "api-conventions",
        "readability-refactor"
      ],
      "scope": "file"
    },
    {
      "title": "Use next/script safely and avoid inline scripts",
      "rule": "For third-party scripts, use <Script> with an appropriate strategy and onLoad callbacks. Avoid dangerouslySetInnerHTML for scripts.",
      "why_is_this_important": "Controls priority, reduces blocking, and improves security/CSP.",
      "severity": "Medium",
      "bad_example": "<script>/* vendor inline */</script>",
      "good_example": "import Script from 'next/script'\nexport default function Analytics(){ return (<Script src=\"/vendor.js\" strategy=\"afterInteractive\" />) }",
      "examples": [
        {
          "snippet": "Inline <script> in layout",
          "isCorrect": false
        },
        {
          "snippet": "<Script strategy=\"afterInteractive\" />",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "9df5ebf8-f607-4c8c-b49f-a1b5c6dff015",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "performance-efficiency",
        "security-hardening"
      ],
      "scope": "file"
    },
    {
      "title": "Middleware only for light auth/rewrites",
      "rule": "Keep middleware fast and side-effect free (no DB writes). Narrow the matcher and skip static assets. Use Route Handlers for heavy logic.",
      "why_is_this_important": "Middleware runs on many requests; unnecessary work multiplies cost.",
      "severity": "High",
      "bad_example": "// middleware.ts\nawait db.audit.insert({ path: req.nextUrl.pathname })",
      "good_example": "// middleware.ts\nimport { NextResponse } from 'next/server'\nexport const config = { matcher: ['/((?!_next|.*\\\\..*|api/health).*)'] }\nexport function middleware(req){ /* cheap checks */ return NextResponse.next() }",
      "examples": [
        {
          "snippet": "Heavy I/O inside middleware",
          "isCorrect": false
        },
        {
          "snippet": "matcher that skips assets and health",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "af06fc09-0818-4c5c-9d7b-b6c7de10a016",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "performance-efficiency",
        "security-hardening"
      ],
      "scope": "file"
    },
    {
      "title": "Validate inputs on the server (zod) in Route Handlers/Actions",
      "rule": "Validate and sanitize all request bodies and search params on the server using a schema (e.g., zod). Reject invalid payloads with proper status.",
      "why_is_this_important": "Prevents XSS/SSR injection and enforces stable API contracts.",
      "severity": "High",
      "bad_example": "export async function POST(req){ const body = await req.json(); return NextResponse.json({ ok:true, body }) }",
      "good_example": "import { z } from 'zod'\nconst SCHEMA = z.object({ title:z.string().min(1) })\nexport async function POST(req){ const json = await req.json(); const parsed = SCHEMA.safeParse(json); if(!parsed.success) return NextResponse.json({ error:'Invalid' },{ status:400 }); /* ... */ return NextResponse.json({ ok:true }) }",
      "examples": [
        {
          "snippet": "Returning input without validation",
          "isCorrect": false
        },
        {
          "snippet": "safeParse + 400 on schema error",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "b0171d1a-1a1e-4b0c-bb2d-2c3d4e11b017",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "security-hardening",
        "api-conventions"
      ],
      "scope": "file"
    },
    {
      "title": "Internationalize user-facing text with next-intl or next-i18next",
      "rule": "Do not hardcode user-visible strings in pages/layouts. Use an i18n library integrated with App Router and load dictionaries on the server.",
      "why_is_this_important": "Enables scalable languages, regional SEO, and consistent UX.",
      "severity": "Medium",
      "bad_example": "export default function Page(){ return <h1>My Account</h1> }",
      "good_example": "export default async function Page(){ const t = await getTranslator('account'); return <h1>{t('title')}</h1> }",
      "examples": [
        {
          "snippet": "Hardcoded text in page.tsx",
          "isCorrect": false
        },
        {
          "snippet": "Load dictionary on the server and render",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "c1182e2b-2b2c-4c1e-9c3d-4e5f6a12c018",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "internationalization-i18n",
        "accessibility-a11y"
      ],
      "scope": "file"
    },
    {
      "title": "Model mutations with Server Actions when feasible",
      "rule": "For simple form submissions from RSC, use server actions with schema validation and then revalidate paths/tags. Avoid client fetch for trivial mutations.",
      "why_is_this_important": "Reduces client code, improves DX, and keeps cache consistent.",
      "severity": "Medium",
      "bad_example": "'use client'\nasync function handleSubmit(){ await fetch('/api/todos',{ method:'POST', body:JSON.stringify({ title }) }) }",
      "good_example": "'use server'\nexport async function createTodo(prev, formData){ const title = String(formData.get('title')||'').trim(); if(!title) return { error:'Title required' }; await db.todo.create({ title }); revalidatePath('/todos') }",
      "examples": [
        {
          "snippet": "Client-side fetch to create a simple item",
          "isCorrect": false
        },
        {
          "snippet": "Server action + revalidatePath",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "d2193f3c-3c3d-4d2f-a4e5-5f6a7b13d019",
      "buckets": [
        "stack-nextjs",
        "stack-react",
        "api-conventions",
        "caching-strategy",
        "security-hardening"
      ],
      "scope": "file"
    },
    {
      "title": "Handle async operations with proper error handling",
      "rule": "Every awaited async operation must be guarded with error handling. Use try/catch for await and .catch for promise chains; never leave rejections unhandled.",
      "why_is_this_important": "Uncaught rejections cause silent failures and inconsistent states. Explicit handling makes failures observable and recoverable.",
      "severity": "High",
      "bad_example": "async function load(){ const data = await fetch(url).then(r=>r.json()); return data.items; }",
      "good_example": "async function load(){ try{ const r = await fetch(url); if(!r.ok) throw new Error(`HTTP ${r.status}`); return (await r.json()).items; } catch(err){ logger.error('load failed',{op:'load',url,err}); throw err; }}",
      "examples": [
        {
          "snippet": "await fetch(url).then(r=>r.json())",
          "isCorrect": false
        },
        {
          "snippet": "try { const r = await fetch(url) } catch (e) { logger.error(e) }",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "151dbe48-5394-4fd5-86ff-7ded7682eb7c",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Add null checks before accessing properties",
      "rule": "When accessing properties that may be absent, use optional chaining and sensible defaults.",
      "why_is_this_important": "Prevents runtime TypeError crashes and makes fallback behavior explicit.",
      "severity": "High",
      "bad_example": "const city = user.address.city.toLowerCase();",
      "good_example": "const city = user?.address?.city?.toLowerCase() ?? 'unknown';",
      "examples": [
        {
          "snippet": "user.address.city",
          "isCorrect": false
        },
        {
          "snippet": "user?.address?.city ?? 'unknown'",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "2ea6aa56-c6b7-4055-bf6a-384021c5b688",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Validate environment/config at startup",
      "rule": "At process start, validate required configuration keys and fail fast with a clear message if any are missing or malformed.",
      "why_is_this_important": "Catches misconfiguration early and standardizes configuration contracts.",
      "severity": "High",
      "bad_example": "const apiKey = process.env.API_KEY; // may be undefined",
      "good_example": "const REQUIRED = ['API_KEY','API_URL']; for (const k of REQUIRED) if(!process.env[k]) throw new Error(`Missing ${k}`);",
      "examples": [
        {
          "snippet": "process.env.API_KEY // unchecked",
          "isCorrect": false
        },
        {
          "snippet": "if(!process.env.API_KEY) throw new Error('Missing API_KEY')",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "6c87842b-c6ee-4b7c-99b7-bab1c1b3d26c",
      "buckets": ["config-environment", "stack-nodejs"],
      "scope": "file"
    },
    {
      "title": "Return proper HTTP status codes for errors",
      "rule": "Handlers must return non-2xx status codes for error outcomes and include a minimal error body that does not leak sensitive details.",
      "why_is_this_important": "Accurate status codes make client behavior predictable and improve monitoring.",
      "severity": "High",
      "bad_example": "res.status(200).json({ error: 'failed' });",
      "good_example": "try{ const x = await create(); res.status(201).json(x); }catch(e){ logger.error('create failed',{e}); res.status(500).json({error:'internal_error'}); }",
      "examples": [
        {
          "snippet": "res.status(200).json({ error: 'x' })",
          "isCorrect": false
        },
        {
          "snippet": "res.status(500).json({ error: 'internal_error' })",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "e8ec7a05-fb1a-40cf-86e2-284142c4ce7f",
      "buckets": [
        "api-conventions",
        "error-handling",
        "security-hardening",
        "api-contracts-versioning"
      ],
      "scope": "file"
    },
    {
      "title": "Include error context in structured logs",
      "rule": "Error logs must include the operation name and relevant identifiers as structured fields, not just a message string.",
      "why_is_this_important": "Context accelerates root-cause analysis and event correlation.",
      "severity": "High",
      "bad_example": "console.error(err);",
      "good_example": "logger.error('payment failed',{op:'charge',userId,orderId,err});",
      "examples": [
        {
          "snippet": "console.error(e)",
          "isCorrect": false
        },
        {
          "snippet": "logger.error('op failed', { op, id, err })",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "ece2c47d-ad46-4e0e-a2ec-67aa72eb92c7",
      "buckets": ["error-handling", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Re-throw or return errors to propagate failures",
      "rule": "Never swallow exceptions in catch blocks; either rethrow or return an explicit error result.",
      "why_is_this_important": "Hidden failures lead to data corruption and unpredictable state.",
      "severity": "High",
      "bad_example": "try { await doWork(); } catch (e) { /* ignore */ }",
      "good_example": "try { await doWork(); } catch (e) { logger.error('doWork',{e}); throw e; }",
      "examples": [
        {
          "snippet": "catch(e) { }",
          "isCorrect": false
        },
        {
          "snippet": "catch(e) { logger.error(e); throw e }",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "73583673-6f9d-4b31-a28b-aed30a29bc88",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Provide error handlers to subscription/listener APIs",
      "rule": "When subscribing to streams/listeners, always provide an error handler and a deterministic unsubscribe/cleanup path.",
      "why_is_this_important": "Prevents silent drops and resource leaks.",
      "severity": "High",
      "bad_example": "emitter.on('data', onData); // no error/cleanup",
      "good_example": "emitter.on('data', onData); emitter.on('error', (err)=>logger.error('stream',{err})); const off=()=>emitter.off('data',onData);",
      "examples": [
        {
          "snippet": "ws.onmessage = onMsg",
          "isCorrect": false
        },
        {
          "snippet": "ws.onmessage = onMsg; ws.onerror = onErr; ws.onclose = onClose",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "a42d7bc4-efb2-4e81-b74d-86cebb2369fc",
      "buckets": ["error-handling", "ui-robustness", "stack-nodejs"],
      "scope": "file"
    },
    {
      "title": "Classify HTTP errors with type-safe narrowing",
      "rule": "Define a discriminated union or error class hierarchy and use user-defined type guards before handling specific cases.",
      "why_is_this_important": "Precise handling reduces brittle branches and unsafe casts.",
      "severity": "Medium",
      "bad_example": "catch(e){ if((e as any).status) retry(); }",
      "good_example": "type HttpError={kind:'http',status:number,body?:unknown}; const isHttp=(x:unknown):x is HttpError=>!!x && (x as any).kind==='http';",
      "examples": [
        {
          "snippet": "if ((e as any).status) {}",
          "isCorrect": false
        },
        {
          "snippet": "function isHttp(x:unknown): x is HttpError { /*...*/ }",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "e665ef4c-488c-4274-ac20-a4187fa4c0bb",
      "buckets": ["error-handling", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Log errors instead of failing silently",
      "rule": "Every catch block must log or report the error at least once before handling or rethrowing.",
      "why_is_this_important": "Guarantees minimum observability of failures.",
      "severity": "High",
      "bad_example": "catch(e){ return null }",
      "good_example": "catch(e){ logger.warn('parse failed',{e}); return null }",
      "examples": [
        {
          "snippet": "catch(e){ /* noop */ }",
          "isCorrect": false
        },
        {
          "snippet": "catch(e){ logger.error(e) }",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "fafb2779-94af-4765-8cf3-66fd97779d2f",
      "buckets": ["error-handling", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Extract duplicated logic into functions",
      "rule": "Duplicate sequences of statements must be extracted into a named function or utility.",
      "why_is_this_important": "Reduces maintenance cost and prevents logical drift.",
      "severity": "Medium",
      "bad_example": "total += item.price * item.qty; // repeated in multiple places",
      "good_example": "const lineTotal=i=>i.price*i.qty; const total=items.reduce((a,i)=>a+lineTotal(i),0);",
      "examples": [
        {
          "snippet": "x.price*x.qty // repeated",
          "isCorrect": false
        },
        {
          "snippet": "function lineTotal(i){ return i.price*i.qty }",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "e59e5041-e0ee-4fbf-b611-473b1b634d1b",
      "buckets": ["duplication-complexity", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Consolidate duplicated schemas",
      "rule": "Avoid maintaining multiple equivalent validators for the same shape; centralize checks in a single function/schema.",
      "why_is_this_important": "Prevents drift between validation points and types.",
      "severity": "Medium",
      "bad_example": "function isUser1(o){/* same checks */} function isUser2(o){/* same checks */}",
      "good_example": "function isUser(o){ /* single check */ } // reuse everywhere",
      "examples": [
        {
          "snippet": "isUser1 and isUser2 with identical logic",
          "isCorrect": false
        },
        {
          "snippet": "single isUser validator reused",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "ea5806be-4fce-4179-a91e-102f03e7dd5a",
      "buckets": ["duplication-complexity", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Clear timers on teardown/unmount",
      "rule": "Whenever you start an interval/timeout, also define a deterministic cleanup path that clears it.",
      "why_is_this_important": "Prevents memory leaks and background work after scope end.",
      "severity": "High",
      "bad_example": "setInterval(tick,1000);",
      "good_example": "const id=setInterval(tick,1000); /* on teardown */ clearInterval(id);",
      "examples": [
        {
          "snippet": "setTimeout(t,500)",
          "isCorrect": false
        },
        {
          "snippet": "const id=setTimeout(t,500); clearTimeout(id)",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "e94d5e4b-aab8-4e1d-b9f9-115477a199ec",
      "buckets": ["ui-robustness"],
      "scope": "file"
    },
    {
      "title": "Prefer responsive over fixed dimensions",
      "rule": "Avoid fixed pixel heights for containers; prefer min/max constraints or flexible layouts.",
      "why_is_this_important": "Improves accessibility and adaptability across devices.",
      "severity": "Medium",
      "bad_example": ".card{ height:400px }",
      "good_example": ".card{ min-height:20rem; max-height:80vh }",
      "examples": [
        {
          "snippet": ".box{ height:300px }",
          "isCorrect": false
        },
        {
          "snippet": ".box{ min-height:50vh }",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "c6d65c38-5f78-43ec-b028-ab8b164cd30d",
      "buckets": ["ui-robustness"],
      "scope": "file"
    },
    {
      "title": "Debounce or throttle user input that triggers work",
      "rule": "Apply debounce/throttle to handlers that trigger network calls or heavy computation on rapid input.",
      "why_is_this_important": "Prevents UI jank and rate-limit issues.",
      "severity": "High",
      "bad_example": "input.oninput = e => search(e.target.value);",
      "good_example": "const debounce=(fn,ms)=>{let t;return(...a)=>{clearTimeout(t);t=setTimeout(()=>fn(...a),ms)}}; input.oninput=debounce(e=>search(e.target.value),200);",
      "examples": [
        {
          "snippet": "oninput => fetch()",
          "isCorrect": false
        },
        {
          "snippet": "oninput => debounce(fetch)",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "07a32a2e-f323-4419-ba70-a1b6f45258a7",
      "buckets": ["performance-efficiency", "ui-robustness"],
      "scope": "file"
    },
    {
      "title": "Avoid expensive animations on non-composited properties",
      "rule": "Animate transform/opacity; avoid top/left/width/box-shadow on large elements.",
      "why_is_this_important": "Uses GPU compositing and avoids costly relayout/paint.",
      "severity": "Medium",
      "bad_example": ".panel{ transition: top .3s }",
      "good_example": ".panel{ transition: transform .3s } // JS: el.style.transform='translateY(0)'",
      "examples": [
        {
          "snippet": ".el{ transition: width .2s }",
          "isCorrect": false
        },
        {
          "snippet": ".el{ transition: transform .2s }",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "65568a63-7929-40b2-828e-b60380208865",
      "buckets": ["performance-efficiency", "ui-robustness"],
      "scope": "file"
    },
    {
      "title": "Use computed/derived properties for repeated calculations",
      "rule": "Compute expensive derived values once per input set and reuse them rather than recalculating in multiple places.",
      "why_is_this_important": "Reduces duplicate work and logic drift.",
      "severity": "Medium",
      "bad_example": "const a = items.reduce(...);\nconst b = items.reduce(...); // same logic",
      "good_example": "const lineTotal=i=>i.price*i.qty; const total=items.reduce((acc,i)=>acc+lineTotal(i),0);",
      "examples": [
        {
          "snippet": "recompute the same reduce several times",
          "isCorrect": false
        },
        {
          "snippet": "derive once and reuse",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "5debca73-a9e3-4e67-8c97-c52a92c69bf0",
      "buckets": ["duplication-complexity", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Optimize chained array operations",
      "rule": "Prefer a single pass when possible (e.g., reduce) over multiple filter/map chains on the same array.",
      "why_is_this_important": "Cuts allocations and improves throughput on hot paths.",
      "severity": "Medium",
      "bad_example": "const out = xs.filter(p).map(f).filter(q);",
      "good_example": "const out = xs.reduce((acc,x)=>{ if(!p(x)) return acc; const y=f(x); if(q(y)) acc.push(y); return acc; },[]);",
      "examples": [
        {
          "snippet": "arr.filter().map().filter()",
          "isCorrect": false
        },
        {
          "snippet": "arr.reduce((acc,x)=>{/* combine */},[])",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "cfedf88f-2624-405b-be88-fe9783a7d814",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Hoist or cache expensive computations",
      "rule": "Hoist constant work (e.g., RegExp, static JSON, config loads) out of loops and cache results by input when feasible.",
      "why_is_this_important": "Avoids unnecessary CPU and GC pressure.",
      "severity": "Medium",
      "bad_example": "for (const s of strs){ const re=new RegExp(pattern); re.test(s); }",
      "good_example": "const re=new RegExp(pattern); for (const s of strs){ re.test(s); }",
      "examples": [
        {
          "snippet": "new RegExp(...) inside the loop",
          "isCorrect": false
        },
        {
          "snippet": "declare the regex once outside the loop",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "40b07994-640d-4b8c-99ca-2fde1d681911",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Memoize components and callbacks when props are stable",
      "rule": "For pure functions called repeatedly with the same inputs, memoize results; avoid recreating identical callbacks in hot paths.",
      "why_is_this_important": "Reduces redundant computation and churn.",
      "severity": "Low",
      "bad_example": "list.forEach(x => expensive(x));",
      "good_example": "const memo=(fn)=>{const m=new Map();return (x)=>m.has(x)?m.get(x):(m.set(x,fn(x)),m.get(x))}; const f=memo(expensive); list.forEach(f);",
      "examples": [
        {
          "snippet": "arr.map(expensive)",
          "isCorrect": false
        },
        {
          "snippet": "const f=memo(expensive); arr.map(f)",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "8fa57a35-bf42-4c73-a794-e81e324217d5",
      "buckets": ["performance-efficiency", "stack-react"],
      "scope": "file"
    },
    {
      "title": "Detect N+1 style queries and suggest batching",
      "rule": "Flag patterns that issue network/database calls inside loops; recommend batching (Promise.all), joins, or aggregate endpoints.",
      "why_is_this_important": "N+1 patterns explode latency and load.",
      "severity": "High",
      "bad_example": "for (const id of ids){ await fetch(`/users/${id}`) }",
      "good_example": "const resps = await Promise.all(ids.map(id=>fetch(`/users/${id}`)));",
      "examples": [
        {
          "snippet": "await loop(fetch())",
          "isCorrect": false
        },
        {
          "snippet": "await Promise.all(ids.map(fetchUser))",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "6a336e54-e587-44f8-acec-cc9ec24d1c3e",
      "buckets": ["database-query-performance", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Derive TypeScript types from validation schemas",
      "rule": "Avoid duplicating runtime schemas and TypeScript types; derive types from constants/functions or declare as const tuples.",
      "why_is_this_important": "Keeps types and runtime in sync, reducing drift.",
      "severity": "Medium",
      "bad_example": "type Status = 'syncing'|'synced'|'error'; const STATUSES=['syncing','synced','error'];",
      "good_example": "const STATUSES = ['syncing','synced','error'] as const; type Status = typeof STATUSES[number];",
      "examples": [
        {
          "snippet": "type X='a'|'b'; const ARR=['a','b']",
          "isCorrect": false
        },
        {
          "snippet": "const ARR=['a','b'] as const; type X=typeof ARR[number]",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "7df45ca7-eba6-4e55-9553-840aaec7f8e0",
      "buckets": ["duplication-complexity", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Prefer specific types over any/unknown where inferable",
      "rule": "Replace any/unknown with inferred generics, unions, or precise interfaces when the shape is known.",
      "why_is_this_important": "Preserves type safety and enables better tooling.",
      "severity": "High",
      "bad_example": "function parse(x: any): any { return JSON.parse(x); }",
      "good_example": "type User={id:string;name:string}; function parseUser(json:string):User{ return JSON.parse(json) as User; }",
      "examples": [
        {
          "snippet": "let v: any",
          "isCorrect": false
        },
        {
          "snippet": "function id<T>(x:T):T { return x }",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "ab85fa92-77d4-485e-af8a-45dd0b2c6912",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "title": "Use Promise.allSettled for batch operations with partial failures",
      "rule": "For many independent tasks, prefer Promise.allSettled and handle per-item results.",
      "why_is_this_important": "One failure should not mask other successes.",
      "severity": "Medium",
      "bad_example": "await Promise.all(tasks.map(t=>t())) // one error cancels everything",
      "good_example": "const results = await Promise.allSettled(tasks.map(t=>t())); const failed = results.filter(r=>r.status==='rejected');",
      "examples": [
        {
          "snippet": "await Promise.all([...])",
          "isCorrect": false
        },
        {
          "snippet": "await Promise.allSettled([...])",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "05addb4f-0c4c-4287-8ee5-15d0f0ebe0f8",
      "buckets": ["error-handling", "resilience-retries-idempotency"],
      "scope": "file"
    },
    {
      "title": "Avoid deprecated APIs via types/@deprecated metadata",
      "rule": "Flag usages marked as @deprecated (via JSDoc or types) and propose the documented alternative when available.",
      "why_is_this_important": "Prevents regressions and eases dependency upgrades.",
      "severity": "Medium",
      "bad_example": "/** @deprecated use newFn */ function oldFn(){}; oldFn();",
      "good_example": "function newFn(){}; // replace oldFn with newFn",
      "examples": [
        {
          "snippet": "oldApi() // @deprecated",
          "isCorrect": false
        },
        {
          "snippet": "newApi()",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "08f21949-3e4d-42f7-a42f-44b68da31eed",
      "buckets": ["maintainability", "module-architecture"],
      "scope": "file"
    },
    {
      "title": "Create shared translation accessors/hooks instead of prop drilling",
      "rule": "Avoid prop drilling translation functions/objects; expose shared accessors (e.g., a global translation service or context API).",
      "why_is_this_important": "Reduces coupling across UI layers and makes i18n reusable.",
      "severity": "Low",
      "bad_example": "function A(t){ return B(t) } function B(t){ return C(t) } // passing t through multiple layers",
      "good_example": "// pseudo-code: global accessor\nconst I18n = { t: (k) => k };\nfunction render(){ const { t } = I18n; return t('hello'); }",
      "examples": [
        {
          "snippet": "pass t through multiple component levels",
          "isCorrect": false
        },
        {
          "snippet": "use a shared i18n accessor instead of drilling",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "d13cb2f6-777c-4ab5-a8be-b100c0f5f64a",
      "buckets": ["internationalization-i18n", "module-architecture"],
      "scope": "file"
    },
    {
      "title": "Replace print statements with logging framework",
      "rule": "Use the standard logging module (or your app's logger) instead of print() in committed code.",
      "why_is_this_important": "Structured logging supports levels, handlers, correlation IDs, and can be filtered/aggregated in production.",
      "severity": "Medium",
      "bad_example": "def handle():\n    print('starting handler')\n    ...\n    print('done')",
      "good_example": "import logging\nlogger = logging.getLogger(__name__)\n\ndef handle():\n    logger.info('starting handler', extra={'op': 'handle'})\n    ...\n    logger.info('done', extra={'op': 'handle'})",
      "examples": [
        {
          "snippet": "print('error:', e)",
          "isCorrect": false
        },
        {
          "snippet": "logger.exception('operation failed')",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "f42bdaed-7af0-4db4-9256-75a116ae8d7d",
      "buckets": ["observability-logging", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Remove unused imports and variables",
      "rule": "Delete imports and locals that are not referenced; prefer tooling (ruff/flake8/mypy) to enforce.",
      "why_is_this_important": "Reduces noise and cognitive load, prevents accidental side effects and speeds up tooling.",
      "severity": "Low",
      "bad_example": "import os, sys  # sys unused\nx = 42  # never read",
      "good_example": "import os\n# removed unused imports/variables",
      "examples": [
        {
          "snippet": "from math import sqrt  # unused",
          "isCorrect": false
        },
        {
          "snippet": "from math import sqrt; print(sqrt(4))",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "ec0154d3-1609-4f95-b9e3-9d899a0c65b7",
      "buckets": ["maintainability", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Add comprehensive type hints",
      "rule": "Annotate function parameters and return types; use TypedDict/Protocol/Dataclass/Pydantic where appropriate.",
      "why_is_this_important": "Type hints prevent whole classes of bugs and improve IDE/refactor support.",
      "severity": "Medium",
      "bad_example": "def total(items):\n    return sum(i['price'] * i['qty'] for i in items)",
      "good_example": "from typing import TypedDict, Iterable\nclass Line(TypedDict):\n    price: float\n    qty: int\n\ndef total(items: Iterable[Line]) -> float:\n    return sum(i['price'] * i['qty'] for i in items)",
      "examples": [
        {
          "snippet": "def f(x): ...",
          "isCorrect": false
        },
        {
          "snippet": "def f(x: int) -> str: ...",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "c7147d0e-8b79-488c-abdd-55be44fa2710",
      "buckets": ["stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Use timezone-aware datetime objects",
      "rule": "Store and compare datetimes as timezone-aware (UTC). Convert to local time only at the edges (UI/IO).",
      "why_is_this_important": "Avoids subtle bugs with DST/offset math and makes comparisons reliable.",
      "severity": "Medium",
      "bad_example": "from datetime import datetime\nexpires_at = datetime.now()  # naive",
      "good_example": "from datetime import datetime, timezone\nexpires_at = datetime.now(timezone.utc)",
      "examples": [
        {
          "snippet": "datetime.utcnow()",
          "isCorrect": false
        },
        {
          "snippet": "datetime.now(timezone.utc)",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "8ebe52e8-2e65-4741-918c-fa6b2f34721e",
      "buckets": ["stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Fix variable shadowing in nested loops",
      "rule": "Use distinct variable names across scopes; never reuse the outer loop variable in inner loops or comprehensions.",
      "why_is_this_important": "Shadowing hides bugs and makes code hard to reason about.",
      "severity": "Low",
      "bad_example": "for i in range(3):\n    for i in range(2):\n        pass  # shadows outer i",
      "good_example": "for i in range(3):\n    for j in range(2):\n        pass",
      "examples": [
        {
          "snippet": "[i for i in items for i in i.children]",
          "isCorrect": false
        },
        {
          "snippet": "[(p, c) for p in items for c in p.children]",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "62a28287-a8af-41c4-b4e6-3824ac45274a",
      "buckets": ["readability-refactor", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Add specific exception handling",
      "rule": "Catch and handle only the exceptions you expect (e.g., KeyError, ValueError, TimeoutError); let unknown ones bubble.",
      "why_is_this_important": "Prevents masking real failures and supports targeted recovery.",
      "severity": "High",
      "bad_example": "try:\n    return cache[data]\nexcept Exception:\n    return None",
      "good_example": "try:\n    return cache[data]\nexcept KeyError:\n    logger.info('miss', extra={'key': data})\n    return None",
      "examples": [
        {
          "snippet": "except Exception: pass",
          "isCorrect": false
        },
        {
          "snippet": "except (KeyError, ValueError) as e: ...",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "81a398f5-2649-456a-bdef-5d3e96010154",
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Add transaction handling with rollback",
      "rule": "Wrap multi-statement DB operations in a transaction; commit on success and rollback on any exception.",
      "why_is_this_important": "Guarantees atomicity and consistent data on failures.",
      "severity": "High",
      "bad_example": "conn.execute('INSERT ...')\nconn.execute('UPDATE ...')  # no transaction",
      "good_example": "tx = conn.begin()\ntry:\n    conn.execute('INSERT ...')\n    conn.execute('UPDATE ...')\n    tx.commit()\nexcept Exception:\n    tx.rollback()\n    logger.exception('db tx failed')\n    raise",
      "examples": [
        {
          "snippet": "do_many_writes(conn)  # no tx",
          "isCorrect": false
        },
        {
          "snippet": "with conn.begin(): do_many_writes(conn)",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "b48b2608-b66e-436c-b48f-15650ae30035",
      "buckets": ["database-query-performance", "error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Handle file operations errors",
      "rule": "Guard file IO with try/except; handle OSError and data parse errors with clear messages.",
      "why_is_this_important": "Prevents crashes when files are missing, locked, or malformed.",
      "severity": "High",
      "bad_example": "data = open(path).read()",
      "good_example": "import json\ntry:\n    with open(path, 'r', encoding='utf-8') as f:\n        data = json.load(f)\nexcept FileNotFoundError:\n    logger.error('file not found', extra={'path': path})\nexcept (OSError, json.JSONDecodeError) as e:\n    logger.exception('read failed', extra={'path': path})\n    raise",
      "examples": [
        {
          "snippet": "open(path).read()",
          "isCorrect": false
        },
        {
          "snippet": "with open(path) as f: ...;  # try/except around",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "7183075e-485a-4e69-8b8f-80c1e759a61a",
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Add error handling for external service calls",
      "rule": "Wrap HTTP/SDK calls with timeouts and catch transport/errors; log context and map to domain failures.",
      "why_is_this_important": "External calls are unreliable; explicit handling avoids hanging and unclear states.",
      "severity": "High",
      "bad_example": "r = requests.get(url)\nreturn r.json()",
      "good_example": "import requests\ntry:\n    r = requests.get(url, timeout=5)\n    r.raise_for_status()\n    return r.json()\nexcept requests.Timeout:\n    logger.warning('timeout', extra={'url': url})\n    raise\nexcept requests.RequestException as e:\n    logger.exception('http error', extra={'url': url})\n    raise",
      "examples": [
        {
          "snippet": "requests.post(url, data=payload)",
          "isCorrect": false
        },
        {
          "snippet": "requests.post(url, json=payload, timeout=5)",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "40a801a0-8b0f-47cb-b35a-609560bda6d8",
      "buckets": [
        "error-handling",
        "observability-logging",
        "resilience-retries-idempotency",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "title": "Use dict.get() with defaults for safe key access",
      "rule": "When keys may be absent, prefer dict.get(key, default) or setdefault instead of direct indexing.",
      "why_is_this_important": "Avoids KeyError and documents fallback behavior.",
      "severity": "Medium",
      "bad_example": "country = payload['address']['country']",
      "good_example": "country = payload.get('address', {}).get('country', 'unknown')",
      "examples": [
        {
          "snippet": "d['x']",
          "isCorrect": false
        },
        {
          "snippet": "d.get('x', 0)",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "10ff58da-53e2-4b37-9b56-17c9d68a294d",
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Add input validation for critical parameters",
      "rule": "Validate presence, type, and range of critical inputs at boundaries (API, CLI, jobs) and fail fast with clear messages.",
      "why_is_this_important": "Reduces downstream errors and improves error messages for callers.",
      "severity": "High",
      "bad_example": "def charge(amount):\n    return gateway.charge(amount)",
      "good_example": "def charge(amount: int) -> str:\n    if not isinstance(amount, int) or amount <= 0:\n        raise ValueError('amount must be a positive integer')\n    return gateway.charge(amount)",
      "examples": [
        {
          "snippet": "def run(p): ... # no checks",
          "isCorrect": false
        },
        {
          "snippet": "if not p: raise ValueError('p required')",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "f08548ab-5309-4fc8-8e1f-590f1f3bd0f9",
      "buckets": [
        "api-conventions",
        "error-handling",
        "security-hardening",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "title": "Add database connection decorators",
      "rule": "Provide a decorator/context manager that opens/closes DB sessions and handles commit/rollback automatically.",
      "why_is_this_important": "Prevents connection leaks and ensures consistent transaction semantics.",
      "severity": "Medium",
      "bad_example": "def repo_op():\n    s = Session()\n    s.add(obj)\n    s.commit()\n    s.close()  # error paths may leak",
      "good_example": "from contextlib import contextmanager\n@contextmanager\ndef session_scope():\n    s = Session()\n    try:\n        yield s\n        s.commit()\n    except Exception:\n        s.rollback()\n        raise\n    finally:\n        s.close()\n\ndef repo_op():\n    with session_scope() as s:\n        s.add(obj)",
      "examples": [
        {
          "snippet": "s = Session(); ...; # no finally",
          "isCorrect": false
        },
        {
          "snippet": "with session_scope() as s: ...",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "7d3cb5ad-b1b0-4841-a486-f5bd7f8f63a0",
      "buckets": [
        "database-query-performance",
        "maintainability",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "title": "Add database indexes for query performance",
      "rule": "Identify hot lookups/joins/sorts and add appropriate single/compound indexes in migrations.",
      "why_is_this_important": "Prevents full scans and reduces latency under load.",
      "severity": "Medium",
      "bad_example": "-- missing index on (org_id, created_at)\nSELECT * FROM events WHERE org_id = ? ORDER BY created_at DESC;",
      "good_example": "CREATE INDEX CONCURRENTLY idx_events_org_created ON events(org_id, created_at DESC);",
      "examples": [
        {
          "snippet": "WHERE user_id = ?  -- no index",
          "isCorrect": false
        },
        {
          "snippet": "CREATE INDEX idx_users_user_id ON users(user_id)",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "5d362095-ed85-4aa5-85dc-2fec2f3b5b8d",
      "buckets": [
        "database-query-performance",
        "performance-efficiency",
        "stack-python"
      ],
      "scope": "pull-request"
    },
    {
      "title": "Optimize client initialization patterns",
      "rule": "Instantiate expensive clients (DB/HTTP/SDK) once and inject/reuse them; avoid per-call construction.",
      "why_is_this_important": "Reduces connection churn and improves throughput.",
      "severity": "Medium",
      "bad_example": "def handler():\n    client = HttpClient()\n    return client.get(url)",
      "good_example": "class Service:\n    def __init__(self, client: 'HttpClient'):\n        self.client = client\n    def handler(self):\n        return self.client.get(url)",
      "examples": [
        {
          "snippet": "HttpClient() in every function",
          "isCorrect": false
        },
        {
          "snippet": "Service(HttpClient()).handler()",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "aaa1f6aa-0d50-46c0-ab8f-ae610a58fffa",
      "buckets": ["performance-efficiency", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Cache expensive computations",
      "rule": "Apply memoization (functools.lru_cache) or explicit caches for pure, expensive computations keyed by inputs.",
      "why_is_this_important": "Avoids repeated CPU/network work on hot paths.",
      "severity": "Medium",
      "bad_example": "def parse_pattern(p):\n    return re.compile(p)  # compiled every call",
      "good_example": "from functools import lru_cache\n@lru_cache(maxsize=256)\ndef parse_pattern(p: str):\n    return re.compile(p)",
      "examples": [
        {
          "snippet": "compute(x)  # repeated",
          "isCorrect": false
        },
        {
          "snippet": "@lru_cache\ndef compute(x): ...",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "87219bae-c68a-4fc4-a9c7-7bc8703225a2",
      "buckets": ["performance-efficiency", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Optimize database operations with batching",
      "rule": "Use executemany/bulk operations and commit in sensible batches for large writes.",
      "why_is_this_important": "Reduces round trips and lock contention; improves throughput.",
      "severity": "Medium",
      "bad_example": "for row in rows:\n    conn.execute('INSERT ...', row)\nconn.commit()",
      "good_example": "conn.executemany('INSERT ...', rows)\nconn.commit()  # or commit every N rows for very large sets",
      "examples": [
        {
          "snippet": "for r in rows: insert(r)",
          "isCorrect": false
        },
        {
          "snippet": "executemany('INSERT ...', rows)",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "ee5baf91-80c2-47e9-a85c-69ff6457ef95",
      "buckets": [
        "database-query-performance",
        "performance-efficiency",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "title": "Use list comprehensions and avoid redundant sorting",
      "rule": "Prefer comprehensions over map/filter chains and avoid double-sorting or sorting inside loops.",
      "why_is_this_important": "Improves readability and avoids unnecessary allocations/time.",
      "severity": "Low",
      "bad_example": "result = list(map(f, filter(pred, xs)))\nfor _ in range(3): xs = sorted(xs)",
      "good_example": "result = [f(x) for x in xs if pred(x)]\nxs = sorted(xs)  # once, outside loops",
      "examples": [
        {
          "snippet": "sorted(sorted(xs))",
          "isCorrect": false
        },
        {
          "snippet": "xs = sorted(xs, key=key)",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "c50c864f-c7ad-40df-af72-ae7897c8ad8f",
      "buckets": [
        "performance-efficiency",
        "readability-refactor",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "title": "Extract duplicated logic to helper functions",
      "rule": "Move repeated sequences of operations into named helpers or utilities and reuse them.",
      "why_is_this_important": "Single source of truth reduces bugs and accelerates changes.",
      "severity": "Medium",
      "bad_example": "total = sum(i['p']*i['q'] for i in items)\n...\nother_total = sum(i['p']*i['q'] for i in items2)",
      "good_example": "def line_total(i: dict) -> float:\n    return i['p'] * i['q']\n\ndef sum_total(items: list[dict]) -> float:\n    return sum(line_total(i) for i in items)",
      "examples": [
        {
          "snippet": "same expression pasted everywhere",
          "isCorrect": false
        },
        {
          "snippet": "def helper(...): ...",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "3f3a2662-3101-4de0-85d1-d9d502293e11",
      "buckets": [
        "duplication-complexity",
        "maintainability",
        "readability-refactor",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "title": "Consolidate repetitive configuration patterns",
      "rule": "Replace repeated set/get config calls with data-driven loops or loaders from a single schema/source.",
      "why_is_this_important": "Lowers boilerplate and keeps config behavior consistent.",
      "severity": "Medium",
      "bad_example": "cfg.set('A', env('A'))\ncfg.set('B', env('B'))\ncfg.set('C', env('C'))",
      "good_example": "for key in ['A','B','C']:\n    cfg.set(key, env(key))",
      "examples": [
        {
          "snippet": "set_x(...); set_y(...); set_z(...)",
          "isCorrect": false
        },
        {
          "snippet": "for k in KEYS: set_k(k)",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "9fa5e943-0953-44f2-866a-9d6be11f9004",
      "buckets": [
        "config-environment",
        "duplication-complexity",
        "maintainability",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "title": "Extract constants from hardcoded values",
      "rule": "Move magic values (strings, thresholds, paths) to module-level constants with descriptive names.",
      "why_is_this_important": "Improves readability and reduces drift across call sites.",
      "severity": "Low",
      "bad_example": "if status == 'archived': ...",
      "good_example": "ARCHIVED = 'archived'\nif status == ARCHIVED: ...",
      "examples": [
        {
          "snippet": "if level > 3: ...",
          "isCorrect": false
        },
        {
          "snippet": "MAX_RETRIES = 3; if level > MAX_RETRIES: ...",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "0c457394-1149-4938-9d35-ad132bd7649c",
      "buckets": [
        "maintainability",
        "readability-refactor",
        "style-conventions",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "title": "Refactor conditional logic into loops",
      "rule": "Replace repeated similar if/elif blocks with data-driven loops or dispatch tables.",
      "why_is_this_important": "Reduces code size and avoids missed branches when adding cases.",
      "severity": "Medium",
      "bad_example": "if k == 'a': out['a'] = f(v)\nelif k == 'b': out['b'] = f(v)\nelif k == 'c': out['c'] = f(v)",
      "good_example": "for k in ['a','b','c']:\n    out[k] = f(source[k])",
      "examples": [
        {
          "snippet": "if x==1: ... elif x==2: ... elif x==3: ...",
          "isCorrect": false
        },
        {
          "snippet": "handlers = {1: h1, 2: h2, 3: h3}; handlers[x]()",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "3ef8ead6-f02c-433b-8b1b-23c5d7e21919",
      "buckets": [
        "duplication-complexity",
        "readability-refactor",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "title": "Move large templates to external files",
      "rule": "Store long static templates/prompts in files and load them at runtime; avoid embedding huge multi-line strings in code.",
      "why_is_this_important": "Improves readability and allows independent edits and caching.",
      "severity": "Low",
      "bad_example": "PROMPT = \"\"\"very long template ...\"\"\"",
      "good_example": "from importlib import resources\nPROMPT = resources.files('pkg').joinpath('prompt.txt').read_text(encoding='utf-8')",
      "examples": [
        {
          "snippet": "HTML = \"\"\"... 500 lines ...\"\"\"",
          "isCorrect": false
        },
        {
          "snippet": "HTML = Path('template.html').read_text()",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "9ceaf72d-e7d3-4add-a852-e79668c12a2f",
      "buckets": ["maintainability", "readability-refactor", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Replace hardcoded paths with configuration",
      "rule": "Derive paths/URLs from configuration or environment variables, not string literals in code.",
      "why_is_this_important": "Enables environment-specific deployments and safer secrets management.",
      "severity": "Medium",
      "bad_example": "DATA_DIR = '/var/app/data'",
      "good_example": "import os\nDATA_DIR = os.environ.get('DATA_DIR', '/tmp/app-data')",
      "examples": [
        {
          "snippet": "BASE_URL = 'https://prod.example.com'",
          "isCorrect": false
        },
        {
          "snippet": "BASE_URL = os.environ['BASE_URL']",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "6c7a5a1c-e63c-414f-a5be-615bc616cd90",
      "buckets": ["config-environment", "maintainability", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Make module-level dictionaries immutable",
      "rule": "Expose constant dicts as read-only via MappingProxyType (or frozen dataclasses) to prevent runtime mutation.",
      "why_is_this_important": "Protects shared configuration/state against accidental writes.",
      "severity": "Low",
      "bad_example": "STATUS_MAP = {'ok': 200}\nSTATUS_MAP['fail'] = 500  # allowed",
      "good_example": "from types import MappingProxyType\n_STATUS_MAP = {'ok': 200, 'fail': 500}\nSTATUS_MAP = MappingProxyType(_STATUS_MAP)",
      "examples": [
        {
          "snippet": "CONST = {'a': 1}; CONST['b']=2",
          "isCorrect": false
        },
        {
          "snippet": "CONST = MappingProxyType({'a': 1})",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "16d48f57-80d9-400a-924a-3da39bd854a7",
      "buckets": ["maintainability", "security-hardening", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Use aliased imports to avoid naming collisions",
      "rule": "Alias imports when names overlap with locals or other modules; keep clear, unique identifiers.",
      "why_is_this_important": "Avoids accidental shadowing and improves readability.",
      "severity": "Low",
      "bad_example": "import json\njson = make_json()  # shadows module",
      "good_example": "import json as jsonlib\npayload = jsonlib.dumps(obj)",
      "examples": [
        {
          "snippet": "import time; time = 3",
          "isCorrect": false
        },
        {
          "snippet": "import time as time_module",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "e10640b6-d5cf-456b-a7c6-0f5cbeb6e9bb",
      "buckets": ["readability-refactor", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Replace lambda with regular functions",
      "rule": "Prefer named def functions for non-trivial logic; keep lambdas only for tiny, inline expressions.",
      "why_is_this_important": "Named functions are reusable, testable, and easier to log/profile.",
      "severity": "Low",
      "bad_example": "key = lambda x: complex_parse(x, cfg, limit=3)",
      "good_example": "def parse_key(x: str) -> int:\n    return complex_parse(x, cfg, limit=3)\nkey = parse_key",
      "examples": [
        {
          "snippet": "map(lambda x: heavy(x), xs)",
          "isCorrect": false
        },
        {
          "snippet": "def heavy_key(x): return heavy(x); map(heavy_key, xs)",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "1afef806-c658-4a99-a489-e9997174f6e6",
      "buckets": ["readability-refactor", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Add proper logging for audit and debugging",
      "rule": "Log key operations with structured fields (actor/resource/operation) at appropriate levels; include exception info on failures.",
      "why_is_this_important": "Enables traceability and forensics while keeping logs actionable.",
      "severity": "High",
      "bad_example": "logger.info('user updated')",
      "good_example": "logger.info('user_update', extra={'user_id': uid, 'op': 'update', 'status': 'ok'})",
      "examples": [
        {
          "snippet": "logger.error('failed')",
          "isCorrect": false
        },
        {
          "snippet": "logger.exception('update_failed', extra={'user_id': uid})",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "c979820a-d32d-44d3-af5a-ef470e968b3e",
      "buckets": ["observability-logging", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Make verbose logging conditional",
      "rule": "Guard expensive debug log formatting behind level checks or lazy formatting.",
      "why_is_this_important": "Avoids overhead in hot paths when debug logs are disabled.",
      "severity": "Low",
      "bad_example": "logger.debug('state: %s', json.dumps(state))",
      "good_example": "if logger.isEnabledFor(logging.DEBUG):\n    logger.debug('state: %s', json.dumps(state))",
      "examples": [
        {
          "snippet": "logger.debug(f'big {expensive()}')",
          "isCorrect": false
        },
        {
          "snippet": "if logger.isEnabledFor(logging.DEBUG): logger.debug('x')",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "0f9233bf-c54b-4791-b2d6-bb668373d6fa",
      "buckets": [
        "observability-logging",
        "performance-efficiency",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "title": "Move environment configuration to startup",
      "rule": "Load and validate environment/config once during startup; inject settings into modules instead of re-reading env.",
      "why_is_this_important": "Ensures consistency and surfaces misconfiguration early.",
      "severity": "High",
      "bad_example": "def handler():\n    url = os.getenv('SERVICE_URL')\n    ...",
      "good_example": "class Settings(TypedDict):\n    SERVICE_URL: str\n\nSETTINGS: Settings = load_and_validate_env()\n\ndef handler(settings: Settings = SETTINGS):\n    ...",
      "examples": [
        {
          "snippet": "os.getenv('X') everywhere",
          "isCorrect": false
        },
        {
          "snippet": "SETTINGS = load_env(); use SETTINGS",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "6afc67bd-814f-4afd-ba11-cf3d5a89ed43",
      "buckets": ["config-environment", "module-architecture", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Use dependency injection for resource management",
      "rule": "Pass dependencies (clients, sessions, configs) into functions/classes instead of creating them internally.",
      "why_is_this_important": "Improves testability, reuse, and separation of concerns.",
      "severity": "Medium",
      "bad_example": "def fetch_users():\n    client = HttpClient()\n    return client.get('/users')",
      "good_example": "def fetch_users(client: 'HttpClient'):\n    return client.get('/users')",
      "examples": [
        {
          "snippet": "def repo(): return DB()",
          "isCorrect": false
        },
        {
          "snippet": "def repo(db: DB): return db.query(...)",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "62dcfea8-5315-4124-8403-5533fd9a6982",
      "buckets": ["module-architecture", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Avoid modifying input parameters",
      "rule": "Treat function inputs as immutable; copy before mutation (e.g., dict.copy(), list(x)).",
      "why_is_this_important": "Prevents surprising side effects and makes functions safer to reuse.",
      "severity": "Medium",
      "bad_example": "def normalize(d: dict) -> dict:\n    d['status'] = d['status'].lower()\n    return d",
      "good_example": "def normalize(d: dict) -> dict:\n    out = {**d}\n    out['status'] = out.get('status', '').lower()\n    return out",
      "examples": [
        {
          "snippet": "def f(x): x.append(1); return x",
          "isCorrect": false
        },
        {
          "snippet": "def f(xs): ys = list(xs); ys.append(1); return ys",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "c50011a0-c978-48e6-919b-0526d117ad34",
      "buckets": ["maintainability", "readability-refactor", "stack-python"],
      "scope": "file"
    },
    {
      "title": "Add unique constraints for data integrity",
      "rule": "Enforce uniqueness at the database level (unique indexes/constraints) for identifiers and natural keys.",
      "why_is_this_important": "Application checks are race-prone; DB constraints are authoritative and fast.",
      "severity": "High",
      "bad_example": "# check in app only\nif db.exists('SELECT 1 FROM users WHERE email = ?', [email]):\n    raise ValueError('duplicate')",
      "good_example": "ALTER TABLE users ADD CONSTRAINT users_email_key UNIQUE (email);",
      "examples": [
        {
          "snippet": "if email in emails: ...",
          "isCorrect": false
        },
        {
          "snippet": "CREATE UNIQUE INDEX idx_users_email ON users(email)",
          "isCorrect": true
        }
      ],
      "language": "python",
      "uuid": "c8179413-7d53-44bf-b4af-ebaf000f476d",
      "buckets": [
        "database-query-performance",
        "security-hardening",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "title": "Add error handling for JSON marshalling",
      "rule": "Always check and handle errors from json.Marshal/json.Unmarshal (or Encoder/Decoder). Log context and return a safe, consistent error to callers.",
      "why_is_this_important": "Marshalling can fail for unsupported types or invalid data, leading to empty responses or panics if ignored.",
      "severity": "High",
      "bad_example": "b, _ := json.Marshal(resp)\nw.Write(b)",
      "good_example": "b, err := json.Marshal(resp)\nif err != nil {\n    logger.Error(\"marshal failed\", \"op\", \"writeResp\", \"err\", err)\n    http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)\n    return\n}\n_, _ = w.Write(b)",
      "examples": [
        {
          "snippet": "json.Marshal(x) // ignore error",
          "isCorrect": false
        },
        {
          "snippet": "b, err := json.Marshal(x); if err != nil { return err }",
          "isCorrect": true
        }
      ],
      "language": "go",
      "uuid": "3e34f10d-6978-4dbd-a646-1b2ce93a9a8b",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Return zero values on error for clarity",
      "rule": "When returning (T, error), return the zero value for T (or nil for pointers/slices/maps) whenever error != nil.",
      "why_is_this_important": "Prevents accidental use of partial data and clarifies that the result is invalid when an error occurs.",
      "severity": "Medium",
      "bad_example": "func Find(id string) (User, error) {\n    u := User{ID: id}\n    return u, fmt.Errorf(\"not found\") // partial value\n}",
      "good_example": "func Find(id string) (User, error) {\n    var zero User\n    return zero, fmt.Errorf(\"not found\")\n}",
      "examples": [
        {
          "snippet": "return result, err // result is non-zero",
          "isCorrect": false
        },
        {
          "snippet": "var z T; return z, err",
          "isCorrect": true
        }
      ],
      "language": "go",
      "uuid": "8a191aec-8409-4186-8f55-dcf11defe1e1",
      "buckets": ["error-handling", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Avoid exposing internal IDs in error messages",
      "rule": "Do not include internal identifiers (DB IDs, service IDs, tokens) in client-facing errors. Log them internally; return generic messages externally.",
      "why_is_this_important": "Reduces information leakage, improves security, and keeps public errors stable.",
      "severity": "Medium",
      "bad_example": "return fmt.Errorf(\"serviceId %s not found\", serviceID)",
      "good_example": "logger.Error(\"resource not found\", \"service_id\", serviceID)\nreturn ErrNotFound",
      "examples": [
        {
          "snippet": "fmt.Errorf(\"pk=%s invalid\", pk)",
          "isCorrect": false
        },
        {
          "snippet": "logger.Error(\"invalid\", \"pk\", pk); return ErrInvalid",
          "isCorrect": true
        }
      ],
      "language": "go",
      "uuid": "3d1a5c02-2781-4145-8268-9c57a8fda7bf",
      "buckets": ["error-handling", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Refactor duplicated validation logic",
      "rule": "Centralize repeated validation rules into helpers or small packages. Reuse them across handlers, services, and jobs.",
      "why_is_this_important": "Prevents divergence of business rules and reduces maintenance cost.",
      "severity": "Medium",
      "bad_example": "if amount <= 0 { return fmt.Errorf(\"amount <= 0\") }\n// repeated in many places",
      "good_example": "func validateAmount(v int) error {\n    if v <= 0 { return errors.New(\"amount_must_be_positive\") }\n    return nil\n}\n// reuse validateAmount(...) everywhere",
      "examples": [
        {
          "snippet": "// copy-paste the same checks in multiple files",
          "isCorrect": false
        },
        {
          "snippet": "func validateX(...) error { ... } // reused",
          "isCorrect": true
        }
      ],
      "language": "go",
      "uuid": "dd6dfcf5-5c65-4c91-8d49-e7f20184907f",
      "buckets": ["duplication-complexity", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Extract duplicated request validation to helper functions",
      "rule": "For HTTP/RPC handlers, parse+validate inputs in dedicated functions. Return typed errors and reuse across endpoints.",
      "why_is_this_important": "Keeps handlers small, consistent, and easier to test.",
      "severity": "Medium",
      "bad_example": "func createUser(w http.ResponseWriter, r *http.Request){\n    name := r.FormValue(\"name\")\n    if name == \"\" { http.Error(w, \"missing name\", 400); return }\n    // repeated in other handlers\n}",
      "good_example": "func parseCreateUser(r *http.Request) (CreateUser, error) {\n    name := r.FormValue(\"name\")\n    if name == \"\" { return CreateUser{}, ErrMissingName }\n    return CreateUser{Name: name}, nil\n}\n\nfunc createUser(w http.ResponseWriter, r *http.Request){\n    req, err := parseCreateUser(r)\n    if err != nil { http.Error(w, err.Error(), http.StatusBadRequest); return }\n    // use req\n}",
      "examples": [
        {
          "snippet": "r.FormValue(...) checks repeated in each handler",
          "isCorrect": false
        },
        {
          "snippet": "req, err := parseCreateUser(r)",
          "isCorrect": true
        }
      ],
      "language": "go",
      "uuid": "29267603-4bc6-495f-862f-9316f5467bb8",
      "buckets": ["api-conventions", "duplication-complexity"],
      "scope": "file"
    },
    {
      "title": "Move startup validation out of interceptor factories",
      "rule": "Perform one-time configuration/dependency validation at process startup (init/bootstrap). Avoid doing it inside per-request middleware/interceptor factories.",
      "why_is_this_important": "Prevents repeated work on hot paths and fails fast when configuration is invalid.",
      "severity": "Medium",
      "bad_example": "func NewAuthInterceptor(cfg Config) grpc.UnaryServerInterceptor {\n    if cfg.Issuer == \"\" { panic(\"missing issuer\") } // runs when wiring per-request\n    return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) { ... }\n}",
      "good_example": "func ValidateConfig(cfg Config) error {\n    if cfg.Issuer == \"\" { return errors.New(\"missing issuer\") }\n    return nil\n}\n// at startup\nif err := ValidateConfig(cfg); err != nil { log.Fatal(err) }\ninterceptor := NewAuthInterceptor(cfg)",
      "examples": [
        {
          "snippet": "validate inside middleware factory on each wiring",
          "isCorrect": false
        },
        {
          "snippet": "validate once at startup; construct middleware after",
          "isCorrect": true
        }
      ],
      "language": "go",
      "uuid": "7e8486ab-8126-4981-a870-82b877ac14f5",
      "buckets": ["config-environment", "module-architecture"],
      "scope": "file"
    },
    {
      "title": "Fix goroutine execution to run in parallel",
      "rule": "Launch goroutines outside of waits, capture loop variables, and use sync.WaitGroup (and buffered channels when needed) to achieve true concurrency.",
      "why_is_this_important": "Prevents accidental serialization and data races from captured variables.",
      "severity": "High",
      "bad_example": "for _, u := range urls {\n    go func() { fetch(u) }() // captures loop var\n}",
      "good_example": "var wg sync.WaitGroup\nwg.Add(len(urls))\nfor _, u := range urls {\n    u := u // capture\n    go func(u string){\n        defer wg.Done()\n        fetch(u)\n    }(u)\n}\nwg.Wait()",
      "examples": [
        {
          "snippet": "go func(){ use(u) }() // without capturing u",
          "isCorrect": false
        },
        {
          "snippet": "u := u; go func(u string){ ... }(u)",
          "isCorrect": true
        }
      ],
      "language": "go",
      "uuid": "485b37dc-b1ca-473b-ab64-42af6c3b3fc8",
      "buckets": ["concurrency-safety"],
      "scope": "file"
    },
    {
      "title": "Add request context to error logs",
      "rule": "Include request-scoped fields (method, path, request_id, deadline/canceled) in error logs. Pass context through layers.",
      "why_is_this_important": "Improves debuggability and traceability across services.",
      "severity": "Medium",
      "bad_example": "logger.Error(\"failed to handle request\")",
      "good_example": "ctx := r.Context()\nlogger.Error(\"handler failed\",\n    \"method\", r.Method,\n    \"path\", r.URL.Path,\n    \"request_id\", reqIDFrom(ctx),\n    \"ctx_err\", ctx.Err(),\n)",
      "examples": [
        {
          "snippet": "logger.Error(\"failed\") // no context",
          "isCorrect": false
        },
        {
          "snippet": "logger.Error(\"failed\", \"method\", r.Method, \"request_id\", id)",
          "isCorrect": true
        }
      ],
      "language": "go",
      "uuid": "8936b65c-8108-4605-85a7-d6c16eeaf783",
      "buckets": ["error-handling", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Use standard HTTP status text for errors",
      "rule": "Return appropriate status codes and prefer http.StatusText(status) (or a consistent JSON error schema) rather than inventing custom reason phrases.",
      "why_is_this_important": "Keeps responses predictable for clients and aligns with platform conventions.",
      "severity": "Low",
      "bad_example": "w.WriteHeader(500)\n_, _ = w.Write([]byte(\"Server go-boom\"))",
      "good_example": "http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)\n// or JSON: w.WriteHeader(http.StatusBadRequest); json.NewEncoder(w).Encode(map[string]string{\"error\": http.StatusText(http.StatusBadRequest)})",
      "examples": [
        {
          "snippet": "w.WriteHeader(499); w.Write([]byte(\"Oops\"))",
          "isCorrect": false
        },
        {
          "snippet": "http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)",
          "isCorrect": true
        }
      ],
      "language": "go",
      "uuid": "d6a7fe97-7da8-4107-81dd-761171356b2f",
      "buckets": ["api-conventions", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Order validations before database queries",
      "rule": "Validate inputs and preconditions up-front and return early before issuing any database queries.",
      "why_is_this_important": "Failing fast reduces wasted I/O, keeps code paths simple, and prevents unnecessary transaction/connection usage.",
      "severity": "High",
      "bad_example": "var user = await _db.Users.FindAsync(id);\nif (id <= 0) return BadRequest();",
      "good_example": "if (id <= 0) return BadRequest();\nvar user = await _db.Users.FindAsync(id);",
      "examples": [
        {
          "snippet": "var row = ctx.Table.Find(id); if(!IsValid(id)) return;",
          "isCorrect": false
        },
        {
          "snippet": "if(!IsValid(id)) return; var row = await ctx.Table.FindAsync(id);",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "bbb73176-5c9c-4250-9f94-6a05c61be145",
      "buckets": ["api-conventions", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Add null checks to prevent NullReferenceException",
      "rule": "Guard all potentially-null references with null checks, null-coalescing, or pattern matching before dereferencing.",
      "why_is_this_important": "Prevents runtime crashes and clarifies intended fallback behavior.",
      "severity": "High",
      "bad_example": "var city = user.Address.City.ToLower();",
      "good_example": "var city = user?.Address?.City?.ToLower() ?? \"unknown\";",
      "examples": [
        {
          "snippet": "user.Address.City",
          "isCorrect": false
        },
        {
          "snippet": "user?.Address?.City ?? \"unknown\"",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "73f03c8d-5ff8-4235-a9eb-705e41d5cc92",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Use specific exception types over generic Exception",
      "rule": "Throw and catch the most specific exception type available; avoid catching or throwing System.Exception unless rethrowing.",
      "why_is_this_important": "Specific types enable precise handling, better logging, and safer retries.",
      "severity": "High",
      "bad_example": "catch (Exception ex) { /* handle all */ }",
      "good_example": "catch (InvalidOperationException ex) { /* corrective action */ }\ncatch (HttpRequestException ex) { /* retry/backoff */ }",
      "examples": [
        {
          "snippet": "throw new Exception(\"failed\");",
          "isCorrect": false
        },
        {
          "snippet": "throw new InvalidOperationException(\"invalid state\");",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "4eb610ae-a193-4c7b-80b8-c9d3e237446e",
      "buckets": ["error-handling", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Add try-catch blocks for external calls",
      "rule": "Wrap network, file system, and other external calls in try/catch; add context and map to application-level errors.",
      "why_is_this_important": "External dependencies fail unpredictably; explicit handling makes failures observable and recoverable.",
      "severity": "High",
      "bad_example": "var json = await http.GetStringAsync(url);",
      "good_example": "try {\n    using var resp = await http.GetAsync(url);\n    if (!resp.IsSuccessStatusCode) throw new HttpRequestException($\"HTTP {(int)resp.StatusCode}\");\n} catch (HttpRequestException ex) {\n    _log.Error(ex, \"Fetch failed\", new { url });\n    throw;\n}",
      "examples": [
        {
          "snippet": "await client.GetStringAsync(u); // no checks",
          "isCorrect": false
        },
        {
          "snippet": "try { await client.GetAsync(u); } catch(HttpRequestException e) { /* log */ }",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "315f571a-253e-4e97-98c8-1619cf1ae3d1",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Await async operations properly",
      "rule": "Await Tasks instead of blocking (no .Result or .Wait()); prefer async/await end-to-end and configure awaits appropriately.",
      "why_is_this_important": "Prevents deadlocks, thread pool starvation, and lost exceptions.",
      "severity": "High",
      "bad_example": "var data = http.GetStringAsync(url).Result; // blocks",
      "good_example": "var data = await http.GetStringAsync(url);",
      "examples": [
        {
          "snippet": "task.Wait();",
          "isCorrect": false
        },
        {
          "snippet": "await task;",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "380c3b9e-8605-4b8f-a8d4-59199d1d7b80",
      "buckets": ["concurrency-safety", "error-handling"],
      "scope": "file"
    },
    {
      "title": "Use safe type casting with as operator",
      "rule": "Use the as operator or pattern matching for safe casts and guard null results before usage.",
      "why_is_this_important": "Prevents InvalidCastException and makes intent explicit.",
      "severity": "Medium",
      "bad_example": "var d = (Derived)b; d.Run();",
      "good_example": "if (b is Derived d) { d.Run(); }",
      "examples": [
        {
          "snippet": "var x = (Foo)obj;",
          "isCorrect": false
        },
        {
          "snippet": "if(obj is Foo foo){ /* use foo */ }",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "4b0d350f-9b0e-42de-b594-4a9cb99701ea",
      "buckets": ["error-handling", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Use TryParse for string conversions",
      "rule": "Prefer TryParse-style APIs for user/IO input instead of Parse, and validate culture/format where applicable.",
      "why_is_this_important": "Avoids exceptions as control flow and handles invalid input gracefully.",
      "severity": "High",
      "bad_example": "var n = int.Parse(value);",
      "good_example": "if (!int.TryParse(value, out var n)) return BadRequest(\"invalid number\");",
      "examples": [
        {
          "snippet": "DateTime.Parse(s)",
          "isCorrect": false
        },
        {
          "snippet": "DateTime.TryParse(s, out var dt)",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "1a2dff35-1fe6-4e1c-ba30-c5570eabd3c8",
      "buckets": ["error-handling", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Extract duplicated business logic",
      "rule": "Move repeated domain rules into reusable methods/services; keep controllers and handlers thin.",
      "why_is_this_important": "Single source of truth improves correctness and testability.",
      "severity": "Medium",
      "bad_example": "total += item.Price * item.Qty; // copied across files",
      "good_example": "decimal LineTotal(Item i) => i.Price * i.Qty;\nvar total = items.Sum(LineTotal);",
      "examples": [
        {
          "snippet": "price*qty repeated in loops",
          "isCorrect": false
        },
        {
          "snippet": "Sum(items.Select(LineTotal))",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "b66df26b-66eb-4003-b253-ee9cb17c7306",
      "buckets": [
        "duplication-complexity",
        "module-architecture",
        "readability-refactor"
      ],
      "scope": "file"
    },
    {
      "title": "Centralize string constants",
      "rule": "Define shared string literals (route names, keys, claim types) as constants/enums in a single place.",
      "why_is_this_important": "Prevents drift and typos across the codebase.",
      "severity": "Medium",
      "bad_example": "if (role == \"AdminRoleV2\") { /* ... */ }",
      "good_example": "public static class Roles { public const string Admin = \"AdminRoleV2\"; }\nif (role == Roles.Admin) { /* ... */ }",
      "examples": [
        {
          "snippet": "if(type==\"A\"){}",
          "isCorrect": false
        },
        {
          "snippet": "if(type==Types.Admin){}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "8a8bf8ec-4bbc-4c62-9633-9ae850334db0",
      "buckets": [
        "duplication-complexity",
        "maintainability",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "title": "Extract common query logic",
      "rule": "Factor repeated LINQ predicates/projections into reusable expressions or methods.",
      "why_is_this_important": "Improves readability and ensures consistent filtering/mapping.",
      "severity": "Medium",
      "bad_example": "var q1 = ctx.Users.Where(u=>u.Active && !u.Deleted);\nvar q2 = ctx.Admins.Where(a=>a.Active && !a.Deleted);",
      "good_example": "Expression<Func<IHasFlags,bool>> active = e => e.Active && !e.Deleted;\nvar q1 = ctx.Users.Where(active);\nvar q2 = ctx.Admins.Where(active);",
      "examples": [
        {
          "snippet": "Where(x=>x.Active && !x.Deleted) repeated",
          "isCorrect": false
        },
        {
          "snippet": "Expression predicate reused",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "2cfbc1f6-0a1c-46ec-9795-55dd781ba3bf",
      "buckets": ["duplication-complexity", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Refactor large methods into smaller functions",
      "rule": "Split long methods into cohesive private helpers with clear names and single responsibilities.",
      "why_is_this_important": "Improves readability, testability, and reduces bug surface.",
      "severity": "Medium",
      "bad_example": "public void Process(){ /* 200+ lines */ }",
      "good_example": "public void Process(){ Validate(); var data = Load(); var result = Transform(data); Save(result); }",
      "examples": [
        {
          "snippet": "void Big(){ /* ...long... */ }",
          "isCorrect": false
        },
        {
          "snippet": "void Big(){ Step1(); Step2(); Step3(); }",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "e9464e23-3c24-435d-94ef-092a6b465d29",
      "buckets": ["readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Remove debug code from production",
      "rule": "Delete Console.WriteLine, Debug.WriteLine, and temporary diagnostics before merging; rely on structured logging.",
      "why_is_this_important": "Prevents noisy logs and leaking internals to users.",
      "severity": "Medium",
      "bad_example": "Console.WriteLine($\"DEBUG: {payload}\");",
      "good_example": "_logger.LogDebug(\"payload received {Size}\", payload.Length);",
      "examples": [
        {
          "snippet": "Console.WriteLine(\"here\")",
          "isCorrect": false
        },
        {
          "snippet": "_logger.LogInformation(\"done\")",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "a12ccd78-7631-4960-94ec-693bf07410ec",
      "buckets": ["maintainability", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Use proper naming conventions",
      "rule": "Follow .NET naming: PascalCase for types/methods/properties, camelCase for locals/parameters, and meaningful names.",
      "why_is_this_important": "Consistency improves readability and tooling support.",
      "severity": "Low",
      "bad_example": "public int calc_val(int X) { return X; }",
      "good_example": "public int CalculateValue(int x) { return x; }",
      "examples": [
        {
          "snippet": "public string get_name()",
          "isCorrect": false
        },
        {
          "snippet": "public string GetName()",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "6d355899-3e83-46db-8cf4-760e0b307747",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "title": "Use enums instead of magic strings",
      "rule": "Replace string literals that represent finite sets with enums (optionally flagged) or constants.",
      "why_is_this_important": "Improves type safety and discoverability.",
      "severity": "Medium",
      "bad_example": "if (status == \"Approved\") { ... }",
      "good_example": "enum Status { Pending, Approved, Rejected }\nif (status == Status.Approved) { ... }",
      "examples": [
        {
          "snippet": "if(role==\"Admin\")",
          "isCorrect": false
        },
        {
          "snippet": "if(role==Role.Admin)",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "bba0e392-52b5-4338-a9d7-8b5c8c7f9069",
      "buckets": ["maintainability", "readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Optimize database queries with JOINs",
      "rule": "Prefer JOINs/eager loading over per-row queries to avoid N+1 patterns.",
      "why_is_this_important": "Reduces round-trips and improves query performance.",
      "severity": "High",
      "bad_example": "var orders = await ctx.Orders.ToListAsync();\nforeach (var o in orders) o.Customer = await ctx.Customers.FindAsync(o.CustomerId);",
      "good_example": "var orders = await ctx.Orders.Include(o => o.Customer).ToListAsync();",
      "examples": [
        {
          "snippet": "foreach rows => FindAsync()",
          "isCorrect": false
        },
        {
          "snippet": "Include(x => x.Relation)",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "756b6068-8470-4fd5-93c3-e6138af28a61",
      "buckets": ["database-query-performance", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Use Dictionary lookups instead of linear searches",
      "rule": "For frequent key lookups, use Dictionary/ConcurrentDictionary instead of repeated linear scans.",
      "why_is_this_important": "Improves lookup performance from O(n) to O(1) average.",
      "severity": "Medium",
      "bad_example": "var user = users.FirstOrDefault(u => u.Id == id);",
      "good_example": "if (userMap.TryGetValue(id, out var user)) { /* ... */ }",
      "examples": [
        {
          "snippet": "list.First(x=>x.Id==id)",
          "isCorrect": false
        },
        {
          "snippet": "dict.TryGetValue(id, out var v)",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "4d2d1802-e77e-44e0-a76c-3d62cad6f636",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Cache expensive operations outside loops",
      "rule": "Hoist constant work out of loops and memoize expensive computations when inputs repeat.",
      "why_is_this_important": "Reduces CPU and allocation pressure.",
      "severity": "Medium",
      "bad_example": "foreach (var s in items) { var re = new Regex(pattern); if (re.IsMatch(s)) {...} }",
      "good_example": "var re = new Regex(pattern, RegexOptions.Compiled);\nforeach (var s in items) { if (re.IsMatch(s)) {...} }",
      "examples": [
        {
          "snippet": "new Regex(p) in each iteration",
          "isCorrect": false
        },
        {
          "snippet": "compile regex once; reuse",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "60f31c06-9bbd-49ef-8234-d7f9cd0f26ee",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Use HashSet for fast membership checks",
      "rule": "Use HashSet<T> for repeated contains checks on large collections.",
      "why_is_this_important": "Provides O(1) average membership checks vs O(n) scans.",
      "severity": "Medium",
      "bad_example": "if (list.Contains(id)) { /* ... */ }",
      "good_example": "if (set.Contains(id)) { /* ... */ }",
      "examples": [
        {
          "snippet": "list.Contains(x)",
          "isCorrect": false
        },
        {
          "snippet": "hashSet.Contains(x)",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "e72ea711-bc03-403c-b18b-08596a4d7e58",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Use StringBuilder for string concatenation",
      "rule": "Use StringBuilder for many concatenations in loops or when building large strings.",
      "why_is_this_important": "Avoids repeated allocations from immutable string concatenation.",
      "severity": "Low",
      "bad_example": "var s = \"\"; foreach (var x in items) s += x;",
      "good_example": "var sb = new StringBuilder(); foreach (var x in items) sb.Append(x); var s = sb.ToString();",
      "examples": [
        {
          "snippet": "s += part",
          "isCorrect": false
        },
        {
          "snippet": "sb.Append(part)",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "c2533af6-373c-4a19-944d-404154ed0801",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Optimize LINQ queries for database operations",
      "rule": "Ensure LINQ queries translate to SQL efficiently (avoid client evaluation, use projections, defer ToList until needed).",
      "why_is_this_important": "Prevents loading excess data and running logic client-side.",
      "severity": "High",
      "bad_example": "ctx.Users.ToList().Where(u => u.Active).Select(u => u.Name)",
      "good_example": "ctx.Users.Where(u => u.Active).Select(u => u.Name).ToListAsync()",
      "examples": [
        {
          "snippet": "ToList() then Where()",
          "isCorrect": false
        },
        {
          "snippet": "Where().Select().ToListAsync()",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "014b673b-1e52-4a79-a18d-e3eaa65b5223",
      "buckets": ["database-query-performance", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Replace magic numbers with named constants",
      "rule": "Extract numeric literals with meaning into named constants or readonly fields.",
      "why_is_this_important": "Improves readability and eases coordinated changes.",
      "severity": "Low",
      "bad_example": "Thread.Sleep(2000);",
      "good_example": "private const int RetryDelayMs = 2000;\nThread.Sleep(RetryDelayMs);",
      "examples": [
        {
          "snippet": "if (retries > 3) ...",
          "isCorrect": false
        },
        {
          "snippet": "const int MaxRetries = 3; if (retries > MaxRetries) ...",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "3487b1c0-03a7-4551-873f-17c4766eb462",
      "buckets": ["maintainability", "readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Fix file-to-class name mismatches",
      "rule": "Keep public types in files with matching names (one top-level type per file) to improve navigation.",
      "why_is_this_important": "Aids discoverability and reduces confusion for tooling and readers.",
      "severity": "Low",
      "bad_example": "// File: Utils.cs\npublic class Helper { }",
      "good_example": "// File: Helper.cs\npublic class Helper { }",
      "examples": [
        {
          "snippet": "File Foo.cs contains class Bar",
          "isCorrect": false
        },
        {
          "snippet": "File Bar.cs contains class Bar",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "28e6e872-74e1-4a59-a72b-376f804ee5d9",
      "buckets": ["maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Add database indexes for query optimization",
      "rule": "Index frequently filtered or joined columns and verify with query plans.",
      "why_is_this_important": "Proper indexing drastically improves query performance and reduces timeouts.",
      "severity": "High",
      "bad_example": "// No index on Email; queries scan entire table",
      "good_example": "// Migration: CreateIndex(\"Users\", \"Email\", unique: true);",
      "examples": [
        {
          "snippet": "WHERE Email = @p0 (no index)",
          "isCorrect": false
        },
        {
          "snippet": "CREATE INDEX IX_Users_Email ON Users(Email)",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "d10108d7-438a-4d61-9530-1fe837767929",
      "buckets": ["database-query-performance", "performance-efficiency"],
      "scope": "pull-request"
    },
    {
      "title": "Optimize string column types",
      "rule": "Use appropriate column types/lengths (e.g., NVARCHAR(128) vs NVARCHAR(MAX)) for fields with known bounds.",
      "why_is_this_important": "Smaller types improve storage, index efficiency, and query speed.",
      "severity": "Medium",
      "bad_example": "NVARCHAR(MAX) for code/slug fields",
      "good_example": "NVARCHAR(64) for slugs; NVARCHAR(256) for titles",
      "examples": [
        {
          "snippet": "nvarchar(max) on short codes",
          "isCorrect": false
        },
        {
          "snippet": "nvarchar(64) for short codes",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "a4be5578-1fb5-4a34-a6fe-90b11000f793",
      "buckets": ["database-query-performance", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Avoid empty catch blocks",
      "rule": "Never swallow exceptions silently; log with context and either rethrow or handle explicitly.",
      "why_is_this_important": "Silent failures are hard to diagnose and can corrupt state.",
      "severity": "High",
      "bad_example": "try { DoWork(); } catch { }",
      "good_example": "try { DoWork(); } catch (Exception ex) { _log.LogError(ex, \"DoWork failed\"); throw; }",
      "examples": [
        {
          "snippet": "catch { }",
          "isCorrect": false
        },
        {
          "snippet": "catch(Exception e){ _log.LogError(e, \"context\"); throw; }",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "f5b1f1e6-9267-4b67-be23-845eaed1c721",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Check query results before accessing indices",
      "rule": "Validate collection bounds and query results before indexing; prefer FirstOrDefault/SingleOrDefault with null checks.",
      "why_is_this_important": "Prevents IndexOutOfRangeException and null dereferences.",
      "severity": "Medium",
      "bad_example": "var first = rows[0];",
      "good_example": "var first = rows.FirstOrDefault(); if (first is null) return NotFound();",
      "examples": [
        {
          "snippet": "var x = list[0];",
          "isCorrect": false
        },
        {
          "snippet": "var x = list.FirstOrDefault(); if(x==null) return;",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "6e176f9f-07a2-4ac6-b95b-f0066dcc71f7",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Handle transaction rollbacks properly",
      "rule": "Wrap multi-step writes in a transaction; on failure, roll back and rethrow with context.",
      "why_is_this_important": "Maintains data consistency under partial failures.",
      "severity": "High",
      "bad_example": "await ctx.SaveChangesAsync(); // multiple SaveChanges without transaction",
      "good_example": "await using var tx = await ctx.Database.BeginTransactionAsync();\n// ... multiple updates ...\nawait ctx.SaveChangesAsync();\nawait tx.CommitAsync();",
      "examples": [
        {
          "snippet": "SaveChanges called multiple times w/o transaction",
          "isCorrect": false
        },
        {
          "snippet": "BeginTransaction/Commit with one SaveChanges",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "8790499f-a4aa-4607-8134-919c8b2649a9",
      "buckets": ["database-query-performance", "error-handling"],
      "scope": "file"
    },
    {
      "title": "Separate UI logic from business logic",
      "rule": "Keep UI/controllers thin; move domain logic to services or domain objects.",
      "why_is_this_important": "Improves testability, reuse, and separation of concerns.",
      "severity": "High",
      "bad_example": "public IActionResult Post(){ /* validate, compute totals, call db, send email */ }",
      "good_example": "public IActionResult Post(){ var result = _orderService.Create(request); return Ok(result); }",
      "examples": [
        {
          "snippet": "Controller does all domain work",
          "isCorrect": false
        },
        {
          "snippet": "Controller delegates to service",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "e5061fd4-e4be-4faa-bc77-1c356c482ff6",
      "buckets": ["module-architecture", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Use dependency injection over direct instantiation",
      "rule": "Request dependencies via constructors and register them with the DI container; avoid new-ing services in code.",
      "why_is_this_important": "Enables testing, configuration, and lifecycle management.",
      "severity": "High",
      "bad_example": "var svc = new PaymentService();",
      "good_example": "public OrdersController(IPaymentService payments){ _payments = payments; }",
      "examples": [
        {
          "snippet": "var repo = new Repo()",
          "isCorrect": false
        },
        {
          "snippet": "public Controller(IRepo repo)",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "338e89e8-0ec3-412c-b891-8ae153f7bcd2",
      "buckets": ["module-architecture"],
      "scope": "file"
    },
    {
      "title": "Return DTOs instead of domain entities",
      "rule": "Expose DTOs/ViewModels from API endpoints; avoid leaking persistence/domain entities directly.",
      "why_is_this_important": "Encapsulates internals and stabilizes public contracts.",
      "severity": "Medium",
      "bad_example": "return Ok(orderEntity);",
      "good_example": "return Ok(new OrderDto { Id = e.Id, Total = e.Total, Items = MapItems(e.Items) });",
      "examples": [
        {
          "snippet": "return entity;",
          "isCorrect": false
        },
        {
          "snippet": "return dto;",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "e4b3cc99-bff3-49c4-912e-af429ad528bb",
      "buckets": ["api-conventions", "module-architecture", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Use appropriate HTTP status codes",
      "rule": "Return 2xx on success, 4xx for client errors, and 5xx for server errors with minimal, non-sensitive bodies.",
      "why_is_this_important": "Correct semantics enable predictable client behavior and monitoring.",
      "severity": "High",
      "bad_example": "return Ok(new { error = \"failed\" });",
      "good_example": "return StatusCode(StatusCodes.Status500InternalServerError, new { error = \"internal_error\" });",
      "examples": [
        {
          "snippet": "return Ok(new { error=\"x\" })",
          "isCorrect": false
        },
        {
          "snippet": "return BadRequest(new { error=\"invalid\" })",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "b90718b9-4cca-4609-8430-9bc3914d0b4d",
      "buckets": ["api-conventions"],
      "scope": "file"
    },
    {
      "title": "Group related parameters in objects",
      "rule": "Replace long parameter lists with request objects or records; validate them as a unit.",
      "why_is_this_important": "Improves readability, evolution, and validation.",
      "severity": "Low",
      "bad_example": "Create(string name, string street, string city, string zip, string country)",
      "good_example": "Create(CreateCustomerRequest request)",
      "examples": [
        {
          "snippet": "Method(a,b,c,d,e)",
          "isCorrect": false
        },
        {
          "snippet": "Method(Request req)",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "3bef4fe0-2d54-4b83-9f63-5205f4102813",
      "buckets": ["api-conventions", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Use private access modifiers for encapsulation",
      "rule": "Prefer the most restrictive access modifier that works (private/internal) and expose only necessary members.",
      "why_is_this_important": "Reduces surface area and accidental coupling.",
      "severity": "Low",
      "bad_example": "public string _internalState;",
      "good_example": "private string _internalState;",
      "examples": [
        {
          "snippet": "public field for internal state",
          "isCorrect": false
        },
        {
          "snippet": "private field; public read-only property",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "35961a5f-2ea6-47f2-b67b-03506c09d2cb",
      "buckets": ["module-architecture", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Initialize properties with default values",
      "rule": "Set sensible defaults for properties/fields or enforce via constructors.",
      "why_is_this_important": "Prevents null/invalid states and clarifies invariants.",
      "severity": "Low",
      "bad_example": "public string Status { get; set; } // never set",
      "good_example": "public string Status { get; set; } = \"Pending\";",
      "examples": [
        {
          "snippet": "string Name {get;set;}",
          "isCorrect": false
        },
        {
          "snippet": "string Name {get;set;} = string.Empty;",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "f2b11fc7-3287-41a5-917b-f69ed8df5938",
      "buckets": ["error-handling", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Remove unreachable code",
      "rule": "Delete dead code and after-return/throw statements that never execute.",
      "why_is_this_important": "Reduces noise and avoids misleading readers and analyzers.",
      "severity": "Low",
      "bad_example": "return x; Console.WriteLine(\"after return\");",
      "good_example": "return x; // removed unreachable line",
      "examples": [
        {
          "snippet": "throw e; DoMore();",
          "isCorrect": false
        },
        {
          "snippet": "throw e; // no more code",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "9dd1783c-5616-4572-892b-da67d1b853b3",
      "buckets": ["maintainability"],
      "scope": "file"
    },
    {
      "title": "Use using statements for disposable resources",
      "rule": "Wrap IDisposable resources in using/await using to ensure deterministic disposal.",
      "why_is_this_important": "Prevents leaks of streams, handles, and sockets.",
      "severity": "High",
      "bad_example": "var stream = File.OpenRead(path); // no dispose",
      "good_example": "using var stream = File.OpenRead(path); // use stream",
      "examples": [
        {
          "snippet": "new FileStream(...)",
          "isCorrect": false
        },
        {
          "snippet": "using var fs = new FileStream(...)",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "a98f0466-7d44-4157-8642-e9cd8c372212",
      "buckets": ["performance-efficiency", "ui-robustness"],
      "scope": "file"
    },
    {
      "title": "Use IReadOnlyList for immutable collections",
      "rule": "Expose read-only views (IReadOnlyList/IReadOnlyCollection) from APIs that should not allow mutation.",
      "why_is_this_important": "Encodes intent and prevents accidental modifications.",
      "severity": "Low",
      "bad_example": "public List<Item> Items { get; }",
      "good_example": "public IReadOnlyList<Item> Items { get; }",
      "examples": [
        {
          "snippet": "List<T> exposed publicly",
          "isCorrect": false
        },
        {
          "snippet": "IReadOnlyList<T> exposed",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "16400562-1797-4cb3-ac7a-7f9c24ec974d",
      "buckets": ["api-conventions", "module-architecture"],
      "scope": "file"
    },
    {
      "title": "Remove redundant LINQ calls",
      "rule": "Avoid unnecessary AsQueryable/ToList/Where/Select chains that do nothing; keep pipelines minimal.",
      "why_is_this_important": "Reduces allocations and clarifies intent.",
      "severity": "Low",
      "bad_example": "ctx.Users.AsQueryable().Where(u => true).Select(u => u)",
      "good_example": "ctx.Users",
      "examples": [
        {
          "snippet": "items.Select(x=>x).ToList()",
          "isCorrect": false
        },
        {
          "snippet": "items.ToList()",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "195120fb-22ba-45d1-9a84-5b617dbaf53d",
      "buckets": ["performance-efficiency", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Implement proper database error checking",
      "rule": "Detect transient vs non-transient DB errors; add context and apply retry policies only where safe (idempotent reads/operations).",
      "why_is_this_important": "Enables safe retries, correct surfacing of validation/constraint failures, and better diagnostics.",
      "severity": "High",
      "bad_example": "catch (DbUpdateException ex) { /* ignore or generic */ }",
      "good_example": "catch (DbUpdateException ex) {\n    _log.LogError(ex, \"DB update failed\");\n    if (IsUniqueConstraintViolation(ex)) return Conflict();\n    throw;\n}",
      "examples": [
        {
          "snippet": "catch(DbUpdateException){ /* swallow */ }",
          "isCorrect": false
        },
        {
          "snippet": "catch(DbUpdateException e){ if(IsUnique(e)) return Conflict(); throw; }",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "53ec2478-c0b5-4d2e-8d92-50474ece5939",
      "buckets": [
        "database-query-performance",
        "error-handling",
        "resilience-retries-idempotency"
      ],
      "scope": "file"
    },
    {
      "title": "Use enum constants instead of hardcoded values",
      "rule": "When a value comes from a finite set, model it as an enum constant instead of string/int literals.",
      "why_is_this_important": "Enums provide type safety, discoverability, and avoid typos and drift.",
      "severity": "Medium",
      "bad_example": "if (status.equals(\"APPROVED\")) { /* ... */ }",
      "good_example": "enum Status { PENDING, APPROVED, REJECTED }\nif (status == Status.APPROVED) { /* ... */ }",
      "examples": [
        {
          "snippet": "if (role.equals(\"admin\")) {}",
          "isCorrect": false
        },
        {
          "snippet": "if (role == Role.ADMIN) {}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "15f6fcb1-664b-4ba4-8aa1-4381bf1c5c2d",
      "buckets": ["maintainability", "readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Add comprehensive null checks for parameters",
      "rule": "Validate method inputs up front with null checks or use Objects.requireNonNull and meaningful messages.",
      "why_is_this_important": "Prevents NullPointerException, documents preconditions, and fails fast near the source.",
      "severity": "High",
      "bad_example": "String cityLower = city.toLowerCase();",
      "good_example": "Objects.requireNonNull(city, \"city required\");\nString cityLower = city.toLowerCase();",
      "examples": [
        {
          "snippet": "user.getAddress().getCity().toLowerCase()",
          "isCorrect": false
        },
        {
          "snippet": "String city = Optional.ofNullable(user)\n    .map(User::getAddress).map(Address::getCity)\n    .orElse(\"unknown\");",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "77cb6320-81dd-440f-a013-a04d086f9f0f",
      "buckets": ["error-handling", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Replace printStackTrace with proper logging",
      "rule": "Do not use printStackTrace/System.err; log via a structured logger with context and level.",
      "why_is_this_important": "Structured logs are routable, parsable, and support levels/contexts for observability.",
      "severity": "High",
      "bad_example": "catch (Exception e) { e.printStackTrace(); }",
      "good_example": "catch (Exception e) { logger.error(\"Payment failed id={}\", paymentId, e); }",
      "examples": [
        {
          "snippet": "e.printStackTrace()",
          "isCorrect": false
        },
        {
          "snippet": "logger.warn(\"op failed\", e)",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "e59d5c2b-ad04-4a49-b70c-b300299a3a8f",
      "buckets": ["observability-logging"],
      "scope": "file"
    },
    {
      "title": "Propagate exceptions instead of hiding failures",
      "rule": "Never swallow exceptions silently; wrap with context and rethrow or translate to a domain exception.",
      "why_is_this_important": "Hidden failures corrupt state and break retries/alerts.",
      "severity": "High",
      "bad_example": "try { doWork(); } catch (IOException e) { /* ignore */ }",
      "good_example": "try { doWork(); } catch (IOException e) { throw new UncheckedIOException(\"doWork failed\", e); }",
      "examples": [
        {
          "snippet": "catch(Exception e){}",
          "isCorrect": false
        },
        {
          "snippet": "catch(Exception e){ throw new RuntimeException(\"context\", e); }",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "4366bee5-1e22-4852-8568-f85d307bff40",
      "buckets": ["error-handling", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Add try-catch blocks for external service calls",
      "rule": "Wrap network/filesystem/process calls; check status codes/results and add context to failures.",
      "why_is_this_important": "External dependencies are unreliable; explicit handling makes issues observable and recoverable.",
      "severity": "High",
      "bad_example": "String body = client.send(request, BodyHandlers.ofString()).body();",
      "good_example": "try {\n  HttpResponse<String> resp = client.send(request, BodyHandlers.ofString());\n  if (resp.statusCode() >= 400) throw new IOException(\"HTTP \" + resp.statusCode());\n} catch (IOException | InterruptedException e) {\n  logger.error(\"fetch failed url={}\", url, e);\n  throw new RuntimeException(\"external call failed\", e);\n}",
      "examples": [
        {
          "snippet": "Files.readString(path)",
          "isCorrect": false
        },
        {
          "snippet": "try { Files.readString(path); } catch (IOException e) { /* log+wrap */ }",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "ab41b08f-7e8e-4575-b5d4-56aaa238edca",
      "buckets": ["error-handling", "resilience-retries-idempotency"],
      "scope": "file"
    },
    {
      "title": "Use try-with-resources for resource management",
      "rule": "Use try-with-resources for Closeable/AutoCloseable objects to guarantee deterministic cleanup.",
      "why_is_this_important": "Prevents resource leaks of streams/sockets and simplifies finally blocks.",
      "severity": "High",
      "bad_example": "BufferedReader br = new BufferedReader(new FileReader(p));\nString s = br.readLine(); // no close",
      "good_example": "try (BufferedReader br = new BufferedReader(new FileReader(p))) {\n  String s = br.readLine();\n}",
      "examples": [
        {
          "snippet": "new FileInputStream(p)",
          "isCorrect": false
        },
        {
          "snippet": "try (InputStream in = new FileInputStream(p)) { /* ... */ }",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "01a66d9a-647e-4719-a795-23fef4538128",
      "buckets": ["performance-efficiency", "ui-robustness"],
      "scope": "file"
    },
    {
      "title": "Return explicit HTTP responses from API methods",
      "rule": "API endpoints should return an explicit status code and minimal error body on failures; avoid 200 with error payload.",
      "why_is_this_important": "Correct semantics enable predictable client handling and monitoring.",
      "severity": "High",
      "bad_example": "return ok(new ErrorPayload(\"failed\")); // 200 with error",
      "good_example": "return httpResponse(500, Map.of(\"error\", \"internal_error\"));",
      "examples": [
        {
          "snippet": "return ok(Map.of(\"error\",\"x\"))",
          "isCorrect": false
        },
        {
          "snippet": "return response(400, Map.of(\"error\",\"invalid_request\"))",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "fd2196b3-fe4e-40d6-99a1-8b2726fab717",
      "buckets": ["api-conventions"],
      "scope": "file"
    },
    {
      "title": "Handle empty async/reactive results with appropriate responses",
      "rule": "When using Optional/CompletableFuture/Publisher-like types, map empty values to a clear outcome (e.g., 404) rather than returning null.",
      "why_is_this_important": "Avoids ambiguous nulls and clarifies API contracts.",
      "severity": "Medium",
      "bad_example": "Optional<User> u = repo.find(id); return u.orElse(null);",
      "good_example": "return repo.find(id).map(this::ok).orElseGet(() -> notFound());",
      "examples": [
        {
          "snippet": "future.thenApply(x -> null)",
          "isCorrect": false
        },
        {
          "snippet": "optional.map(this::ok).orElseGet(this::notFound)",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "b81feca4-932d-4bd3-9b34-9683ddc90bda",
      "buckets": ["api-conventions", "error-handling"],
      "scope": "file"
    },
    {
      "title": "Prefer dependency injection over manual factories",
      "rule": "Obtain collaborators via constructor injection (or a DI container) instead of new/service locators in business code.",
      "why_is_this_important": "Improves testability, configuration, and lifecycle management.",
      "severity": "High",
      "bad_example": "PaymentService svc = new PaymentService(new HttpClient());",
      "good_example": "class OrderHandler {\n  private final PaymentService payments;\n  OrderHandler(PaymentService payments) { this.payments = payments; }\n}",
      "examples": [
        {
          "snippet": "var repo = Factories.getRepo()",
          "isCorrect": false
        },
        {
          "snippet": "new Handler(Repo repo)",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "476a7ebd-43c2-49d5-a07e-6149efb6fefb",
      "buckets": ["module-architecture"],
      "scope": "file"
    },
    {
      "title": "Extract duplicated API call logic",
      "rule": "Factor repeated HTTP call setup/parsing/retry into a reusable helper or client.",
      "why_is_this_important": "Reduces copy-paste errors and centralizes cross-cutting concerns.",
      "severity": "Medium",
      "bad_example": "HttpRequest r1=...; client.send(r1,...);\nHttpRequest r2=...; client.send(r2,...);",
      "good_example": "ApiClient api = new ApiClient(client);\napi.get(\"/users\"); api.post(\"/orders\", body);",
      "examples": [
        {
          "snippet": "build request + send duplicated",
          "isCorrect": false
        },
        {
          "snippet": "client abstraction encapsulates calls",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "4f0f3b86-fbcc-41b1-95c1-acb035d48108",
      "buckets": ["duplication-complexity", "module-architecture"],
      "scope": "file"
    },
    {
      "title": "Consolidate multiple similar methods",
      "rule": "Merge near-duplicate methods into a single parameterized method or strategy.",
      "why_is_this_important": "Single source of truth reduces maintenance and bugs.",
      "severity": "Medium",
      "bad_example": "saveUserA(User u){...}\nsaveUserB(User u){...}",
      "good_example": "saveUser(User u, SaveMode mode){...}",
      "examples": [
        {
          "snippet": "calculateX(), calculateX2()",
          "isCorrect": false
        },
        {
          "snippet": "calculate(mode)",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "18eb3bb8-210d-4615-b2ee-fbe671ee3358",
      "buckets": ["duplication-complexity", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Extract business logic into separate methods",
      "rule": "Move complex domain calculations out of controllers/handlers into services or private helpers.",
      "why_is_this_important": "Improves cohesion, reuse, and test coverage.",
      "severity": "Medium",
      "bad_example": "public Response create(){ /* validate, compute, persist, notify */ }",
      "good_example": "public Response create(){ var order = service.create(cmd); return ok(order); }",
      "examples": [
        {
          "snippet": "controller does all work",
          "isCorrect": false
        },
        {
          "snippet": "controller delegates to service",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "75a57343-a45d-4901-8e67-9547eb22976a",
      "buckets": ["module-architecture", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Improve field encapsulation with private visibility",
      "rule": "Use private fields with accessors; expose the narrowest visibility that satisfies usage.",
      "why_is_this_important": "Reduces coupling and preserves invariants.",
      "severity": "Low",
      "bad_example": "public String internalState;",
      "good_example": "private String internalState; public String getInternalState(){ return internalState; }",
      "examples": [
        {
          "snippet": "public int x;",
          "isCorrect": false
        },
        {
          "snippet": "private int x;",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "5b9c1d88-f200-42a8-9904-cc3c736ed74c",
      "buckets": ["module-architecture", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Use specific types over overly generic ones",
      "rule": "Prefer precise types (long, BigDecimal, LocalDate) over Number/Object when the domain is known.",
      "why_is_this_important": "Improves type safety and prevents accidental misuse.",
      "severity": "Medium",
      "bad_example": "Number total;",
      "good_example": "BigDecimal total;",
      "examples": [
        {
          "snippet": "Object payload",
          "isCorrect": false
        },
        {
          "snippet": "Map<String, Object> -> record/DTO",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "3ff07ebf-f7b8-4351-997d-e322c719bc29",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Remove unused parameters and commented code",
      "rule": "Delete dead/commented code and unused params; rely on version control for history.",
      "why_is_this_important": "Reduces noise and confusion for maintainers and tools.",
      "severity": "Low",
      "bad_example": "void save(User u, boolean debug /* unused */) { /* ... */ }\n// old logic below ...",
      "good_example": "void save(User u) { /* ... */ }",
      "examples": [
        {
          "snippet": "// TODO remove later",
          "isCorrect": false
        },
        {
          "snippet": "clean method signature",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "79c0c0c7-3f18-49e5-9632-80ec18a91186",
      "buckets": ["maintainability"],
      "scope": "file"
    },
    {
      "title": "Use descriptive variable names",
      "rule": "Choose names that reflect intent; avoid abbreviations except widely accepted ones.",
      "why_is_this_important": "Improves readability and reduces misinterpretation.",
      "severity": "Low",
      "bad_example": "var m = calc(p);",
      "good_example": "var monthlyPayment = calc(principal);",
      "examples": [
        {
          "snippet": "int ct;",
          "isCorrect": false
        },
        {
          "snippet": "int count;",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "709df5f0-5d88-4cef-92f4-39d4291b7615",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Use String.replace for literal replacements",
      "rule": "Use String#replace for literal substrings instead of replaceAll unless regex is required.",
      "why_is_this_important": "Avoids regex overhead and escaping bugs.",
      "severity": "Low",
      "bad_example": "\"a.b\".replaceAll(\".\", \"-\")",
      "good_example": "\"a.b\".replace(\".\", \"-\")",
      "examples": [
        {
          "snippet": "s.replaceAll(\"foo\", \"bar\")",
          "isCorrect": false
        },
        {
          "snippet": "s.replace(\"foo\", \"bar\")",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "975e4b0e-d886-4d8c-a76d-13bda2217c0b",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Cache expensive object creations",
      "rule": "Hoist and reuse costly objects (Pattern, DateTimeFormatter) rather than re-creating per use.",
      "why_is_this_important": "Reduces CPU/GCs and improves throughput.",
      "severity": "Medium",
      "bad_example": "Pattern p = Pattern.compile(pattern);\nfor (var s: list) { p = Pattern.compile(pattern); p.matcher(s).find(); }",
      "good_example": "Pattern P = Pattern.compile(pattern);\nfor (var s: list) { P.matcher(s).find(); }",
      "examples": [
        {
          "snippet": "new DateTimeFormatterBuilder() in loop",
          "isCorrect": false
        },
        {
          "snippet": "static final Pattern P = Pattern.compile(...)",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "bbe25227-73d7-4bc7-b34f-6b452304d508",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Use static constants for inline collections",
      "rule": "Extract repeated inline collections to unmodifiable static constants.",
      "why_is_this_important": "Improves readability and prevents accidental mutation.",
      "severity": "Low",
      "bad_example": "if (Set.of(\"A\",\"B\",\"C\").contains(t)) { ... }",
      "good_example": "private static final Set<String> ALLOWED = Set.of(\"A\",\"B\",\"C\");\nif (ALLOWED.contains(t)) { ... }",
      "examples": [
        {
          "snippet": "List.of(\"x\",\"y\") scattered",
          "isCorrect": false
        },
        {
          "snippet": "static final List<String> KEYS = List.of(\"x\",\"y\")",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "98e5e51a-5d6b-476d-915d-e11c3d61d8d8",
      "buckets": ["duplication-complexity", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Optimize database queries with proper indexing",
      "rule": "Index columns used in JOIN/WHERE/ORDER BY; verify plans and avoid full scans for hot queries.",
      "why_is_this_important": "Indexes drastically reduce query latency and lock contention.",
      "severity": "High",
      "bad_example": "-- filtering by email with no index\nSELECT * FROM users WHERE email = ?;",
      "good_example": "CREATE INDEX ix_users_email ON users(email);\nSELECT id FROM users WHERE email = ?;",
      "examples": [
        {
          "snippet": "WHERE email=? on unindexed col",
          "isCorrect": false
        },
        {
          "snippet": "CREATE INDEX ...",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "976a514f-29fe-458e-a8b1-65d4241938b4",
      "buckets": ["database-query-performance"],
      "scope": "file"
    },
    {
      "title": "Use early return patterns for control flow",
      "rule": "Validate and return early to reduce nesting and improve readability.",
      "why_is_this_important": "Flatter code is easier to reason about and maintain.",
      "severity": "Low",
      "bad_example": "if (req != null) { if (req.isValid()) { process(req); } }",
      "good_example": "if (req == null || !req.isValid()) return error(\"invalid\");\nprocess(req);",
      "examples": [
        {
          "snippet": "deeply nested ifs",
          "isCorrect": false
        },
        {
          "snippet": "guard clauses then main path",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "e82a6622-07d3-40f2-b33e-5512ec34f683",
      "buckets": ["readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Optimize stream operations",
      "rule": "Combine filters/maps to minimize passes; avoid creating intermediate collections unnecessarily.",
      "why_is_this_important": "Fewer passes reduce allocations and CPU.",
      "severity": "Medium",
      "bad_example": "var out = xs.stream().filter(p).map(f).filter(q).collect(toList());",
      "good_example": "var out = xs.stream().reduce(new ArrayList<R>(), (acc,x) -> {\n  if(!p.test(x)) return acc; var y = f.apply(x); if(q.test(y)) acc.add(y); return acc;\n}, (a,b) -> { a.addAll(b); return a; });",
      "examples": [
        {
          "snippet": "list.stream().map(...).collect(toList()).stream()",
          "isCorrect": false
        },
        {
          "snippet": "single pipeline; defer collect",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "078108c8-9a45-4bb5-8248-ea8382d7d728",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Remove redundant condition checks in loops",
      "rule": "Avoid re-checking loop-invariant conditions inside iterations; lift them out.",
      "why_is_this_important": "Reduces unnecessary work and clarifies intent.",
      "severity": "Low",
      "bad_example": "for (Item i: items) { if (threshold > 0) { /* heavy */ } }",
      "good_example": "if (threshold > 0) {\n  for (Item i: items) { /* heavy */ }\n}",
      "examples": [
        {
          "snippet": "if(flag) inside loop",
          "isCorrect": false
        },
        {
          "snippet": "if(flag) { loop }",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "5ea889ca-2af4-4436-bc4c-be3bf9127dd2",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Extract query strings to constants",
      "rule": "Define SQL strings as static final constants or in a repository, not inline across methods.",
      "why_is_this_important": "Eases maintenance, reuse, and prevents typos.",
      "severity": "Low",
      "bad_example": "conn.prepareStatement(\"SELECT * FROM orders WHERE id=?\");",
      "good_example": "private static final String SQL_GET_ORDER = \"SELECT * FROM orders WHERE id=?\";\nconn.prepareStatement(SQL_GET_ORDER);",
      "examples": [
        {
          "snippet": "\"UPDATE t SET...\" scattered",
          "isCorrect": false
        },
        {
          "snippet": "static final String SQL = \"UPDATE t SET...\";",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "66feeaf4-cdb2-460e-accc-2f42eb26170a",
      "buckets": ["duplication-complexity", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Use named constants for magic values",
      "rule": "Replace numeric/string literals with named constants to document meaning.",
      "why_is_this_important": "Improves readability and centralizes changes.",
      "severity": "Low",
      "bad_example": "Thread.sleep(2000);",
      "good_example": "private static final int RETRY_DELAY_MS = 2000;\nThread.sleep(RETRY_DELAY_MS);",
      "examples": [
        {
          "snippet": "if (retries > 3)",
          "isCorrect": false
        },
        {
          "snippet": "if (retries > MAX_RETRIES)",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "519e33f2-e2e5-47ac-9edc-53ce49b6ae40",
      "buckets": ["maintainability", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Add input validation for API parameters",
      "rule": "Validate presence, format, and ranges for incoming parameters before processing.",
      "why_is_this_important": "Prevents invalid operations and provides clear feedback to clients.",
      "severity": "High",
      "bad_example": "process(amount, taxId);",
      "good_example": "if (amount == null || amount.signum() <= 0) return badRequest(\"amount>0 required\");\nif (!isValidTaxId(taxId)) return badRequest(\"invalid taxId\");",
      "examples": [
        {
          "snippet": "Long.parseLong(q.get(\"n\")) // no checks",
          "isCorrect": false
        },
        {
          "snippet": "if(!NUMBER.matcher(n).matches()) return badRequest()",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "0808fbb8-513a-456a-a4e7-0d4eb04eb24c",
      "buckets": ["api-conventions", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Validate parameter types before casting",
      "rule": "Use instanceof/pattern matching and guard before casts; avoid ClassCastException.",
      "why_is_this_important": "Ensures safe handling of heterogeneous data.",
      "severity": "Medium",
      "bad_example": "Map m = (Map) obj; String v = (String) m.get(\"v\");",
      "good_example": "if (obj instanceof Map<?,?> m) { Object v = m.get(\"v\"); if (v instanceof String s) { /* use s */ } }",
      "examples": [
        {
          "snippet": "(List<String>) obj",
          "isCorrect": false
        },
        {
          "snippet": "if (obj instanceof List<?> list) { /* ... */ }",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "4e8f0001-0e89-4cac-a93a-bfa9bfe03e84",
      "buckets": ["error-handling", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Add proper error handling for date parsing",
      "rule": "Parse dates with DateTimeFormatter in try/catch and validate expected formats/timezones.",
      "why_is_this_important": "Input dates are error-prone; explicit handling prevents runtime crashes.",
      "severity": "Medium",
      "bad_example": "LocalDate.parse(s);",
      "good_example": "try {\n  var d = LocalDate.parse(s, DateTimeFormatter.ISO_LOCAL_DATE);\n} catch (DateTimeParseException e) {\n  return badRequest(\"invalid date\");\n}",
      "examples": [
        {
          "snippet": "ZonedDateTime.parse(s)",
          "isCorrect": false
        },
        {
          "snippet": "try { parse } catch(DateTimeParseException e) { /* handle */ }",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "133e5d26-cc8b-42ae-ae30-124757f1009a",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Handle asynchronous operation failures",
      "rule": "Attach exceptionally/handle to CompletableFuture chains; never assume success.",
      "why_is_this_important": "Ensures failures are observed and mapped to consistent outcomes.",
      "severity": "High",
      "bad_example": "CompletableFuture<String> f = fetch(); return f.join();",
      "good_example": "return fetch()\n  .thenApply(this::ok)\n  .exceptionally(e -> error(\"fetch failed\"));",
      "examples": [
        {
          "snippet": "future.thenApply(...); // no error path",
          "isCorrect": false
        },
        {
          "snippet": "future.handle((v,e) -> e==null?ok(v):error())",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "552c5140-3162-442a-a9cc-7784198d15c1",
      "buckets": ["concurrency-safety", "error-handling"],
      "scope": "file"
    },
    {
      "title": "Use non-blocking patterns for async operations",
      "rule": "Prefer thenCompose/thenCombine over blocking get/join; propagate async results end-to-end.",
      "why_is_this_important": "Avoids thread starvation and improves scalability.",
      "severity": "High",
      "bad_example": "var data = fetch().get(); // blocks",
      "good_example": "return fetch().thenCompose(this::enrich).thenApply(this::ok);",
      "examples": [
        {
          "snippet": "future.get()",
          "isCorrect": false
        },
        {
          "snippet": "future.thenCompose(f)",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "c606210c-8611-4b48-8ce4-e0f40fe43d54",
      "buckets": ["concurrency-safety", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Review long transaction/query timeouts",
      "rule": "Set sensible timeouts for queries/transactions and avoid excessively long timeouts that mask problems.",
      "why_is_this_important": "Prevents hung resources and surfaces backpressure quickly.",
      "severity": "Medium",
      "bad_example": "stmt.setQueryTimeout(0); // infinite",
      "good_example": "stmt.setQueryTimeout(30); // seconds",
      "examples": [
        {
          "snippet": "no timeout set",
          "isCorrect": false
        },
        {
          "snippet": "setQueryTimeout(30)",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "c224e8b0-b017-43fd-b6c3-1d746478ff5b",
      "buckets": ["database-query-performance", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Clarify persistence/serialization with annotations",
      "rule": "Annotate fields/props to explicitly control persistence and serialization (e.g., transient/ignored fields).",
      "why_is_this_important": "Prevents leaking internal fields and clarifies storage behavior.",
      "severity": "Low",
      "bad_example": "private String internalCache; // no metadata",
      "good_example": "private transient String internalCache; // not persisted/serialized",
      "examples": [
        {
          "snippet": "internal fields serialized by default",
          "isCorrect": false
        },
        {
          "snippet": "mark cache fields transient",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "03541465-32b1-49c1-9c6b-8a36f998d4eb",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "title": "Move expensive operations outside loops",
      "rule": "Lift loop-invariant computations (regex, formatters, lookups) out of loops and reuse.",
      "why_is_this_important": "Reduces repeated work and allocations.",
      "severity": "Medium",
      "bad_example": "for (var s: lines) { DateTimeFormatter f = DateTimeFormatter.ISO_INSTANT; f.parse(s); }",
      "good_example": "DateTimeFormatter F = DateTimeFormatter.ISO_INSTANT;\nfor (var s: lines) { F.parse(s); }",
      "examples": [
        {
          "snippet": "new Pattern(...) each iteration",
          "isCorrect": false
        },
        {
          "snippet": "precompute and reuse",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "7a3a73a5-4ae6-49d0-a635-a98b10fe1b5a",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Add error handling for file operations",
      "rule": "Wrap file reads/writes (e.g., file_get_contents, file_put_contents, fopen) with checks and exceptions; never assume the filesystem is available.",
      "why_is_this_important": "Filesystem calls can fail due to permissions, missing files, or I/O errors. Explicit handling prevents silent data loss and cryptic warnings.",
      "severity": "High",
      "bad_example": "$json = file_get_contents($path);\n$data = json_decode($json, true); // no checks",
      "good_example": "if (!is_readable($path)) {\n    throw new RuntimeException(\"File not readable: {$path}\");\n}\n$content = file_get_contents($path);\nif ($content === false) {\n    throw new RuntimeException(\"Failed to read file: {$path}\");\n}",
      "examples": [
        {
          "snippet": "$data = json_decode(file_get_contents($p), true);",
          "isCorrect": false
        },
        {
          "snippet": "$c = file_get_contents($p); if($c===false) throw new RuntimeException('read fail');",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "473e7015-5655-4600-9355-24255d6e4654",
      "buckets": ["error-handling", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Handle JSON encoding and decoding failures",
      "rule": "Use JSON_THROW_ON_ERROR (PHP ≥7.3) and wrap json_encode/json_decode in try/catch; validate the decoded shape.",
      "why_is_this_important": "Malformed payloads and encoding issues are common. Exceptions make failures explicit and prevent using partial/invalid data.",
      "severity": "High",
      "bad_example": "$data = json_decode($json, true); // ignores errors",
      "good_example": "try {\n    $data = json_decode($json, true, 512, JSON_THROW_ON_ERROR);\n} catch (JsonException $e) {\n    throw new RuntimeException('Invalid JSON payload', 0, $e);\n}",
      "examples": [
        {
          "snippet": "json_decode($json, true)",
          "isCorrect": false
        },
        {
          "snippet": "json_decode($json, true, 512, JSON_THROW_ON_ERROR)",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "a2e7a725-c776-48e2-91a4-aa7910d00a93",
      "buckets": ["error-handling", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Add validation for HTTP responses",
      "rule": "Check transport errors and HTTP status codes before parsing response bodies; treat 4xx/5xx as errors with context.",
      "why_is_this_important": "Parsing or trusting error pages as data leads to misleading behavior and crashes.",
      "severity": "High",
      "bad_example": "$body = file_get_contents($url);\n$data = json_decode($body, true);",
      "good_example": "$ch = curl_init($url);\ncurl_setopt_array($ch, [CURLOPT_RETURNTRANSFER=>true, CURLOPT_TIMEOUT=>10]);\n$body = curl_exec($ch);\n$err  = curl_error($ch);\n$code = (int)curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);\nif ($err || $code >= 400) {\n    throw new RuntimeException(\"HTTP {$code} error: {$err}\");\n}",
      "examples": [
        {
          "snippet": "$data = json_decode(file_get_contents($u), true);",
          "isCorrect": false
        },
        {
          "snippet": "if($code>=400) throw new RuntimeException('bad status')",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "0ef5af8f-f5df-4b74-a85f-ff5ee9bf39ae",
      "buckets": ["api-conventions", "error-handling", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Validate array keys before accessing",
      "rule": "Use isset()/array_key_exists() or null coalescing (??) before reading array keys that may be absent.",
      "why_is_this_important": "Prevents undefined index notices and documents expected defaults.",
      "severity": "High",
      "bad_example": "$city = $payload['user']['address']['city'];",
      "good_example": "$city = $payload['user']['address']['city'] ?? 'unknown';",
      "examples": [
        {
          "snippet": "$v = $a['k'];",
          "isCorrect": false
        },
        {
          "snippet": "$v = $a['k'] ?? null;",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "4d3255c6-383e-4b29-a619-d34ceaa70b2d",
      "buckets": ["error-handling", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Add default cases to match expressions",
      "rule": "Every match expression must define a default arm that handles unsupported or unexpected values.",
      "why_is_this_important": "Prevents UnhandledMatchError and makes behavior explicit for future enum/constant additions.",
      "severity": "Medium",
      "bad_example": "$out = match($type) { 'a' => 1, 'b' => 2 };",
      "good_example": "$out = match($type) {\n    'a' => 1,\n    'b' => 2,\n    default => throw new InvalidArgumentException(\"Unsupported type: {$type}\")\n};",
      "examples": [
        {
          "snippet": "match($x){ 'a'=>1 }",
          "isCorrect": false
        },
        {
          "snippet": "match($x){ 'a'=>1, default=>0 }",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "0ff91457-17bb-4143-8909-f6a0f99f45fb",
      "buckets": ["error-handling", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Use try-catch blocks in batch processing",
      "rule": "Wrap per-item work in try/catch, collect failures, and continue when appropriate; never let one failure abort the entire batch by default.",
      "why_is_this_important": "Improves resilience and observability of partial failures.",
      "severity": "High",
      "bad_example": "foreach ($items as $i) { process($i); } // first exception stops the loop",
      "good_example": "$errors=[]; foreach ($items as $i) {\n    try { process($i); } catch (Throwable $e) {\n        $errors[] = ['item'=>$i,'error'=>$e->getMessage()];\n        // optionally continue\n    }\n}\nif ($errors) { $logger->error('batch errors', ['errors'=>$errors]); }",
      "examples": [
        {
          "snippet": "foreach($xs as $x){ process($x); }",
          "isCorrect": false
        },
        {
          "snippet": "try{ process($x) }catch(Throwable $e){ /* log */ }",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "d382a3a5-818d-4340-afd9-8327eabb74e9",
      "buckets": [
        "error-handling",
        "resilience-retries-idempotency",
        "stack-php"
      ],
      "scope": "file"
    },
    {
      "title": "Handle database transaction failures",
      "rule": "Use transactions for multi-step writes; on Throwable, rollback and rethrow with context.",
      "why_is_this_important": "Prevents partial writes and keeps data consistent under failures.",
      "severity": "High",
      "bad_example": "$pdo->exec('INSERT ...'); $pdo->exec('UPDATE ...'); // no transaction",
      "good_example": "try {\n    $pdo->beginTransaction();\n    // ... multiple statements ...\n    $pdo->commit();\n} catch (Throwable $e) {\n    if ($pdo->inTransaction()) { $pdo->rollBack(); }\n    throw new RuntimeException('DB transaction failed', 0, $e);\n}",
      "examples": [
        {
          "snippet": "$pdo->exec('A'); $pdo->exec('B');",
          "isCorrect": false
        },
        {
          "snippet": "$pdo->beginTransaction(); /*...*/ $pdo->commit();",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "fe168cc8-e6ea-4553-9af9-aefe62918c15",
      "buckets": ["database-query-performance", "error-handling", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Throw exceptions on job failures",
      "rule": "Background jobs must throw on irrecoverable failures (after logging) so the runner/queue can retry or dead-letter appropriately.",
      "why_is_this_important": "Swallowed errors make queues appear healthy while losing work.",
      "severity": "High",
      "bad_example": "try { handleJob($job); } catch (Throwable $e) { $logger->error($e->getMessage()); /* swallow */ }",
      "good_example": "try { handleJob($job); } catch (Throwable $e) {\n    $logger->error('job failed', ['jobId'=>$job->id, 'e'=>$e]);\n    throw $e; // trigger retry/DLQ\n}",
      "examples": [
        {
          "snippet": "catch(Throwable $e){ /* log only */ }",
          "isCorrect": false
        },
        {
          "snippet": "catch(Throwable $e){ $logger->error(...); throw $e; }",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "1c4e0066-6fb1-41b0-a3aa-5566808c1aab",
      "buckets": ["error-handling", "observability-logging", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Extract duplicated business logic",
      "rule": "Move repeated domain calculations/transformations into named functions or service classes; keep controllers/scripts thin.",
      "why_is_this_important": "Single source of truth reduces bugs and improves testability.",
      "severity": "Medium",
      "bad_example": "$total += $item['price'] * $item['qty']; // repeated in multiple files",
      "good_example": "function lineTotal(array $i): float { return $i['price'] * $i['qty']; }\n$total = array_sum(array_map('lineTotal', $items));",
      "examples": [
        {
          "snippet": "$a['p']*$a['q']",
          "isCorrect": false
        },
        {
          "snippet": "function lineTotal($i){ return $i['p']*$i['q']; }",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "d4484d93-287e-45bc-a18f-be75731794e9",
      "buckets": ["duplication-complexity", "module-architecture", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Centralize configuration constants",
      "rule": "Define configuration values in one place (env/config file/const class) and reference them; avoid scattering magic strings.",
      "why_is_this_important": "Prevents drift and simplifies environment-specific changes.",
      "severity": "Medium",
      "bad_example": "$url = 'https://api.example.com/v1'; // elsewhere uses another string",
      "good_example": "final class Config { public const API_BASE = 'https://api.example.com/v1'; }\n$url = Config::API_BASE;",
      "examples": [
        {
          "snippet": "$timeout = 30; // repeated",
          "isCorrect": false
        },
        {
          "snippet": "Config::TIMEOUT_SECONDS",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "714af154-3ae6-409d-9d0a-b3edb21d59c4",
      "buckets": ["maintainability", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Consolidate duplicated query logic",
      "rule": "Extract reusable SQL fragments/builders for commonly repeated WHERE/ORDER clauses.",
      "why_is_this_important": "Keeps filters consistent and reduces errors when changing criteria.",
      "severity": "Medium",
      "bad_example": "$sql = 'SELECT * FROM orders WHERE status = ? AND created_at >= ?'; // copy-pasted",
      "good_example": "function buildOrderFilterSql(): string { return 'status = ? AND created_at >= ?'; }\n$sql = 'SELECT * FROM orders WHERE '.buildOrderFilterSql();",
      "examples": [
        {
          "snippet": "duplicate WHERE ... in files",
          "isCorrect": false
        },
        {
          "snippet": "buildFilterSql()",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "30380f30-72c5-49ec-9c7b-19c925573589",
      "buckets": [
        "database-query-performance",
        "duplication-complexity",
        "stack-php"
      ],
      "scope": "file"
    },
    {
      "title": "Optimize queries with eager loading (avoid N+1)",
      "rule": "Replace per-row lookups with JOINs or bulk queries to fetch related data in fewer round-trips.",
      "why_is_this_important": "N+1 patterns explode latency and DB load under scale.",
      "severity": "High",
      "bad_example": "$orders = $pdo->query('SELECT * FROM orders')->fetchAll();\nforeach ($orders as $o) { $c = $pdo->query('SELECT * FROM customers WHERE id='.(int)$o['customer_id'])->fetch(); }",
      "good_example": "$stmt = $pdo->query('SELECT o.*, c.name AS customer_name FROM orders o JOIN customers c ON c.id = o.customer_id');\n$rows = $stmt->fetchAll(PDO::FETCH_ASSOC);",
      "examples": [
        {
          "snippet": "foreach($rows as $r){ query related }",
          "isCorrect": false
        },
        {
          "snippet": "SELECT ... JOIN ...",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "bca91932-d946-4c05-a66f-47fedd5dd356",
      "buckets": ["database-query-performance", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Use lazy loading/streaming for large datasets",
      "rule": "Stream results (cursor/generator) or paginate instead of loading entire result sets into memory.",
      "why_is_this_important": "Reduces memory pressure and improves throughput on big tables.",
      "severity": "Medium",
      "bad_example": "$rows = $pdo->query('SELECT * FROM logs')->fetchAll(); // huge",
      "good_example": "$stmt = $pdo->query('SELECT * FROM logs');\nwhile ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n    // process row\n}",
      "examples": [
        {
          "snippet": "fetchAll()",
          "isCorrect": false
        },
        {
          "snippet": "while($row=$stmt->fetch(...)) { ... }",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "eda71c3b-f1c7-4bc7-8ea1-41c503c94388",
      "buckets": ["performance-efficiency", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Cache expensive database operations",
      "rule": "Cache frequently used, rarely changing query results in memory or an external cache with appropriate TTL/invalidations.",
      "why_is_this_important": "Avoids repeated heavy queries, improving latency and DB load.",
      "severity": "Medium",
      "bad_example": "function categories(){ return $pdo->query('SELECT * FROM categories')->fetchAll(); }",
      "good_example": "function categories(Cache $cache, PDO $pdo){\n    return $cache->remember('categories', 300, function() use ($pdo){\n        return $pdo->query('SELECT * FROM categories')->fetchAll(PDO::FETCH_ASSOC);\n    });\n}",
      "examples": [
        {
          "snippet": "always query SELECT *",
          "isCorrect": false
        },
        {
          "snippet": "$cache->remember('key', ttl, fn() => query())",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "8681866d-2f8d-4442-b543-b710eb00eb06",
      "buckets": ["caching-strategy", "performance-efficiency", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Use batch operations for deletions/updates",
      "rule": "Prefer set-based SQL (DELETE/UPDATE with WHERE IN/JOIN) or chunked batches over per-row statements.",
      "why_is_this_important": "Reduces round-trips and lock contention; improves performance.",
      "severity": "Medium",
      "bad_example": "foreach ($ids as $id) { $pdo->prepare('DELETE FROM t WHERE id=?')->execute([$id]); }",
      "good_example": "$in  = str_repeat('?,', count($ids)-1) . '?';\n$sql = \"DELETE FROM t WHERE id IN ($in)\";\n$pdo->prepare($sql)->execute($ids);",
      "examples": [
        {
          "snippet": "loop + DELETE",
          "isCorrect": false
        },
        {
          "snippet": "DELETE ... WHERE id IN (...)",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "9e4230c3-8ead-4b67-ab0d-ee99b0b4a15e",
      "buckets": [
        "database-query-performance",
        "performance-efficiency",
        "stack-php"
      ],
      "scope": "file"
    },
    {
      "title": "Remove redundant database queries",
      "rule": "Deduplicate identical queries within a request; reuse previously fetched data or preload in a single query.",
      "why_is_this_important": "Avoids unnecessary DB load and latency.",
      "severity": "Medium",
      "bad_example": "foreach ($items as $i) { $p = loadProduct($i['product_id']); } // reloads same product many times",
      "good_example": "$ids = array_unique(array_column($items, 'product_id'));\n$products = loadProductsByIds($ids); // one query",
      "examples": [
        {
          "snippet": "inside loop SELECT ...",
          "isCorrect": false
        },
        {
          "snippet": "bulk load then map by id",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "5a747742-c0b3-4b7e-a321-e3bb4eeff358",
      "buckets": [
        "database-query-performance",
        "duplication-complexity",
        "stack-php"
      ],
      "scope": "file"
    },
    {
      "title": "Use deterministic ordering in queries",
      "rule": "Always specify ORDER BY when the processing logic relies on a particular order.",
      "why_is_this_important": "DBs may return rows in arbitrary order; explicit ordering ensures repeatable behavior.",
      "severity": "Low",
      "bad_example": "$rows = $pdo->query('SELECT * FROM events')->fetchAll();",
      "good_example": "$rows = $pdo->query('SELECT * FROM events ORDER BY occurred_at DESC')->fetchAll();",
      "examples": [
        {
          "snippet": "SELECT * FROM t",
          "isCorrect": false
        },
        {
          "snippet": "SELECT * FROM t ORDER BY created_at DESC",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "7c11845e-2861-4116-9229-672d506d7ce2",
      "buckets": ["database-query-performance", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Validate API response structure",
      "rule": "After decoding, assert required keys and types before use; reject unexpected shapes.",
      "why_is_this_important": "External APIs change. Structural checks prevent downstream errors and data corruption.",
      "severity": "High",
      "bad_example": "$status = $data['status']; $id = $data['id'];",
      "good_example": "if (!isset($data['status'], $data['id']) || !is_string($data['status'])) {\n    throw new UnexpectedValueException('Invalid response structure');\n}",
      "examples": [
        {
          "snippet": "$v = $data['x'];",
          "isCorrect": false
        },
        {
          "snippet": "if(!isset($data['x'])) throw new UnexpectedValueException()",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "8a90bf9d-65f4-4907-bd13-2821838c2afa",
      "buckets": ["api-conventions", "security-hardening", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Return proper HTTP status codes",
      "rule": "Return 2xx only on success; use 4xx for client errors and 5xx for server errors, with a minimal JSON error body.",
      "why_is_this_important": "Correct semantics enable clients and monitors to react properly.",
      "severity": "High",
      "bad_example": "http_response_code(200);\necho json_encode(['error'=>'failed']);",
      "good_example": "http_response_code(400);\nheader('Content-Type: application/json');\necho json_encode(['error'=>'invalid_request']);",
      "examples": [
        {
          "snippet": "200 + error body",
          "isCorrect": false
        },
        {
          "snippet": "400 + {\"error\":\"...\"}",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "2630d500-91e1-48bb-bced-0e6466c005dd",
      "buckets": ["api-conventions", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Include context in error logs",
      "rule": "Log errors with operation name and identifiers (e.g., userId, orderId) using structured context.",
      "why_is_this_important": "Contextual logs speed up incident triage and correlation.",
      "severity": "High",
      "bad_example": "error_log($e->getMessage());",
      "good_example": "$logger->error('payment failed', ['op'=>'charge','userId'=>$userId,'orderId'=>$orderId,'exception'=>$e]);",
      "examples": [
        {
          "snippet": "error_log($e)",
          "isCorrect": false
        },
        {
          "snippet": "$logger->error('x', ['id'=>$id,'e'=>$e])",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "4de17f7b-a811-45e7-9280-7112991ce818",
      "buckets": ["observability-logging", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Replace echo with proper logging",
      "rule": "Do not use echo/var_dump for diagnostics in application code; use a PSR-3 logger or error_log with levels.",
      "why_is_this_important": "Echo contaminates HTTP responses/CLI output and breaks APIs; logging is routable and level-aware.",
      "severity": "Medium",
      "bad_example": "echo \"DEBUG: \".$value; var_dump($payload);",
      "good_example": "$logger->debug('payload received', ['size'=>strlen($raw)]);",
      "examples": [
        {
          "snippet": "echo 'here';",
          "isCorrect": false
        },
        {
          "snippet": "$logger->info('step done')",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "688b8090-49f3-4f3e-84c9-f465dc033c02",
      "buckets": ["observability-logging", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Remove temporary debug code",
      "rule": "Eliminate debug helpers (var_dump, die, print_r) and commented-out blocks before merging.",
      "why_is_this_important": "Debug code leaks internals, breaks responses, and confuses future maintainers.",
      "severity": "Medium",
      "bad_example": "var_dump($user); die; // TODO remove",
      "good_example": "// removed; covered by tests and proper logs",
      "examples": [
        {
          "snippet": "print_r($x); die;",
          "isCorrect": false
        },
        {
          "snippet": "// clean",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "7a95f29d-47ca-40b9-8b45-d7a09aaf7bfd",
      "buckets": ["maintainability", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Use type hints for better clarity",
      "rule": "Add scalar/union/nullable type hints and return types to functions, methods, and properties; prefer interfaces over mixed.",
      "why_is_this_important": "Type hints improve readability, tooling, and runtime safety.",
      "severity": "Medium",
      "bad_example": "function save($id, $data) { /* ... */ }",
      "good_example": "function save(string $id, array $data): bool { /* ... */ }",
      "examples": [
        {
          "snippet": "function f($x){...}",
          "isCorrect": false
        },
        {
          "snippet": "function f(int $x): string { ... }",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "9dd285b0-7c5e-41b5-b7d5-c0062604e27b",
      "buckets": ["readability-refactor", "stack-php", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Handle null values with coalescing operators",
      "rule": "Use ?? and the nullsafe operator (?->) to provide defaults and avoid notices when values may be null.",
      "why_is_this_important": "Prevents undefined/index notices and clarifies default behavior.",
      "severity": "Medium",
      "bad_example": "$email = $user['profile']['email'];",
      "good_example": "$email = $user['profile']['email'] ?? null;\n$name  = $userObj?->profile?->name ?? 'Anonymous';",
      "examples": [
        {
          "snippet": "$x = $a['k'];",
          "isCorrect": false
        },
        {
          "snippet": "$x = $a['k'] ?? 'n/a';",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "894b7ccb-bec7-4406-9765-64ae6f02b3c1",
      "buckets": ["error-handling", "stack-php"],
      "scope": "file"
    },
    {
      "title": "Extract duplicated field lists to constants",
      "rule": "When the same set of attribute/field names is used in multiple places (strong params, serializers, queries), extract it to a constant and reuse.",
      "why_is_this_important": "Avoids drift and typos; a single edit updates all call sites.",
      "severity": "Medium",
      "bad_example": "params.require(:user).permit(:name, :email, :role)\nUser.select(:name, :email, :role)",
      "good_example": "FIELDS = %i[name email role].freeze\nparams.require(:user).permit(*FIELDS)\nUser.select(*FIELDS)",
      "examples": [
        {
          "snippet": "permit(:a, :b, :c) in many files",
          "isCorrect": false
        },
        {
          "snippet": "FIELDS = %i[a b c].freeze; permit(*FIELDS)",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "857251a0-1673-43e6-a718-546b20de962e",
      "buckets": ["duplication-complexity", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Cache expensive method calls outside loops",
      "rule": "Do not recompute expensive values inside loops; compute once and reuse.",
      "why_is_this_important": "Reduces CPU and GC pressure in hot paths.",
      "severity": "Medium",
      "bad_example": "items.each { |i| heavy = JSON.parse(File.read(cfg)); use(heavy, i) }",
      "good_example": "heavy = JSON.parse(File.read(cfg))\nitems.each { |i| use(heavy, i) }",
      "examples": [
        {
          "snippet": "Regexp.new(pattern) inside each",
          "isCorrect": false
        },
        {
          "snippet": "re = Regexp.new(pattern); items.each { re.match(_1) }",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "f2fb9ae2-49cb-4684-ad9a-3818d57b9df4",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Use update_all instead of each with update",
      "rule": "When callbacks/validations are not required, prefer a single UPDATE statement via update_all over iterating records and calling update.",
      "why_is_this_important": "Eliminates N+1 updates and speeds up batch changes.",
      "severity": "High",
      "bad_example": "User.where(active: false).each { |u| u.update(active: true) }",
      "good_example": "User.where(active: false).update_all(active: true)",
      "examples": [
        {
          "snippet": "each { |r| r.update(...) }",
          "isCorrect": false
        },
        {
          "snippet": "Model.where(...).update_all(...)",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "14d91f0b-a33f-43e0-a5dc-c60d6a0673a5",
      "buckets": ["database-query-performance", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Optimize queries with joins and includes",
      "rule": "Use joins for filtering on associations and includes/preload for eager-loading to avoid N+1.",
      "why_is_this_important": "Reduces query count and latency.",
      "severity": "High",
      "bad_example": "posts.each { |p| puts p.user.name }",
      "good_example": "posts = Post.includes(:user)\nposts.each { |p| puts p.user.name }",
      "examples": [
        {
          "snippet": "User.where(posts: { id: ids }) without join",
          "isCorrect": false
        },
        {
          "snippet": "User.joins(:posts).where(posts: { id: ids })",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "0b879a8b-8c14-4aec-8a3b-7fad55e0ea5b",
      "buckets": ["database-query-performance"],
      "scope": "file"
    },
    {
      "title": "Use find_each for large collections",
      "rule": "Iterate large ActiveRecord sets with find_each/find_in_batches to stream records in batches.",
      "why_is_this_important": "Avoids loading all rows in memory and reduces timeouts.",
      "severity": "High",
      "bad_example": "User.where(active: true).each { |u| process(u) }",
      "good_example": "User.where(active: true).find_each(batch_size: 1000) { |u| process(u) }",
      "examples": [
        {
          "snippet": "Model.where(...).each",
          "isCorrect": false
        },
        {
          "snippet": "Model.where(...).find_each",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "3e8d8988-1a5d-4677-a1d5-38c2325971b8",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Add database indexes for query performance",
      "rule": "Index columns used in WHERE/JOIN/ORDER and enforce uniqueness where applicable.",
      "why_is_this_important": "Improves query speed and data integrity.",
      "severity": "High",
      "bad_example": "-- filtering by email without index\nSELECT * FROM users WHERE email = 'x';",
      "good_example": "add_index :users, :email, unique: true",
      "examples": [
        {
          "snippet": "where(email: ...)",
          "isCorrect": false
        },
        {
          "snippet": "add_index :users, :email",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "ba750ae2-786a-41f7-99fb-535bebea5632",
      "buckets": ["database-query-performance"],
      "scope": "file"
    },
    {
      "title": "Use safe navigation operator for nil checks",
      "rule": "Use `&.` and presence/|| to safely traverse possibly-nil chains and provide defaults.",
      "why_is_this_important": "Prevents NoMethodError from nil and clarifies fallbacks.",
      "severity": "High",
      "bad_example": "city = user.address.city.downcase",
      "good_example": "city = user&.address&.city&.downcase || \"unknown\"",
      "examples": [
        {
          "snippet": "obj.child.value",
          "isCorrect": false
        },
        {
          "snippet": "obj&.child&.value || default",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "9b9301a2-5530-48a9-80a0-16e0714e93d1",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Specify StandardError explicitly in rescue blocks",
      "rule": "Avoid bare `rescue`; rescue StandardError (or a narrower class) and log with context.",
      "why_is_this_important": "Prevents accidentally catching system-level exceptions and improves observability.",
      "severity": "High",
      "bad_example": "begin\n  risky\nrescue\n  # swallowed\nend",
      "good_example": "begin\n  risky\nrescue StandardError => e\n  Rails.logger.error(\"risky failed\", error: e)\n  raise\nend",
      "examples": [
        {
          "snippet": "rescue; end",
          "isCorrect": false
        },
        {
          "snippet": "rescue StandardError => e; log; raise",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "3f27d358-404b-4c4b-8209-87905174de55",
      "buckets": ["error-handling", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Add error handling for API response access",
      "rule": "Validate HTTP status and safely access nested response data using `dig`/guards.",
      "why_is_this_important": "Avoids method errors on unexpected payloads and surfaces transport failures.",
      "severity": "High",
      "bad_example": "json = JSON.parse(resp.body); token = json[\"data\"][\"token\"]",
      "good_example": "raise \"HTTP #{resp.code}\" unless resp.code.to_i < 400\njson = JSON.parse(resp.body)\ntoken = json.dig(\"data\", \"token\")",
      "examples": [
        {
          "snippet": "JSON.parse(resp.body)['x']['y']",
          "isCorrect": false
        },
        {
          "snippet": "JSON.parse(resp.body).dig('x','y')",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "169b81a2-58dc-4d8e-ab4d-35981bf00d52",
      "buckets": ["api-conventions", "error-handling"],
      "scope": "file"
    },
    {
      "title": "Handle ActiveRecord::RecordNotFound specifically",
      "rule": "Rescue RecordNotFound and return 404 (or domain-appropriate response) instead of 500.",
      "why_is_this_important": "Communicates proper semantics to clients and avoids noisy error logs.",
      "severity": "High",
      "bad_example": "User.find(params[:id]) # bubbles to 500",
      "good_example": "User.find(params[:id])\nrescue ActiveRecord::RecordNotFound\n  head :not_found",
      "examples": [
        {
          "snippet": "find(id) without rescue",
          "isCorrect": false
        },
        {
          "snippet": "rescue ActiveRecord::RecordNotFound { head :not_found }",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "becca844-002b-4f5e-8aba-26522fc5b6fd",
      "buckets": ["api-conventions", "error-handling"],
      "scope": "file"
    },
    {
      "title": "Add transaction blocks for data consistency",
      "rule": "Wrap multi-record changes in a database transaction and use bang methods to ensure rollback on failure.",
      "why_is_this_important": "Keeps data consistent when any step fails.",
      "severity": "High",
      "bad_example": "user.update!(a: 1); order.save!; payment.save! # without transaction",
      "good_example": "ActiveRecord::Base.transaction do\n  user.update!(a: 1)\n  order.save!\n  payment.save!\nend",
      "examples": [
        {
          "snippet": "multiple saves without transaction",
          "isCorrect": false
        },
        {
          "snippet": "ActiveRecord::Base.transaction { ... }",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "e65ab050-d9da-4483-a834-4b729735a99b",
      "buckets": ["database-query-performance"],
      "scope": "file"
    },
    {
      "title": "Handle Time.parse and Date.parse errors",
      "rule": "Parse dates/times in begin/rescue blocks and validate expected format/timezone.",
      "why_is_this_important": "User input and APIs often send malformed timestamps.",
      "severity": "Medium",
      "bad_example": "expires_at = Time.parse(params[:expires])",
      "good_example": "expires_at = begin\n  Time.iso8601(params[:expires])\nrescue ArgumentError\n  nil\nend",
      "examples": [
        {
          "snippet": "Date.parse(s)",
          "isCorrect": false
        },
        {
          "snippet": "Date.iso8601(s) rescue nil",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "42674f7e-4b1a-4f26-adb2-d687e4dc788a",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Protect against NoMethodError on nil objects",
      "rule": "Guard early or use safe navigation when dereferencing possibly-nil data.",
      "why_is_this_important": "Avoids crashes and clarifies control flow.",
      "severity": "High",
      "bad_example": "order.customer.name.downcase",
      "good_example": "return unless order&.customer&.name\nname = order.customer.name.downcase",
      "examples": [
        {
          "snippet": "obj.child.value",
          "isCorrect": false
        },
        {
          "snippet": "return unless obj&.child&.value",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "7ad457fb-0be1-48a3-a8a7-ae71da516ab2",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Extract shared Sidekiq queue names to constants",
      "rule": "Centralize queue names and reuse across workers and tests.",
      "why_is_this_important": "Prevents typos and keeps routing consistent.",
      "severity": "Medium",
      "bad_example": "sidekiq_options queue: \"critical\"",
      "good_example": "module Queues\n  CRITICAL = \"critical\".freeze\nend\nsidekiq_options queue: Queues::CRITICAL",
      "examples": [
        {
          "snippet": "queue: \"emails\"",
          "isCorrect": false
        },
        {
          "snippet": "queue: Queues::EMAILS",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "85abe0a7-6bce-4ad9-9b5e-8e3543c93612",
      "buckets": ["duplication-complexity", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Extract duplicated business logic to models",
      "rule": "Move domain behavior from controllers/views into models or service objects.",
      "why_is_this_important": "Improves cohesion, reuse, and testability.",
      "severity": "Medium",
      "bad_example": "def create; total = params[:items].sum { |i| i[:p]*i[:q] }; ... end",
      "good_example": "def create; total = OrderCalculator.total(params[:items]); ... end",
      "examples": [
        {
          "snippet": "controller computes totals",
          "isCorrect": false
        },
        {
          "snippet": "service/model encapsulates logic",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "4953bc31-9e28-471f-8263-40eaadc4bb58",
      "buckets": ["duplication-complexity", "module-architecture"],
      "scope": "file"
    },
    {
      "title": "Move generic helpers to ApplicationHelper",
      "rule": "Place cross-controller view helpers in ApplicationHelper (or a shared module) for reuse.",
      "why_is_this_important": "Avoids duplication and inconsistent behavior across views.",
      "severity": "Low",
      "bad_example": "module OrdersHelper; def currency(v); number_to_currency(v); end end",
      "good_example": "module ApplicationHelper; def currency(v); number_to_currency(v); end end",
      "examples": [
        {
          "snippet": "duplicate helpers across modules",
          "isCorrect": false
        },
        {
          "snippet": "shared helper in ApplicationHelper",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "aea6e507-306f-4a31-8d64-2e45c082640b",
      "buckets": ["duplication-complexity", "module-architecture"],
      "scope": "file"
    },
    {
      "title": "Create base controllers for shared concerns",
      "rule": "Factor shared before_actions/filters/error handling into ApplicationController or a base controller.",
      "why_is_this_important": "Improves consistency and reduces boilerplate.",
      "severity": "Medium",
      "bad_example": "OrdersController: before_action :require_auth\nUsersController: before_action :require_auth",
      "good_example": "class ApplicationController < ActionController::Base\n  before_action :require_auth\nend",
      "examples": [
        {
          "snippet": "repeat filters in each controller",
          "isCorrect": false
        },
        {
          "snippet": "shared filter in base",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "8d803d9d-c117-4894-8797-32cd0919e2ac",
      "buckets": ["duplication-complexity", "module-architecture"],
      "scope": "file"
    },
    {
      "title": "Replace hardcoded values with named constants",
      "rule": "Give semantic names to magic numbers/strings and freeze where appropriate.",
      "why_is_this_important": "Documents intent and centralizes change.",
      "severity": "Low",
      "bad_example": "sleep 2",
      "good_example": "RETRY_DELAY = 2.seconds\nsleep RETRY_DELAY",
      "examples": [
        {
          "snippet": "if tries > 3",
          "isCorrect": false
        },
        {
          "snippet": "if tries > MAX_RETRIES",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "3aeccaf2-9710-492d-b3bb-25484cf6d4cd",
      "buckets": ["maintainability", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Use translation keys for user-facing text",
      "rule": "Do not hardcode UI strings; use I18n keys with proper scopes.",
      "why_is_this_important": "Enables localization and consistent copy.",
      "severity": "Medium",
      "bad_example": "flash[:alert] = \"Invalid login\"",
      "good_example": "flash[:alert] = t(\"sessions.invalid_login\")",
      "examples": [
        {
          "snippet": "render plain: \"Done\"",
          "isCorrect": false
        },
        {
          "snippet": "render plain: t('common.done')",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "a2db067c-0127-4c2c-a7c8-68e8a5b0c3fa",
      "buckets": ["internationalization-i18n", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Use descriptive variable names",
      "rule": "Prefer intent-revealing names over cryptic abbreviations.",
      "why_is_this_important": "Improves readability and reduces misunderstandings.",
      "severity": "Low",
      "bad_example": "r = Repo.new(u)",
      "good_example": "report = ReportBuilder.new(user)",
      "examples": [
        {
          "snippet": "c = calc(x)",
          "isCorrect": false
        },
        {
          "snippet": "count = calculate_total(x)",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "1f5107dd-cae9-4a32-83cf-a2fb68ad6229",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Freeze constants to prevent modification",
      "rule": "Freeze constant objects (arrays/hashes/strings) to avoid accidental mutation at runtime.",
      "why_is_this_important": "Preserves invariants and prevents subtle bugs.",
      "severity": "Low",
      "bad_example": "ALLOWED = %w[a b c]\nALLOWED << 'd'",
      "good_example": "ALLOWED = %w[a b c].freeze",
      "examples": [
        {
          "snippet": "HASH = {a: 1}",
          "isCorrect": false
        },
        {
          "snippet": "HASH = {a: 1}.freeze",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "535d4622-31a0-4c6b-a6de-8dccfff2c470",
      "buckets": ["maintainability"],
      "scope": "file"
    },
    {
      "title": "Use Rails conventions for resource naming",
      "rule": "Follow Rails conventions (plural resource routes, model singular class names, snake_case files).",
      "why_is_this_important": "Reduces surprise and tooling friction.",
      "severity": "Low",
      "bad_example": "resources :user\nclass Users < ApplicationRecord; end",
      "good_example": "resources :users\nclass User < ApplicationRecord; end",
      "examples": [
        {
          "snippet": "get '/User/index'",
          "isCorrect": false
        },
        {
          "snippet": "resources :users",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "2813a5a8-a000-4b6d-8b1d-4b4864920d4f",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "title": "Extract complex migration logic to separate methods",
      "rule": "Keep migrations readable by extracting multi-step data fixes to helper methods within the migration.",
      "why_is_this_important": "Eases review and reduces errors in irreversible changes.",
      "severity": "Medium",
      "bad_example": "def change; User.find_each { |u| u.update!(x: compute(u)) }; end",
      "good_example": "def up; backfill_x; end\nprivate\ndef backfill_x; User.find_each { |u| u.update!(x: compute(u)) }; end",
      "examples": [
        {
          "snippet": "long loop inline",
          "isCorrect": false
        },
        {
          "snippet": "helper method encapsulates loop",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "65c83b43-ade5-49d0-867c-c1d21d696e83",
      "buckets": ["migrations-backward-compat", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Use change_table for safer migrations",
      "rule": "Group column/index changes with change_table; use concurrent indexes when needed.",
      "why_is_this_important": "Improves readability and can reduce lock duration.",
      "severity": "Low",
      "bad_example": "add_column :users, :locale, :string\nadd_index :users, :locale",
      "good_example": "change_table :users do |t|\n  t.string :locale\nend\nadd_index :users, :locale, algorithm: :concurrently",
      "examples": [
        {
          "snippet": "multiple scattered DDL calls",
          "isCorrect": false
        },
        {
          "snippet": "change_table + concurrent index",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "980c304b-50e1-4308-86c8-f7c6d369ec4e",
      "buckets": ["migrations-backward-compat"],
      "scope": "file"
    },
    {
      "title": "Make migrations reversible with up/down methods",
      "rule": "Prefer reversible change or explicit up/down to support rollbacks.",
      "why_is_this_important": "Allows safe deploy/rollback workflows.",
      "severity": "High",
      "bad_example": "def change; execute(\"UPDATE...\") end",
      "good_example": "def up; execute(\"UPDATE...\"); end\ndef down; execute(\"UPDATE...\") # reverse op\nend",
      "examples": [
        {
          "snippet": "irreversible change without comment",
          "isCorrect": false
        },
        {
          "snippet": "reversible { dir.up { ... }; dir.down { ... } }",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "446bef44-7bf9-4576-84ca-b7e2077ab0a0",
      "buckets": ["migrations-backward-compat"],
      "scope": "file"
    },
    {
      "title": "Use batch operations for large data migrations",
      "rule": "Process large tables with find_in_batches and avoid loading entire datasets.",
      "why_is_this_important": "Prevents memory bloat and long locks.",
      "severity": "High",
      "bad_example": "User.all.each { |u| backfill(u) }",
      "good_example": "User.find_in_batches(batch_size: 1000) { |batch| batch.each { backfill(_1) } }",
      "examples": [
        {
          "snippet": "Model.all.each",
          "isCorrect": false
        },
        {
          "snippet": "Model.find_in_batches",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "24245df4-0ebf-4f73-830b-77ef6bd31610",
      "buckets": ["migrations-backward-compat", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Add foreign key constraints in migrations",
      "rule": "Enforce referential integrity with add_foreign_key and matching indexes.",
      "why_is_this_important": "Prevents orphaned rows and improves join performance.",
      "severity": "High",
      "bad_example": "add_column :orders, :user_id, :bigint",
      "good_example": "add_reference :orders, :user, foreign_key: true, index: true",
      "examples": [
        {
          "snippet": "user_id without FK",
          "isCorrect": false
        },
        {
          "snippet": "add_foreign_key :orders, :users",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "6b842157-9595-40e0-b460-1e12e1378e31",
      "buckets": ["database-query-performance", "migrations-backward-compat"],
      "scope": "file"
    },
    {
      "title": "Use guard clauses for early returns",
      "rule": "Validate and return early to avoid deep nesting.",
      "why_is_this_important": "Simplifies control flow and reduces cognitive load.",
      "severity": "Low",
      "bad_example": "if params[:id]\n  if current_user\n    process\n  end\nend",
      "good_example": "return head :bad_request unless params[:id]\nreturn head :unauthorized unless current_user\nprocess",
      "examples": [
        {
          "snippet": "nested ifs",
          "isCorrect": false
        },
        {
          "snippet": "return unless ...; main path",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "10adc249-f13a-4637-8de8-d9728a6d5bd0",
      "buckets": ["readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Extract complex conditions to private methods",
      "rule": "Move long conditional expressions to well-named predicate methods.",
      "why_is_this_important": "Improves readability and testability.",
      "severity": "Low",
      "bad_example": "if a.present? && b.nil? && user.admin? && Time.zone.now.monday?",
      "good_example": "if eligible_for_discount?(user)\n  ...\nend\n\nprivate\n\ndef eligible_for_discount?(user)\n  a.present? && b.nil? && user.admin? && Time.zone.now.monday?\nend",
      "examples": [
        {
          "snippet": "long inline condition",
          "isCorrect": false
        },
        {
          "snippet": "predicate method encapsulates logic",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "94a9cc70-13dc-4e90-be0e-a11f2b2a88dc",
      "buckets": ["readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Use or instead of + for combining queries",
      "rule": "Combine ActiveRecord relations with `or` instead of materializing arrays or concatenating results.",
      "why_is_this_important": "Keeps work in the database and reduces memory usage.",
      "severity": "Medium",
      "bad_example": "(User.active.to_a + User.admin.to_a).uniq",
      "good_example": "User.active.or(User.admin).distinct",
      "examples": [
        {
          "snippet": "scope1.to_a + scope2.to_a",
          "isCorrect": false
        },
        {
          "snippet": "scope1.or(scope2)",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "0eb771ab-a23a-47b9-9150-c865f9a00abf",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Return consistent types from methods",
      "rule": "A method should return the same type in all code paths (e.g., always an array or always nil/record).",
      "why_is_this_important": "Simplifies callers and prevents conditional type checks.",
      "severity": "Medium",
      "bad_example": "def ids; return [] if none?; return find_ids; end",
      "good_example": "def ids; return [] if none?; find_ids || []; end",
      "examples": [
        {
          "snippet": "sometimes String, sometimes nil",
          "isCorrect": false
        },
        {
          "snippet": "always returns Array",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "55e2c699-89fb-4541-b620-7318f3fc65c5",
      "buckets": ["api-conventions", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Use Struct instead of OpenStruct",
      "rule": "Prefer Struct (or value objects) over OpenStruct for performance and type clarity.",
      "why_is_this_important": "Structs are faster, lighter, and define a stable API.",
      "severity": "Low",
      "bad_example": "row = OpenStruct.new(name: \"A\", price: 10)",
      "good_example": "Row = Struct.new(:name, :price, keyword_init: true)\nrow = Row.new(name: \"A\", price: 10)",
      "examples": [
        {
          "snippet": "OpenStruct.new(...)",
          "isCorrect": false
        },
        {
          "snippet": "Struct.new(:a, :b)",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "27ee5c25-2388-430b-b77d-1a880bfb5a95",
      "buckets": ["performance-efficiency", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Memoize expensive operations",
      "rule": "Cache expensive pure results using memoization (`||=`) or request-scoped caches.",
      "why_is_this_important": "Avoids repeated work across a request or loop.",
      "severity": "Medium",
      "bad_example": "def config; YAML.safe_load(File.read(path)); end",
      "good_example": "def config; @config ||= YAML.safe_load(File.read(path)); end",
      "examples": [
        {
          "snippet": "def x; heavy; end",
          "isCorrect": false
        },
        {
          "snippet": "def x; @x ||= heavy; end",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "55e23975-6997-43e6-b411-5cc4476aef33",
      "buckets": ["caching-strategy", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Externalize URLs and API keys to configuration",
      "rule": "Read API URLs/keys from ENV/credentials and inject where needed; do not hardcode.",
      "why_is_this_important": "Supports multiple environments and keeps secrets out of code.",
      "severity": "High",
      "bad_example": "API_URL = \"https://api.example.com\"",
      "good_example": "API_URL = ENV.fetch(\"API_URL\")",
      "examples": [
        {
          "snippet": "KEY = \"abcd\"",
          "isCorrect": false
        },
        {
          "snippet": "Rails.application.credentials.dig(:service, :key)",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "7e060d2b-cf8c-47dd-9943-ba9f1c520b0c",
      "buckets": ["config-environment", "secrets-credentials"],
      "scope": "file"
    },
    {
      "title": "Re-raise exceptions to preserve error context",
      "rule": "Do not swallow errors; log with context and re-raise using `raise` (no args) or `raise new_error, cause: e`.",
      "why_is_this_important": "Preserves backtrace and supports failure propagation/retries.",
      "severity": "High",
      "bad_example": "rescue => e\n  Rails.logger.error(e)\n  nil",
      "good_example": "rescue => e\n  Rails.logger.error(\"op failed\", error: e)\n  raise",
      "examples": [
        {
          "snippet": "rescue => e; nil",
          "isCorrect": false
        },
        {
          "snippet": "rescue => e; raise",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "280f042c-2f8d-46db-82e8-5ce517e1b569",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "title": "Add proper retry configuration for jobs",
      "rule": "Configure Sidekiq retries and dead-lettering; use backoff for transient failures and idempotent jobs.",
      "why_is_this_important": "Improves resilience and prevents infinite failure loops.",
      "severity": "High",
      "bad_example": "class SyncJob\n  include Sidekiq::Worker\nend",
      "good_example": "class SyncJob\n  include Sidekiq::Worker\n  sidekiq_options retry: 5, dead: true\nend",
      "examples": [
        {
          "snippet": "no retry strategy",
          "isCorrect": false
        },
        {
          "snippet": "sidekiq_options retry: 5",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "712ae6e1-8e5b-439a-a86e-0a00b599d679",
      "buckets": ["resilience-retries-idempotency"],
      "scope": "file"
    },
    {
      "title": "Initialize variables to prevent NameError",
      "rule": "Always initialize variables before use and avoid conditionally-defined locals.",
      "why_is_this_important": "Prevents NameError and makes control flow explicit.",
      "severity": "Low",
      "bad_example": "if cond\n  msg = compute\nend\nlogger.info(msg)",
      "good_example": "msg = nil\nmsg = compute if cond\nlogger.info(msg)",
      "examples": [
        {
          "snippet": "x += 1 before x",
          "isCorrect": false
        },
        {
          "snippet": "x = 0; x += 1",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "6d639e39-324e-457a-9502-d79845aec56e",
      "buckets": ["error-handling", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Remove redundant method calls",
      "rule": "Avoid no-op or duplicate calls (e.g., flatten.flatten, compact followed by compact!).",
      "why_is_this_important": "Reduces noise and minor performance overhead.",
      "severity": "Low",
      "bad_example": "arr.flatten.flatten",
      "good_example": "arr.flatten(2)",
      "examples": [
        {
          "snippet": "arr.compact.compact",
          "isCorrect": false
        },
        {
          "snippet": "arr.compact!",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "54f4ab40-607b-4fa2-9f41-91d5273a4687",
      "buckets": ["duplication-complexity", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Remove unused variables and assignments",
      "rule": "Delete unused locals or prefix with underscore when required by interface.",
      "why_is_this_important": "Improves readability and eliminates misleading code.",
      "severity": "Low",
      "bad_example": "result = compute; compute2",
      "good_example": "_result = compute if needed_for_side_effects",
      "examples": [
        {
          "snippet": "tmp = something # never used",
          "isCorrect": false
        },
        {
          "snippet": "_tmp = something",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "ad2e7e06-f90d-4c69-a41a-aae9ac0ddd09",
      "buckets": ["maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Remove dead code and unused methods",
      "rule": "Delete unreachable branches and unused methods; rely on VCS for history.",
      "why_is_this_important": "Reduces maintenance cost and cognitive overhead.",
      "severity": "Low",
      "bad_example": "def old_impl; end # no callers",
      "good_example": "# removed; tests ensure coverage of live paths",
      "examples": [
        {
          "snippet": "if false then ... end",
          "isCorrect": false
        },
        {
          "snippet": "remove the branch entirely",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "0f4426a1-52ff-465e-913c-e47230ebd028",
      "buckets": ["maintainability"],
      "scope": "file"
    },
    {
      "title": "Remove duplicated method definitions",
      "rule": "Do not define the same method multiple times; consolidate behavior in one place.",
      "why_is_this_important": "Avoids accidental overrides and confusion.",
      "severity": "Medium",
      "bad_example": "def total; a + b; end\n# later\ndef total; a + b + c; end",
      "good_example": "def total; a + b + (c || 0); end",
      "examples": [
        {
          "snippet": "method redefined in same class",
          "isCorrect": false
        },
        {
          "snippet": "single definition with clear logic",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "c9bd2a9f-a05e-41ea-827c-621bdb453e23",
      "buckets": ["duplication-complexity", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Centralize analytics tracking logic",
      "rule": "Route all analytics events through a single service/helper instead of calling the SDK directly from widgets and blocs.",
      "why_is_this_important": "Avoids duplication, keeps event names/properties consistent, and makes it easy to swap providers or add privacy guards.",
      "severity": "Medium",
      "bad_example": "onPressed: () {\n  AnalyticsSDK.track('button_tap', {'id': widget.id});\n  // elsewhere\n  AnalyticsSDK.track('button_tap', {'id': card.id});\n}",
      "good_example": "class Analytics {\n  const Analytics(this._sdk);\n  final AnalyticsSDK _sdk;\n  void buttonTap(String id) => _sdk.track('button_tap', {'id': id});\n}\n\nonPressed: () => analytics.buttonTap(widget.id);",
      "examples": [
        {
          "snippet": "AnalyticsSDK.track('x'); // scattered across UI",
          "isCorrect": false
        },
        {
          "snippet": "analytics.doSomething(params); // via a single facade",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "05038beb-1149-45a9-9671-37b0c2f23e24",
      "buckets": [
        "duplication-complexity",
        "maintainability",
        "module-architecture",
        "stack-flutter"
      ],
      "scope": "file"
    },
    {
      "title": "Extract magic numbers to named constants",
      "rule": "Replace raw numeric/string literals used for dimensions, durations, and thresholds with named constants.",
      "why_is_this_important": "Improves readability and makes changes safer and centralized.",
      "severity": "Low",
      "bad_example": "return Padding(padding: EdgeInsets.all(16), child: SizedBox(height: 48));",
      "good_example": "const kScreenPadding = 16.0;\nconst kButtonHeight = 48.0;\nreturn Padding(padding: const EdgeInsets.all(kScreenPadding), child: const SizedBox(height: kButtonHeight));",
      "examples": [
        {
          "snippet": "EdgeInsets.all(12)",
          "isCorrect": false
        },
        {
          "snippet": "const kGap = 12.0; EdgeInsets.all(kGap)",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "65433e68-1a17-4fd3-a461-2a7e10e3d21d",
      "buckets": [
        "maintainability",
        "readability-refactor",
        "stack-flutter",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "title": "Wrap Uri.parse in try-catch blocks",
      "rule": "Use try/catch (or Uri.tryParse with validation) around Uri.parse to guard against FormatException and invalid inputs.",
      "why_is_this_important": "Prevents crashes from malformed URLs and enables clear error reporting.",
      "severity": "High",
      "bad_example": "final uri = Uri.parse(link); // may throw",
      "good_example": "final uri = Uri.tryParse(link);\nif (uri == null || !uri.hasScheme) {\n  logger.warning('Invalid URL', {'link': link});\n  return;\n}\n// safe to use uri",
      "examples": [
        {
          "snippet": "Uri.parse(input)",
          "isCorrect": false
        },
        {
          "snippet": "final u = Uri.tryParse(input); if (u != null) open(u);",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "aeba55f8-51e9-4be2-9153-ac1b20f6094d",
      "buckets": ["error-handling", "stack-flutter"],
      "scope": "file"
    },
    {
      "title": "Avoid swallowing exceptions by returning null",
      "rule": "Do not silently catch and return null on errors; log context and either rethrow or return a typed failure/Result.",
      "why_is_this_important": "Silent failures hide defects and make debugging and retries harder.",
      "severity": "High",
      "bad_example": "Future<User?> load() async {\n  try {\n    return await api.getUser();\n  } catch (_) {\n    return null; // swallowed\n  }\n}",
      "good_example": "Future<User> load() async {\n  try {\n    return await api.getUser();\n  } catch (e, st) {\n    logger.severe('load user failed', e, st);\n    rethrow; // or return a Result.failure(e)\n  }\n}",
      "examples": [
        {
          "snippet": "catch (_) { return null; }",
          "isCorrect": false
        },
        {
          "snippet": "catch (e, st) { logger.severe('fail', e, st); rethrow; }",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "d9657923-bcc4-4294-8087-f3e5e3863096",
      "buckets": ["error-handling", "stack-flutter"],
      "scope": "file"
    },
    {
      "title": "Use rethrow to preserve stack traces",
      "rule": "When re-emitting a caught exception, use `rethrow` instead of `throw e` to keep the original stack trace.",
      "why_is_this_important": "Original stack traces are essential for accurate debugging and error grouping.",
      "severity": "High",
      "bad_example": "catch (e) {\n  throw e; // resets stack\n}",
      "good_example": "catch (e, st) {\n  logger.severe('operation failed', e, st);\n  rethrow; // preserves stack\n}",
      "examples": [
        {
          "snippet": "catch (e) { throw e; }",
          "isCorrect": false
        },
        {
          "snippet": "catch (e, st) { rethrow; }",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "56caa28a-7663-4263-a1a5-6f53ba3e1c74",
      "buckets": ["error-handling", "stack-flutter"],
      "scope": "file"
    },
    {
      "title": "Add error handling to app initialization",
      "rule": "Guard app startup with zone-level handlers and FlutterError hooks; surface fatal errors and report them.",
      "why_is_this_important": "Prevents white-screen crashes and centralizes crash logging from the very first frame.",
      "severity": "High",
      "bad_example": "void main() { runApp(App()); }",
      "good_example": "void main() {\n  WidgetsFlutterBinding.ensureInitialized();\n  FlutterError.onError = (details) {\n    logger.severe('Flutter error', details.exception, details.stack);\n  };\n  runZonedGuarded(() => runApp(const App()), (e, st) {\n    logger.severe('Uncaught zone error', e, st);\n  });\n}",
      "examples": [
        {
          "snippet": "runApp(App()) // no global handlers",
          "isCorrect": false
        },
        {
          "snippet": "runZonedGuarded(() => runApp(App()), onError)",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "de4c4513-6c9a-4f3a-b92e-0a37051159e7",
      "buckets": ["error-handling", "observability-logging", "stack-flutter"],
      "scope": "file"
    },
    {
      "title": "Handle StateError from firstWhere operations",
      "rule": "Always provide `orElse` to firstWhere (or use a safe helper) when the match may not exist.",
      "why_is_this_important": "Avoids StateError at runtime and makes absence explicit.",
      "severity": "Medium",
      "bad_example": "final user = users.firstWhere((u) => u.id == id);",
      "good_example": "final user = users.firstWhere(\n  (u) => u.id == id,\n  orElse: () => defaultUser,\n);",
      "examples": [
        {
          "snippet": "list.firstWhere(test)",
          "isCorrect": false
        },
        {
          "snippet": "list.firstWhere(test, orElse: () => fallback)",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "6a35d2d0-f542-47f8-8485-c9faa922c234",
      "buckets": ["error-handling", "stack-flutter"],
      "scope": "file"
    },
    {
      "title": "Capture and print stack traces in catch blocks",
      "rule": "Use `catch (e, stack)` and log both exception and stack; do not log message-only.",
      "why_is_this_important": "Complete telemetry accelerates triage and grouping in log systems.",
      "severity": "Medium",
      "bad_example": "catch (e) { debugPrint('failed: $e'); }",
      "good_example": "catch (e, st) { logger.severe('operation failed', e, st); }",
      "examples": [
        {
          "snippet": "catch (e) { print(e); }",
          "isCorrect": false
        },
        {
          "snippet": "catch (e, st) { logger.severe('x', e, st); }",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "d18c7893-413a-43cc-8626-2425ae29050d",
      "buckets": ["error-handling", "observability-logging", "stack-flutter"],
      "scope": "file"
    },
    {
      "title": "Add const modifiers for better performance",
      "rule": "Mark compile-time constants and constant widgets with `const` to reduce rebuild cost and GC pressure.",
      "why_is_this_important": "Const widgets are canonicalized and not rebuilt unnecessarily.",
      "severity": "Low",
      "bad_example": "return SizedBox(height: 16);",
      "good_example": "return const SizedBox(height: 16);",
      "examples": [
        {
          "snippet": "Text('Hello')",
          "isCorrect": false
        },
        {
          "snippet": "const Text('Hello')",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "881862a9-b36b-4f73-a151-0e8152f9e146",
      "buckets": ["performance-efficiency", "stack-flutter"],
      "scope": "file"
    },
    {
      "title": "Add dispose methods to prevent memory leaks",
      "rule": "Dispose controllers, focus nodes, animations, timers, and cancel subscriptions in `dispose()`.",
      "why_is_this_important": "Prevents background work and resource leaks after widget teardown.",
      "severity": "High",
      "bad_example": "class MyState extends State<MyWidget> {\n  final controller = TextEditingController();\n}",
      "good_example": "class MyState extends State<MyWidget> {\n  final controller = TextEditingController();\n  StreamSubscription<int>? sub;\n  @override\n  void dispose() {\n    controller.dispose();\n    sub?.cancel();\n    super.dispose();\n  }\n}",
      "examples": [
        {
          "snippet": "Timer.periodic(...); // never canceled",
          "isCorrect": false
        },
        {
          "snippet": "late final t = Timer(...); @override dispose() => t.cancel();",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "c8c65f7f-4d7d-4547-bfc2-b94ab25b888c",
      "buckets": ["stack-flutter", "ui-robustness"],
      "scope": "file"
    },
    {
      "title": "Remove unused imports",
      "rule": "Delete imports that are not referenced by the compilation unit.",
      "why_is_this_important": "Reduces noise, compile time, and accidental side effects.",
      "severity": "Low",
      "bad_example": "import 'dart:io'; // not used",
      "good_example": "// removed unused import; keep only what is referenced",
      "examples": [
        {
          "snippet": "import 'package:x/y.dart'; // unused",
          "isCorrect": false
        },
        {
          "snippet": "// no unused imports",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "48a2e05f-20a5-4d74-bca5-83526459cab0",
      "buckets": ["maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Remove unused configuration variables",
      "rule": "Delete dead configuration fields and env flags; keep only variables that change behavior.",
      "why_is_this_important": "Avoids confusion and prevents stale toggles from drifting.",
      "severity": "Low",
      "bad_example": "const String UNUSED_CHANNEL = 'beta'; // never read",
      "good_example": "// remove UNUSED_CHANNEL or wire it into behavior where needed",
      "examples": [
        {
          "snippet": "final mode = 'dev'; // unused",
          "isCorrect": false
        },
        {
          "snippet": "final mode = getModeFromEnv(); if (mode == 'dev') enableDevTools();",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "ff69191b-6d2a-460b-9bbf-0f6da3f38454",
      "buckets": ["config-environment", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Remove redundant null-assertion operators",
      "rule": "Avoid `!` when nullability is already proven or a safer alternative (`??`, early return) exists.",
      "why_is_this_important": "Reduces risk of unexpected late null errors and clarifies intent.",
      "severity": "Medium",
      "bad_example": "final len = items!.length; // items may be null",
      "good_example": "final list = items ?? const [];\nfinal len = list.length;",
      "examples": [
        {
          "snippet": "value!.doSomething()",
          "isCorrect": false
        },
        {
          "snippet": "final v = value ?? defaultV; v.doSomething()",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "40cc3fd5-c3c4-4d92-80b2-34b5f4a4e727",
      "buckets": ["readability-refactor", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Use localized strings instead of hardcoded text",
      "rule": "Read UI strings from a localization source (e.g., AppLocalizations, arb) rather than hardcoding.",
      "why_is_this_important": "Enables i18n, consistent copy, and accessibility reviews.",
      "severity": "Medium",
      "bad_example": "Text('Submit')",
      "good_example": "Text(AppLocalizations.of(context)!.submit)",
      "examples": [
        {
          "snippet": "SnackBar(content: Text('Done'))",
          "isCorrect": false
        },
        {
          "snippet": "SnackBar(content: Text(l10n.done))",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "92d25d9c-5027-48ff-9191-f450d4b63837",
      "buckets": ["internationalization-i18n", "stack-flutter"],
      "scope": "file"
    },
    {
      "title": "Define reusable constants for repeated values",
      "rule": "Create theme-like constants (radii, gaps, durations) and reuse across widgets.",
      "why_is_this_important": "Improves design consistency and eases global tweaks.",
      "severity": "Low",
      "bad_example": "Container(decoration: BoxDecoration(borderRadius: BorderRadius.circular(12)))",
      "good_example": "class Dimens {\n  static const radiusM = Radius.circular(12);\n}\nContainer(decoration: BoxDecoration(borderRadius: BorderRadius.all(Dimens.radiusM)))",
      "examples": [
        {
          "snippet": "Duration(milliseconds: 200)",
          "isCorrect": false
        },
        {
          "snippet": "const kFast = Duration(milliseconds: 200);",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "2c1fbfe6-92bf-42d8-b28c-50455fa95e4f",
      "buckets": [
        "duplication-complexity",
        "maintainability",
        "stack-flutter",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "title": "Extract duplicated widget logic to reusable methods",
      "rule": "Factor identical widget trees or builders into private helpers or dedicated widgets.",
      "why_is_this_important": "Reduces duplication and keeps visual behavior consistent.",
      "severity": "Medium",
      "bad_example": "ListTile(title: Text(user.name), trailing: Icon(Icons.chevron_right)) // copy-pasted",
      "good_example": "Widget userTile(User u) => ListTile(title: Text(u.name), trailing: const Icon(Icons.chevron_right));",
      "examples": [
        {
          "snippet": "same ListTile everywhere",
          "isCorrect": false
        },
        {
          "snippet": "UserTile(user: u) // custom widget",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "f4bc0e58-6c69-4837-8ee2-92c0f103e1c9",
      "buckets": [
        "duplication-complexity",
        "readability-refactor",
        "stack-flutter"
      ],
      "scope": "file"
    },
    {
      "title": "Extract complex conditional logic to separate methods",
      "rule": "Move long/branchy UI decisions into named predicates or mappers to keep build methods simple.",
      "why_is_this_important": "Improves readability and testability of control flow.",
      "severity": "Medium",
      "bad_example": "if (a && (b || c) && user.role == 'admin' && now.isAfter(deadline)) ...",
      "good_example": "if (shouldShowAdminWarning(user, now)) ...\n\nbool shouldShowAdminWarning(User u, DateTime now) => a && (b || c) && u.isAdmin && now.isAfter(deadline);",
      "examples": [
        {
          "snippet": "deep nested ifs in build()",
          "isCorrect": false
        },
        {
          "snippet": "bool predicate(...) => ...; // used in build()",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "48b22518-0a15-448c-8bfc-bd6ec946e336",
      "buckets": ["readability-refactor", "stack-flutter"],
      "scope": "file"
    },
    {
      "title": "Refactor duplicated dialog action logic",
      "rule": "Centralize repeated dialog creation/action handlers into a helper to ensure consistent UX and error handling.",
      "why_is_this_important": "Prevents drift in copy, button order, and analytics hooks.",
      "severity": "Low",
      "bad_example": "showDialog(context: ctx, builder: (_) => AlertDialog(actions: [TextButton(onPressed: onOk, child: Text('OK'))])); // repeated many times",
      "good_example": "Future<void> showOkDialog(BuildContext c, String msg, VoidCallback onOk) {\n  return showDialog(\n    context: c,\n    builder: (_) => AlertDialog(content: Text(msg), actions: [TextButton(onPressed: onOk, child: const Text('OK'))]),\n  );\n}",
      "examples": [
        {
          "snippet": "AlertDialog(...) duplicated",
          "isCorrect": false
        },
        {
          "snippet": "showOkDialog(context, 'msg', onOk)",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "ce3707c9-07ac-4502-8f2f-4e0c9824239d",
      "buckets": [
        "duplication-complexity",
        "error-handling",
        "stack-flutter",
        "ui-robustness"
      ],
      "scope": "file"
    },
    {
      "title": "Define dialog handlers once to avoid duplication",
      "rule": "For confirm/cancel flows, define common callbacks (confirm/cancel) once and reuse across dialogs.",
      "why_is_this_important": "Reduces copy-paste mistakes and ensures consistent analytics/logging on actions.",
      "severity": "Low",
      "bad_example": "TextButton(onPressed: () { log('cancel'); Navigator.pop(context); })\nTextButton(onPressed: () { log('cancel'); Navigator.pop(context); })",
      "good_example": "void onCancel(BuildContext c) { logger.info('dialog_cancel'); Navigator.pop(c); }\nTextButton(onPressed: () => onCancel(context), child: const Text('Cancel'))",
      "examples": [
        {
          "snippet": "inline Cancel handlers everywhere",
          "isCorrect": false
        },
        {
          "snippet": "shared onCancel/onConfirm helpers",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "uuid": "c70e25a7-0994-484d-88b1-eb04aa9641d4",
      "buckets": ["duplication-complexity", "stack-flutter", "ui-robustness"],
      "scope": "file"
    },
    {
      "title": "Replace null assertions with explicit null handling",
      "rule": "Avoid the !! operator. Prefer safe calls, Elvis (?:), early returns, or explicit exceptions with a clear message.",
      "why_is_this_important": "Null assertions crash at runtime and hide intent. Explicit handling makes failure modes predictable and testable.",
      "severity": "High",
      "bad_example": "val len = name!!.length",
      "good_example": "val len = name?.length ?: return Result.failure(IllegalArgumentException(\"name is required\"))",
      "examples": [
        {
          "snippet": "user!!.email",
          "isCorrect": false
        },
        {
          "snippet": "val email = user?.email ?: throw IllegalStateException(\"missing email\")",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "c81e063e-e18e-482b-af53-0279c58f2229",
      "buckets": ["error-handling", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Use idiomatic Kotlin null-handling patterns",
      "rule": "Use safe calls (?.), the Elvis operator (?:), let/run/also for scoped handling, and early returns for invalid input.",
      "why_is_this_important": "Idiomatic null handling reduces branching, clarifies intent, and prevents NullPointerException.",
      "severity": "Medium",
      "bad_example": "if (user != null) { process(user) } else { /* later... */ }",
      "good_example": "val name = user?.name ?: return\nuser.email?.let { sendEmail(it) }",
      "examples": [
        {
          "snippet": "if (x != null) do(x) else {/*...*/}",
          "isCorrect": false
        },
        {
          "snippet": "x?.let { do(it) } ?: return",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "00f7bcd7-1433-4703-a659-6b87e1500171",
      "buckets": ["error-handling", "readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Add comprehensive input validation",
      "rule": "Validate required parameters at boundaries using require/requireNotNull or explicit validators; fail fast with actionable messages.",
      "why_is_this_important": "Prevents propagation of invalid state and reduces downstream error handling complexity.",
      "severity": "High",
      "bad_example": "fun createUser(email: String?) { save(email!!) }",
      "good_example": "fun createUser(email: String?) {\n  require(!email.isNullOrBlank()) { \"email is required\" }\n  save(email)\n}",
      "examples": [
        {
          "snippet": "fun f(id: String?) { use(id!!) }",
          "isCorrect": false
        },
        {
          "snippet": "fun f(id: String?) { require(!id.isNullOrBlank()) { \"id required\" } }",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "4ae868e3-76f6-4e81-aa0f-af22cb39b4d6",
      "buckets": ["error-handling", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Wrap blocking operations with proper dispatchers",
      "rule": "Run blocking I/O and CPU-intensive work inside withContext(Dispatchers.IO) or Dispatchers.Default respectively. Never block the main thread.",
      "why_is_this_important": "Misplaced blocking work causes ANRs, thread starvation, and throughput collapse.",
      "severity": "High",
      "bad_example": "suspend fun read(): String = File(\"/tmp/x\").readText() // runs on caller context",
      "good_example": "suspend fun read(): String = withContext(Dispatchers.IO) { File(\"/tmp/x\").readText() }",
      "examples": [
        {
          "snippet": "runBlocking { heavyBlocking() } // on main",
          "isCorrect": false
        },
        {
          "snippet": "withContext(Dispatchers.IO) { heavyBlocking() }",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "a86d0120-365a-4241-939d-97e70f4d92ac",
      "buckets": ["concurrency-safety", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Add try-catch blocks around external API calls",
      "rule": "Surround network and IPC calls with try/catch for IOException and timeouts; map to domain errors and log context.",
      "why_is_this_important": "External systems fail unpredictably; explicit handling avoids crashes and improves resilience.",
      "severity": "High",
      "bad_example": "val body = http.get(url).body.string()",
      "good_example": "try {\n  val body = http.get(url)\n  handle(body)\n} catch (e: IOException) {\n  logger.error(\"http failed\", mapOf(\"url\" to url, \"err\" to e))\n  return Result.failure(e)\n}",
      "examples": [
        {
          "snippet": "client.execute(req).body!!",
          "isCorrect": false
        },
        {
          "snippet": "try { client.execute(req) } catch (e: IOException) { /* map/log */ }",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "44eb9fab-8b87-4ba4-9478-8917370b5427",
      "buckets": [
        "error-handling",
        "observability-logging",
        "resilience-retries-idempotency"
      ],
      "scope": "file"
    },
    {
      "title": "Handle database operation exceptions",
      "rule": "Catch and map DB exceptions (e.g., SQLIntegrityConstraintViolationException) to domain results; always close resources with use { }.",
      "why_is_this_important": "Prevents leaks and turns low-level failures into meaningful responses.",
      "severity": "High",
      "bad_example": "val rs = stmt.executeQuery(sql)\n// no try/catch, no close",
      "good_example": "try {\n  dataSource.connection.use { c ->\n    c.prepareStatement(sql).use { ps -> ps.executeUpdate() }\n  }\n} catch (e: SQLException) {\n  logger.error(\"db error\", mapOf(\"sql\" to sql, \"err\" to e))\n  return Result.failure(e)\n}",
      "examples": [
        {
          "snippet": "stmt.executeQuery(q) // unchecked",
          "isCorrect": false
        },
        {
          "snippet": "try { ds.connection.use { /*...*/ } } catch (e: SQLException) { /* map */ }",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "6ed5c86f-589d-4de7-a25b-18e66f5ae7da",
      "buckets": ["database-query-performance", "error-handling"],
      "scope": "file"
    },
    {
      "title": "Add timeout configuration for external clients",
      "rule": "Set connect, read, and write timeouts for HTTP/DB/queue clients; never rely on indefinite waits.",
      "why_is_this_important": "Bounded time prevents resource exhaustion and cascaded failures.",
      "severity": "Medium",
      "bad_example": "val client = OkHttpClient() // defaults only",
      "good_example": "val client = OkHttpClient.Builder()\n  .connectTimeout(5, TimeUnit.SECONDS)\n  .readTimeout(10, TimeUnit.SECONDS)\n  .writeTimeout(10, TimeUnit.SECONDS)\n  .build()",
      "examples": [
        {
          "snippet": "HttpClient()",
          "isCorrect": false
        },
        {
          "snippet": "HttpClient(timeout = 10_000)",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "7bc58594-8e35-4c7e-ba23-632682818ba7",
      "buckets": ["resilience-retries-idempotency"],
      "scope": "file"
    },
    {
      "title": "Replace unsafe type casts with explicit checking",
      "rule": "Use safe casts (as?) with null checks or require statements instead of unchecked as.",
      "why_is_this_important": "Avoids ClassCastException at runtime and clarifies expected types.",
      "severity": "Medium",
      "bad_example": "val u = obj as User",
      "good_example": "val u = obj as? User ?: return Result.failure(IllegalArgumentException(\"expected User\"))",
      "examples": [
        {
          "snippet": "(x as List<String>).size",
          "isCorrect": false
        },
        {
          "snippet": "val xs = x as? List<String> ?: emptyList()",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "7b43edb9-a4df-4c56-9792-76a469a31535",
      "buckets": ["error-handling", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Optimize loops with early termination",
      "rule": "Exit loops as soon as the goal is achieved using break/return or use any/find/count short-circuiting operations.",
      "why_is_this_important": "Reduces unnecessary work and improves clarity.",
      "severity": "Low",
      "bad_example": "var found = false\nfor (x in xs) { if (x == target) { found = true } }",
      "good_example": "val found = xs.any { it == target }",
      "examples": [
        {
          "snippet": "for (x in xs) { if (ok(x)) do(x) } // no break",
          "isCorrect": false
        },
        {
          "snippet": "xs.firstOrNull(::ok)?.let(::do)",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "47413b3e-b892-461d-99b6-993b4ec97c20",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Use map lookups instead of iteration",
      "rule": "Prefer direct Map access over linear scans when looking up by key.",
      "why_is_this_important": "Reduces complexity from O(n) to O(1) average and simplifies code.",
      "severity": "Medium",
      "bad_example": "var v: Int? = null\nfor ((k, value) in map) if (k == id) v = value",
      "good_example": "val v = map[id]",
      "examples": [
        {
          "snippet": "list.find { it.first == k }?.second",
          "isCorrect": false
        },
        {
          "snippet": "map[k]",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "5833a17d-f283-42ef-ae51-ca5bc9cd4258",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Cache expensive operations and API tokens",
      "rule": "Memoize expensive results (regex, serializers, tokens) and refresh on expiry using a thread-safe cache.",
      "why_is_this_important": "Reduces latency and external rate-limit pressure.",
      "severity": "Medium",
      "bad_example": "fun token() = client.fetchToken() // every call",
      "good_example": "val tokenCache = ConcurrentHashMap<String, Token>()\nfun token(): Token = tokenCache.computeIfAbsent(\"auth\") { client.fetchToken() }",
      "examples": [
        {
          "snippet": "Regex(pattern) // each use",
          "isCorrect": false
        },
        {
          "snippet": "val re by lazy { Regex(pattern) }",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "cadb442a-2d98-4fa8-bc70-ff670e015c24",
      "buckets": [
        "caching-strategy",
        "concurrency-safety",
        "performance-efficiency"
      ],
      "scope": "file"
    },
    {
      "title": "Use periodic tasks over per-entry scheduling",
      "rule": "For large sets, prefer a periodic sweep job rather than spawning one job/timer per item.",
      "why_is_this_important": "Prevents scheduler overload and simplifies failure handling.",
      "severity": "Medium",
      "bad_example": "items.forEach { scheduleAt(it.time) { process(it) } }",
      "good_example": "launch { while (isActive) { processDueItems(); delay(60_000) } }",
      "examples": [
        {
          "snippet": "Timer() per item",
          "isCorrect": false
        },
        {
          "snippet": "single periodic coroutine that scans",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "d916ab11-e6e5-4d62-8a7d-3ff2a2954993",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Define constants to avoid re-creation",
      "rule": "Hoist constant Regex/Formatters/Collections into top-level vals or companion objects; avoid recreating in hot paths.",
      "why_is_this_important": "Cuts allocations and GC pressure.",
      "severity": "Low",
      "bad_example": "fun ok(s: String) = Regex(\"^[a-z]+$\").matches(s)",
      "good_example": "private val LOWER = Regex(\"^[a-z]+$\")\nfun ok(s: String) = LOWER.matches(s)",
      "examples": [
        {
          "snippet": "SimpleDateFormat(pattern) each call",
          "isCorrect": false
        },
        {
          "snippet": "val fmt = DateTimeFormatter.ISO_INSTANT",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "2aa8fe07-a8f2-4be7-97e7-1829f66b2e90",
      "buckets": ["performance-efficiency", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Use atomic operations for cache initialization",
      "rule": "Protect one-time initializations with Mutex or atomic operations (computeIfAbsent/compareAndSet).",
      "why_is_this_important": "Prevents duplicate work and race conditions under concurrency.",
      "severity": "Medium",
      "bad_example": "if (cache[key] == null) { cache[key] = build() }",
      "good_example": "val v = cache.computeIfAbsent(key) { build() }",
      "examples": [
        {
          "snippet": "if (x == null) x = init()",
          "isCorrect": false
        },
        {
          "snippet": "mutex.withLock { x ?: init().also { x = it } }",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "eaef4111-704e-4d78-b502-894c93e1a8ca",
      "buckets": ["caching-strategy", "concurrency-safety"],
      "scope": "file"
    },
    {
      "title": "Add database indexes for query performance",
      "rule": "Index columns used in filters/joins/sorts; validate plans for slow queries and add composite indexes as needed.",
      "why_is_this_important": "Eliminates full scans and reduces latency at scale.",
      "severity": "Medium",
      "bad_example": "SELECT * FROM tx WHERE user_id = ? ORDER BY created_at DESC",
      "good_example": "-- create index (user_id, created_at DESC)\nCREATE INDEX idx_tx_user_created ON tx(user_id, created_at DESC);",
      "examples": [
        {
          "snippet": "WHERE email = ? -- no index",
          "isCorrect": false
        },
        {
          "snippet": "CREATE INDEX idx_user_email ON users(email)",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "bba6b0cf-05f4-4ad4-9fa4-312813f05401",
      "buckets": ["database-query-performance"],
      "scope": "file"
    },
    {
      "title": "Extract duplicated interaction handlers",
      "rule": "Factor common interaction/message handling into reusable functions or classes with parameters for the differing bits.",
      "why_is_this_important": "Reduces copy-paste and keeps behavior consistent.",
      "severity": "Medium",
      "bad_example": "fun onLike(){ /* parse, auth, log */ }\nfun onShare(){ /* parse, auth, log */ }",
      "good_example": "fun handle(action: Action, payload: Payload){ parse(payload); auth(); log(action) }",
      "examples": [
        {
          "snippet": "two handlers with identical setup",
          "isCorrect": false
        },
        {
          "snippet": "shared handle(action, payload)",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "f5b9dd73-ae98-4414-8352-c996dba5f76c",
      "buckets": ["duplication-complexity", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Consolidate duplicated permission checking logic",
      "rule": "Provide a single permission check API (e.g., can(user, action, resource)) and reuse it across layers.",
      "why_is_this_important": "Prevents drift and subtle authorization bugs.",
      "severity": "High",
      "bad_example": "if (user.role == \"admin\") { /*...*/ } // scattered",
      "good_example": "if (!authz.can(user, Action.Edit, doc)) return forbidden()",
      "examples": [
        {
          "snippet": "role checks inline",
          "isCorrect": false
        },
        {
          "snippet": "authz.can(user, Action.Delete, obj)",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "d762b4a1-a7c7-4d51-b964-6744427ae8d8",
      "buckets": [
        "duplication-complexity",
        "module-architecture",
        "security-hardening"
      ],
      "scope": "file"
    },
    {
      "title": "Refactor duplicated modal creation logic",
      "rule": "Create factories/builders for repeated dialog/modal construction with configurable parameters.",
      "why_is_this_important": "Keeps UI consistent and reduces boilerplate.",
      "severity": "Low",
      "bad_example": "Dialog(title, msg, positive, negative) // repeated setup everywhere",
      "good_example": "fun confirmDialog(title: String, message: String) =\n  Dialog(title, message, positive = \"OK\", negative = \"Cancel\")",
      "examples": [
        {
          "snippet": "Dialog(...); Dialog(...)",
          "isCorrect": false
        },
        {
          "snippet": "confirmDialog(\"Delete?\", \"Are you sure?\")",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "df608b75-866d-4d2c-841e-14a18e80c671",
      "buckets": ["duplication-complexity", "ui-robustness"],
      "scope": "file"
    },
    {
      "title": "Extract common parallel processing patterns",
      "rule": "Encapsulate coroutine parallelization (map async/awaitAll, limited concurrency) into utilities.",
      "why_is_this_important": "Avoids repeated, error-prone concurrency code and enforces limits.",
      "severity": "Medium",
      "bad_example": "val results = items.map { async { work(it) } }.map { it.await() } // inline everywhere",
      "good_example": "suspend fun <T,R> parallel(xs: List<T>, limit: Int = 16, f: suspend (T) -> R): List<R> { /*...*/ }\nval results = parallel(items) { work(it) }",
      "examples": [
        {
          "snippet": "items.map { async{...} }",
          "isCorrect": false
        },
        {
          "snippet": "parallel(items) { work(it) }",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "cf9e2107-9686-4e14-9faa-90b53bb16198",
      "buckets": [
        "concurrency-safety",
        "duplication-complexity",
        "performance-efficiency"
      ],
      "scope": "file"
    },
    {
      "title": "Consolidate message update functions",
      "rule": "Provide a single updater that applies deltas/patches to messages rather than multiple ad-hoc updaters.",
      "why_is_this_important": "Prevents inconsistent states and race conditions.",
      "severity": "Low",
      "bad_example": "fun setStatus(m: Msg, s: String) { m.status = s }\nfun setSeen(m: Msg, v: Boolean) { m.seen = v }",
      "good_example": "fun update(m: Msg, patch: MsgPatch) { /* apply atomically */ }",
      "examples": [
        {
          "snippet": "many tiny setters",
          "isCorrect": false
        },
        {
          "snippet": "single update(m, patch)",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "ff82dabb-3219-4f16-84d7-fef17dba78ad",
      "buckets": ["duplication-complexity", "module-architecture"],
      "scope": "file"
    },
    {
      "title": "Extract contract processing logic",
      "rule": "Move domain-specific processing (validation, normalization, mapping) into cohesive services instead of scattering it across controllers/handlers.",
      "why_is_this_important": "Improves testability and reuse; controllers become thin.",
      "severity": "Medium",
      "bad_example": "controller.save() { validate(); map(); calculate(); repo.insert() }",
      "good_example": "service.processAndSave(contract)\n// service encapsulates validate/map/calc",
      "examples": [
        {
          "snippet": "controller does all business logic",
          "isCorrect": false
        },
        {
          "snippet": "service layer encapsulates rules",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "78c3988f-9bc5-4b38-8815-d95d6464e196",
      "buckets": ["module-architecture", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Refactor nested flatMap chains",
      "rule": "Break deep map/flatMap chains into named suspend functions or use runCatching/Result for clearer composition.",
      "why_is_this_important": "Improves readability and error propagation.",
      "severity": "Medium",
      "bad_example": "a()?.flatMap { b(it) }?.flatMap { c(it) }?.map { d(it) }",
      "good_example": "suspend fun step1() = a()\nsuspend fun step2(x: X) = b(x)\nval out = step1()?.let { step2(it) }",
      "examples": [
        {
          "snippet": "aaa.flatMap{...}.flatMap{...}.map{...}",
          "isCorrect": false
        },
        {
          "snippet": "extract steps into named functions",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "2f3eb427-9772-4c39-9b32-43ba4ce0ef11",
      "buckets": ["error-handling", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Extract validation logic to separate methods",
      "rule": "Centralize validation in dedicated functions/objects and reuse; return typed errors.",
      "why_is_this_important": "Avoids duplication and inconsistent rules.",
      "severity": "Medium",
      "bad_example": "if (name.isBlank()) error(\"bad\") // repeated",
      "good_example": "object Validators { fun name(n: String) = require(n.isNotBlank()) { \"name required\" } }",
      "examples": [
        {
          "snippet": "inline ifs in multiple places",
          "isCorrect": false
        },
        {
          "snippet": "Validators.name(name)",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "943a26fb-c2fa-418c-a195-12bd47995c90",
      "buckets": [
        "duplication-complexity",
        "error-handling",
        "readability-refactor"
      ],
      "scope": "file"
    },
    {
      "title": "Define hardcoded strings as shared constants",
      "rule": "Replace magic strings with constants or enums sealed classes; keep them in a single source of truth.",
      "why_is_this_important": "Prevents typos and eases refactors and localization.",
      "severity": "Low",
      "bad_example": "if (status == \"active\") { /*...*/ }",
      "good_example": "object Status { const val ACTIVE = \"active\" }\nif (status == Status.ACTIVE) { /*...*/ }",
      "examples": [
        {
          "snippet": "\"ready\" // repeated literal",
          "isCorrect": false
        },
        {
          "snippet": "const val READY = \"ready\"",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "969056f6-f488-4aec-8e2f-ff0e0c048f66",
      "buckets": [
        "duplication-complexity",
        "maintainability",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "title": "Use message keys for error messages",
      "rule": "Emit stable message keys (for i18n/observability) and resolve user-facing text via localization layers.",
      "why_is_this_important": "Enables translations and consistent client handling.",
      "severity": "Low",
      "bad_example": "throw IllegalArgumentException(\"User not found in system\")",
      "good_example": "throw DomainException(code = \"user.not_found\")",
      "examples": [
        {
          "snippet": "error(\"Payment failed due to ...\")",
          "isCorrect": false
        },
        {
          "snippet": "error(code = \"payment.failed\")",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "bf461c09-0a4e-47cc-8d1b-0ddf12662cb4",
      "buckets": ["internationalization-i18n", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Standardize parameter naming conventions",
      "rule": "Use lowerCamelCase for parameters; prefer full, descriptive names over abbreviations.",
      "why_is_this_important": "Improves readability and API clarity.",
      "severity": "Low",
      "bad_example": "fun fetch(uId: String) { }",
      "good_example": "fun fetch(userId: String) { }",
      "examples": [
        {
          "snippet": "fun save(cn: String)",
          "isCorrect": false
        },
        {
          "snippet": "fun save(clientName: String)",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "2ffbedcb-42ee-4df1-a210-61bd94ff286d",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Make properties private for encapsulation",
      "rule": "Default to private visibility; expose the minimal surface and prefer val with private set when mutation is needed.",
      "why_is_this_important": "Reduces coupling and prevents accidental misuse.",
      "severity": "Medium",
      "bad_example": "class Svc { var client: Client? = null }",
      "good_example": "class Svc(private val client: Client) { val state: State get() = _state }",
      "examples": [
        {
          "snippet": "var items = mutableListOf<Int>() // public",
          "isCorrect": false
        },
        {
          "snippet": "private val items = mutableListOf<Int>()",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "8f9fd57d-d379-4c63-bde1-0585bde105c9",
      "buckets": [
        "module-architecture",
        "security-hardening",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "title": "Rename functions to reflect their purpose",
      "rule": "Function names must describe side effects and return values (e.g., fetchUser vs. process).",
      "why_is_this_important": "Improves discoverability and reduces misuses.",
      "severity": "Low",
      "bad_example": "fun process(u: String) = http.get(u)",
      "good_example": "fun fetchUser(userId: String): User = api.getUser(userId)",
      "examples": [
        {
          "snippet": "doStuff()",
          "isCorrect": false
        },
        {
          "snippet": "calculateChecksum()",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "d7622ab0-d9b4-4824-b719-2556fbae5a54",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "title": "Add comprehensive error logging",
      "rule": "Log failures with operation name, key identifiers, and exception; prefer structured logging (fields).",
      "why_is_this_important": "Accelerates debugging and enables reliable alerting.",
      "severity": "High",
      "bad_example": "println(e)",
      "good_example": "logger.error(\"payment_failed\", mapOf(\"orderId\" to orderId, \"userId\" to userId, \"err\" to e))",
      "examples": [
        {
          "snippet": "e.printStackTrace()",
          "isCorrect": false
        },
        {
          "snippet": "logger.error(\"op_failed\", mapOf(\"op\" to op, \"err\" to e))",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "193f70da-b51f-4d69-9034-fa2ae588ac7d",
      "buckets": ["error-handling", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Log warning for unhandled cases",
      "rule": "In when/else or default branches, log a warning with the unexpected value to surface silent failures.",
      "why_is_this_important": "Makes edge cases visible before they become incidents.",
      "severity": "Medium",
      "bad_example": "when (status) {\n  \"ok\" -> {}\n  else -> {}\n}",
      "good_example": "when (status) {\n  \"ok\" -> {}\n  else -> logger.warn(\"unknown_status\", mapOf(\"status\" to status))\n}",
      "examples": [
        {
          "snippet": "else -> {}",
          "isCorrect": false
        },
        {
          "snippet": "else -> logger.warn(\"unexpected\", mapOf(\"v\" to v))",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "446d30dc-d80a-43a2-936c-c4129336193e",
      "buckets": ["error-handling", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Enhance logging with structured format",
      "rule": "Prefer key-value or JSON logging over string concatenation; include correlation/request IDs from CoroutineContext when available.",
      "why_is_this_important": "Structured logs are machine-parsable for search and alerting.",
      "severity": "Medium",
      "bad_example": "logger.info(\"User \" + id + \" logged in\")",
      "good_example": "logger.info(\"user_login\", mapOf(\"userId\" to id, \"requestId\" to reqId))",
      "examples": [
        {
          "snippet": "logger.error(\"fail: $e\")",
          "isCorrect": false
        },
        {
          "snippet": "logger.error(\"op_failed\", mapOf(\"err\" to e))",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "f5e9a43c-3072-4a59-ad99-704a69df6fb1",
      "buckets": ["observability-logging"],
      "scope": "file"
    },
    {
      "title": "Centralize key generation logic",
      "rule": "Generate cache/Redis keys through a single utility with clear namespaces and versioning.",
      "why_is_this_important": "Prevents collisions and simplifies migrations/invalidations.",
      "severity": "Medium",
      "bad_example": "val key = \"user:\" + id",
      "good_example": "object Keys { fun user(id: String) = \"v1:user:$id\" }",
      "examples": [
        {
          "snippet": "\"session:\" + sid",
          "isCorrect": false
        },
        {
          "snippet": "Keys.session(sid)",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "3073a97c-598c-4ee7-9599-25e5ef7dff35",
      "buckets": [
        "caching-strategy",
        "duplication-complexity",
        "maintainability"
      ],
      "scope": "file"
    },
    {
      "title": "Add cleanup mechanisms for resource management",
      "rule": "Ensure close/stop/dispose is called for resources (clients, channels, scopes) using use{} or try/finally; cancel coroutines on shutdown.",
      "why_is_this_important": "Prevents leaks and dangling tasks, enabling graceful shutdowns.",
      "severity": "High",
      "bad_example": "val channel = Channel<Int>() // never closed",
      "good_example": "val job = scope.launch { /* work */ }\ntry { /* use */ } finally { job.cancel(); channel.close() }",
      "examples": [
        {
          "snippet": "HttpClient() // no close",
          "isCorrect": false
        },
        {
          "snippet": "client.use { /* requests */ }",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "187db191-27cc-49b3-a244-a2f5a7394b77",
      "buckets": ["maintainability", "ui-robustness"],
      "scope": "file"
    },
    {
      "title": "Pin exact versions with digests for base images",
      "rule": "Base images must be pinned to an exact version and content digest (@sha256) to guarantee reproducible builds and supply-chain integrity.",
      "why_is_this_important": "Tags can be retagged and drift over time. Digests lock the image content, preventing unexpected changes and reducing the blast radius of registry compromises.",
      "severity": "High",
      "bad_example": "FROM node:20-alpine\n# or\nFROM ubuntu:22.04",
      "good_example": "FROM node:20.11.1-alpine@sha256:3c8b...deadbeef\n# Tag + digest; digest is the source of truth",
      "examples": [
        {
          "snippet": "FROM nginx:latest",
          "isCorrect": false
        },
        {
          "snippet": "FROM nginx:1.25.5@sha256:abcd...",
          "isCorrect": true
        }
      ],
      "language": "Dockerfile",
      "uuid": "c15a147d-a9d7-42ea-b527-ee0bf11a65bf",
      "buckets": ["container-docker-hygiene", "dependency-supply-chain"],
      "scope": "file"
    },
    {
      "title": "Pin specific patch versions for Node.js",
      "rule": "Use a fully qualified Node.js tag including major.minor.patch, not floating majors/minors.",
      "why_is_this_important": "Floating tags (e.g., 20, 20-alpine) can change behavior between builds, causing non-deterministic failures.",
      "severity": "Medium",
      "bad_example": "FROM node:20-alpine",
      "good_example": "FROM node:20.11.1-alpine",
      "examples": [
        {
          "snippet": "FROM node:20",
          "isCorrect": false
        },
        {
          "snippet": "FROM node:20.11.1",
          "isCorrect": true
        }
      ],
      "language": "Dockerfile",
      "uuid": "613d11a1-6742-40a4-9635-0bb5e1bad199",
      "buckets": ["container-docker-hygiene", "dependency-supply-chain"],
      "scope": "file"
    },
    {
      "title": "Extract hardcoded versions to centralized configuration",
      "rule": "Parameterize tool/runtime versions via ARGs (and CI build args) instead of hardcoding them across multiple Dockerfiles.",
      "why_is_this_important": "Centralization prevents configuration drift and makes upgrades a single-point change.",
      "severity": "Medium",
      "bad_example": "FROM node:20.11.1-alpine\nENV YARN_VERSION=4.1.0\nRUN corepack enable && corepack prepare yarn@4.1.0 --activate",
      "good_example": "ARG NODE_VERSION=20.11.1\nFROM node:${NODE_VERSION}-alpine\nARG YARN_VERSION\nRUN corepack enable && corepack prepare yarn@${YARN_VERSION} --activate",
      "examples": [
        {
          "snippet": "ENV PNPM_VERSION=8.15.0 # repeated in many files",
          "isCorrect": false
        },
        {
          "snippet": "ARG PNPM_VERSION\nRUN corepack prepare pnpm@${PNPM_VERSION} --activate",
          "isCorrect": true
        }
      ],
      "language": "Dockerfile",
      "uuid": "00dd0e17-9202-4c41-a31b-56c7fb0433d9",
      "buckets": [
        "container-docker-hygiene",
        "duplication-complexity",
        "maintainability"
      ],
      "scope": "file"
    },
    {
      "title": "Consolidate duplicate Dockerfiles",
      "rule": "Deduplicate near-identical Dockerfiles by sharing a common base stage (multi-stage) and varying only service-specific steps via build args/targets.",
      "why_is_this_important": "Reduces maintenance overhead and prevents divergent build behavior between services.",
      "severity": "Medium",
      "bad_example": "# api/Dockerfile and worker/Dockerfile copy-pasted with minor changes",
      "good_example": "FROM node:20.11.1-alpine AS base\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --omit=dev\n\nFROM base AS build\nCOPY . .\nRUN npm run build\n\n# Select service at build time\nARG SERVICE\nFROM gcr.io/distroless/nodejs20 AS runtime\nWORKDIR /app\nCOPY --from=build /app/services/${SERVICE}/dist ./\nCMD [\"server.js\"]",
      "examples": [
        {
          "snippet": "# Two Dockerfiles differing only in CMD",
          "isCorrect": false
        },
        {
          "snippet": "ARG SERVICE && multi-stage targets share a common base",
          "isCorrect": true
        }
      ],
      "language": "Dockerfile",
      "uuid": "399e05cb-a38c-4ac6-808d-930efd14f1f9",
      "buckets": ["container-docker-hygiene", "duplication-complexity"],
      "scope": "file"
    },
    {
      "title": "Implement multi-stage builds for production",
      "rule": "Use a builder stage for toolchains/dev deps and a minimal runtime stage that contains only runtime artifacts.",
      "why_is_this_important": "Significantly reduces image size and attack surface by excluding compilers and dev dependencies from production.",
      "severity": "High",
      "bad_example": "FROM node:20.11.1-alpine\nWORKDIR /app\nCOPY . .\nRUN npm ci && npm run build\nCMD [\"node\",\"dist/index.js\"]  # dev deps & toolchain remain",
      "good_example": "FROM node:20.11.1-alpine AS build\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM gcr.io/distroless/nodejs20 AS runtime\nWORKDIR /app\nCOPY --from=build /app/dist ./\nCOPY --from=build /app/package*.json ./\nCMD [\"index.js\"]",
      "examples": [
        {
          "snippet": "Single-stage image with devDependencies included",
          "isCorrect": false
        },
        {
          "snippet": "Two-stage build: build -> minimal runtime",
          "isCorrect": true
        }
      ],
      "language": "Dockerfile",
      "uuid": "b6be785a-c528-459a-a58f-d6cb2e86ac29",
      "buckets": ["container-docker-hygiene", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Optimize Docker layer caching strategy",
      "rule": "Copy and install dependencies before application sources; ensure .dockerignore excludes node_modules and build outputs.",
      "why_is_this_important": "Maximizes cache hits for dependency layers, speeding up incremental builds.",
      "severity": "Medium",
      "bad_example": "COPY . .\nRUN npm ci\nRUN npm run build",
      "good_example": "COPY package*.json ./\nRUN npm ci --omit=dev\nCOPY . .\nRUN npm run build\n# .dockerignore excludes node_modules/, dist/, .git/",
      "examples": [
        {
          "snippet": "COPY . . && npm ci",
          "isCorrect": false
        },
        {
          "snippet": "COPY package*.json ./ && npm ci && COPY . .",
          "isCorrect": true
        }
      ],
      "language": "Dockerfile",
      "uuid": "f9af3bd5-fbbf-4e90-add9-b05a82fe3327",
      "buckets": ["container-docker-hygiene", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Remove unnecessary files from production images",
      "rule": "Ship only runtime artifacts (binaries, compiled assets, minimal configs). Exclude tests, sources, docs, and dev tooling.",
      "why_is_this_important": "Smaller images pull faster, have fewer vulnerabilities, and reduce secrets exposure.",
      "severity": "Medium",
      "bad_example": "COPY . /app  # includes tests, .ts, docs, configs",
      "good_example": "COPY --from=build /app/dist /app\nRUN npm prune --omit=dev\n# Include only what the process needs (configs, static assets)",
      "examples": [
        {
          "snippet": "COPY . /srv",
          "isCorrect": false
        },
        {
          "snippet": "COPY --from=build /out /srv && prune dev deps",
          "isCorrect": true
        }
      ],
      "language": "Dockerfile",
      "uuid": "9cfc92f0-6772-4f97-9300-58adafa81cf2",
      "buckets": ["container-docker-hygiene", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Clean up build tools after dependency installation",
      "rule": "If a single-stage image must build native deps, remove compilers/headers after install and clear package caches in the same layer.",
      "why_is_this_important": "Avoids shipping unnecessary toolchains and reduces image size and CVE surface.",
      "severity": "Medium",
      "bad_example": "RUN apk add --no-cache build-base python3 && npm ci\n# toolchain left installed",
      "good_example": "RUN apk add --no-cache build-base python3 \\\n && npm ci \\\n && apk del build-base python3 \\\n && rm -rf /var/cache/apk/*",
      "examples": [
        {
          "snippet": "apt-get install build-essential && npm ci",
          "isCorrect": false
        },
        {
          "snippet": "apt-get update && apt-get install ... && npm ci && apt-get purge -y ... && rm -rf /var/lib/apt/lists/*",
          "isCorrect": true
        }
      ],
      "language": "Dockerfile",
      "uuid": "1a0136cc-59d0-43a1-89ab-ea0832cdc7dd",
      "buckets": ["container-docker-hygiene", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Choose appropriate npm commands for build stages",
      "rule": "Use `npm ci` for reproducible installs in build stages; in runtime, run `npm prune --omit=dev` or install with `--omit=dev`.",
      "why_is_this_important": "Consistent dependency graphs improve reproducibility and reduce bloat in the final image.",
      "severity": "Medium",
      "bad_example": "RUN npm install  # mutates lockfile and installs dev deps",
      "good_example": "RUN npm ci\n# later in runtime stage\nRUN npm prune --omit=dev",
      "examples": [
        {
          "snippet": "RUN npm install",
          "isCorrect": false
        },
        {
          "snippet": "RUN npm ci && npm prune --omit=dev",
          "isCorrect": true
        }
      ],
      "language": "Dockerfile",
      "uuid": "127aafc3-1309-40f6-b697-46c59cf72e30",
      "buckets": ["container-docker-hygiene", "dependency-supply-chain"],
      "scope": "file"
    },
    {
      "title": "Add explicit environment variable checks",
      "rule": "Validate required runtime env vars at container start via an entrypoint script; exit with a clear message on missing values.",
      "why_is_this_important": "Fast-fails misconfigurations and prevents undefined behavior in production.",
      "severity": "High",
      "bad_example": "CMD [\"node\",\"dist/index.js\"]  # assumes GITHUB_TOKEN exists",
      "good_example": "COPY docker/entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"node\",\"dist/index.js\"]\n\n# entrypoint.sh\n# !/usr/bin/env sh\nset -eu\n: \"${GITHUB_TOKEN:?GITHUB_TOKEN is required}\"\nexec \"$@\"",
      "examples": [
        {
          "snippet": "exec app # no checks",
          "isCorrect": false
        },
        {
          "snippet": ": \"${API_KEY:?API_KEY is required}\" && exec app",
          "isCorrect": true
        }
      ],
      "language": "Dockerfile",
      "uuid": "dc734eef-f7f1-47e0-bfd1-80e2c7237974",
      "buckets": [
        "config-environment",
        "container-docker-hygiene",
        "error-handling"
      ],
      "scope": "file"
    },
    {
      "uuid": "7c3bc63a-249c-4bdb-bc27-9e3fd9d2832e",
      "title": "Use detailed prop definitions",
      "rule": "In committed code, prop definitions should always be as detailed as possible, specifying at least type(s).",
      "why_is_this_important": "Detailed prop definitions document the component's API, making it easy to understand how to use the component. In development, Vue will warn if incorrectly formatted props are provided, helping to catch potential errors.",
      "severity": "High",
      "bad_example": "// This is only OK when prototyping\nprops: ['status']",
      "good_example": "props: {\n  status: String\n}\n\n// Even better!\nprops: {\n  status: {\n    type: String,\n    required: true,\n    validator: value => {\n      return [\n        'syncing',\n        'synced',\n        'version-conflict',\n        'error'\n      ].includes(value)\n    }\n  }\n}",
      "examples": [
        {
          "snippet": "props: ['status']",
          "isCorrect": false
        },
        {
          "snippet": "props: {\n  status: String\n}",
          "isCorrect": true
        },
        {
          "snippet": "props: {\n  status: {\n    type: String,\n    required: true,\n    validator: value => {\n      return [\n        'syncing',\n        'synced',\n        'version-conflict',\n        'error'\n      ].includes(value)\n    }\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions", "api-contracts-versioning"],
      "scope": "file"
    },
    {
      "uuid": "b00e5eb9-1467-47bc-8d22-e021e684c3f7",
      "title": "Use keyed `v-for`",
      "rule": "`key` with `v-for` is *always* required on components to maintain internal component state down the subtree. Even for elements, it's good practice for predictable behavior like object constancy in animations.",
      "why_is_this_important": "Using unique keys helps Vue optimize DOM rendering by tracking node identities, especially when the order of items in a list changes. This is important for components to preserve their state and for elements to ensure predictable behavior in scenarios like animations.",
      "severity": "High",
      "bad_example": "<ul>\n  <li v-for=\"todo in todos\">\n    {{ todo.text }}\n  </li>\n</ul>",
      "good_example": "<ul>\n  <li\n    v-for=\"todo in todos\"\n    :key=\"todo.id\"\n  >\n    {{ todo.text }}\n  </li>\n</ul>",
      "examples": [
        {
          "snippet": "<ul>\n  <li v-for=\"todo in todos\">\n    {{ todo.text }}\n  </li>\n</ul>",
          "isCorrect": false
        },
        {
          "snippet": "<ul>\n  <li\n    v-for=\"todo in todos\"\n    :key=\"todo.id\"\n  >\n    {{ todo.text }}\n  </li>\n</ul>",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "0680f783-a106-4a8d-873f-dc5f2d6c3445",
      "title": "Avoid `v-if` with `v-for`",
      "rule": "Never use `v-if` on the same element as `v-for`.",
      "why_is_this_important": "When Vue processes directives, `v-if` has a higher priority than `v-for`. This can lead to errors because the `v-if` directive might be evaluated before the `v-for` has access to the iteration variables.",
      "severity": "High",
      "bad_example": "<ul>\n  <li\n    v-for=\"user in users\"\n    v-if=\"user.isActive\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  </li>\n</ul>",
      "good_example": "<ul>\n  <li\n    v-for=\"user in activeUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  </li>\n</ul>\n\n<ul>\n  <template v-for=\"user in users\" :key=\"user.id\">\n    <li v-if=\"user.isActive\">\n      {{ user.name }}\n    </li>\n  </template>\n</ul>",
      "examples": [
        {
          "snippet": "<ul>\n  <li\n    v-for=\"user in users\"\n    v-if=\"user.isActive\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  </li>\n</ul>",
          "isCorrect": false
        },
        {
          "snippet": "<ul>\n  <li\n    v-for=\"user in activeUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  </li>\n</ul>",
          "isCorrect": true
        },
        {
          "snippet": "<ul>\n  <template v-for=\"user in users\" :key=\"user.id\">\n    <li v-if=\"user.isActive\">\n      {{ user.name }}\n    </li>\n  </template>\n</ul>",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["performance-efficiency", "stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "73e2a1c3-c7cf-4373-8479-3f2f5b9987a1",
      "title": "Use component-scoped styling",
      "rule": "For applications, styles in a top-level `App` component and in layout components may be global, but all other components should always be scoped. This can be achieved through CSS modules, class-based strategies like BEM, or the `scoped` attribute in Single-File Components.",
      "why_is_this_important": "Consistent scoping ensures that styles only apply to the intended components, preventing unintended side effects and making styles easier to manage, especially in large projects or when using third-party components.",
      "severity": "High",
      "bad_example": "<template>\n  <button class=\"btn btn-close\">×</button>\n</template>\n<style>\n.btn-close {\n  background-color: red;\n}\n</style>",
      "good_example": "<template>\n  <button class=\"button button-close\">×</button>\n</template>\n\n<style scoped>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n.button-close {\n  background-color: red;\n}\n</style>\n\n<template>\n  <button :class=\"[$style.button, $style.buttonClose]\">×</button>\n</template>\n\n<style module>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n.buttonClose {\n  background-color: red;\n}\n</style>\n\n<template>\n  <button class=\"c-Button c-Button--close\">×</button>\n</template>\n\n<style>\n.c-Button {\n  border: none;\n  border-radius: 2px;\n}\n.c-Button--close {\n  background-color: red;\n}\n</style>",
      "examples": [],
      "language": "jsts",
      "buckets": ["module-architecture", "stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "6475ecf8-6206-441a-ab88-e4d4c0b71c57",
      "title": "Component files",
      "rule": "Whenever a build system is available to concatenate files, each component should be in its own file.",
      "why_is_this_important": "This helps you to more quickly find a component when you need to edit it or review how to use it.",
      "severity": "Medium",
      "bad_example": "app.component('TodoList', {\n //...\n})\napp.component('TodoItem', {\n //...\n})",
      "good_example": "components/\n|- TodoList.js\n|- TodoItem.js\n\ncomponents/\n|- TodoList.vue\n|- TodoItem.vue",
      "examples": [],
      "language": "jsts",
      "buckets": ["module-architecture", "stack-vue"],
      "scope": "file"
    },
    {
      "uuid": "b83cd985-12e9-4cae-9e63-a74eeaf3f895",
      "title": "Single-file component filename casing",
      "rule": "Filenames of Single-File Components should either be always PascalCase or always kebab-case.",
      "why_is_this_important": "PascalCase works best with autocompletion in code editors, as it's consistent with how we reference components in JS(X) and templates. However, mixed case filenames can sometimes create issues on case-insensitive file systems, which is why kebab-case is also perfectly acceptable.",
      "severity": "Medium",
      "bad_example": "components/\n|- mycomponent.vue\n\ncomponents/\n|- myComponent.vue",
      "good_example": "components/\n|- MyComponent.vue\n\ncomponents/\n|- my-component.vue",
      "examples": [
        {
          "snippet": "mycomponent.vue",
          "isCorrect": false
        },
        {
          "snippet": "myComponent.vue",
          "isCorrect": false
        },
        {
          "snippet": "MyComponent.vue",
          "isCorrect": true
        },
        {
          "snippet": "my-component.vue",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "1f195751-37d3-46e5-a86e-f0debae66301",
      "title": "Base component names",
      "rule": "Base components (a.k.a. presentational, dumb, or pure components) that apply app-specific styling and conventions should all begin with a specific prefix, such as `Base`, `App`, or `V`.",
      "why_is_this_important": "These components lay the foundation for consistent styling and behavior. Organizing them with a prefix makes them easy to identify and list together alphabetically. It also avoids arbitrary prefixes for simple wrappers and allows for easier global registration.",
      "severity": "Medium",
      "bad_example": "components/\n|- MyButton.vue\n|- VueTable.vue\n|- Icon.vue",
      "good_example": "components/\n|- BaseButton.vue\n|- BaseTable.vue\n|- BaseIcon.vue\n\ncomponents/\n|- AppButton.vue\n|- AppTable.vue\n|- AppIcon.vue\n\ncomponents/\n|- VButton.vue\n|- VTable.vue\n|- VIcon.vue",
      "examples": [],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "7728a16a-909a-4112-ae96-c877dbc60510",
      "title": "Tightly coupled component names",
      "rule": "Child components that are tightly coupled with their parent should include the parent component name as a prefix.",
      "why_is_this_important": "If a component only makes sense in the context of a single parent component, that relationship should be evident in its name. This also keeps related files next to each other in editors.",
      "severity": "Medium",
      "bad_example": "components/\n|- TodoList.vue\n|- TodoItem.vue\n|- TodoButton.vue\n\ncomponents/\n|- SearchSidebar.vue\n|- NavigationForSearchSidebar.vue",
      "good_example": "components/\n|- TodoList.vue\n|- TodoListItem.vue\n|- TodoListItemButton.vue\n\ncomponents/\n|- SearchSidebar.vue\n|- SearchSidebarNavigation.vue",
      "examples": [],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "2eed163a-e80c-430d-b35b-5b8eac0cb3c8",
      "title": "Order of words in component names",
      "rule": "Component names should start with the highest-level (often most general) words and end with descriptive modifying words.",
      "why_is_this_important": "This makes it easier to see the relationships between components at a glance, especially when editors organize files alphabetically.",
      "severity": "Medium",
      "bad_example": "components/\n|- ClearSearchButton.vue\n|- ExcludeFromSearchInput.vue\n|- LaunchOnStartupCheckbox.vue\n|- RunSearchButton.vue\n|- SearchInput.vue\n|- TermsCheckbox.vue",
      "good_example": "components/\n|- SearchButtonClear.vue\n|- SearchButtonRun.vue\n|- SearchInputQuery.vue\n|- SearchInputExcludeGlob.vue\n|- SettingsCheckboxTerms.vue\n|- SettingsCheckboxLaunchOnStartup.vue",
      "examples": [],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "23923c1f-6762-48e3-82a2-b747179d55a3",
      "title": "Self-closing components",
      "rule": "Components with no content should be self-closing in Single-File Components, string templates, and JSX - but never in in-DOM templates.",
      "why_is_this_important": "Self-closing components communicate that they not only have no content, but are *meant* to have no content. It also makes your code cleaner.",
      "severity": "Medium",
      "bad_example": "\n<MyComponent></MyComponent>\n\n\n<my-component/>",
      "good_example": "\n<MyComponent/>\n\n\n<my-component></my-component>",
      "examples": [
        {
          "snippet": "<MyComponent></MyComponent> ",
          "isCorrect": false
        },
        {
          "snippet": "<my-component/> ",
          "isCorrect": false
        },
        {
          "snippet": "<MyComponent/> ",
          "isCorrect": true
        },
        {
          "snippet": "<my-component></my-component> ",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "ac84b896-f0ee-4a57-bd65-d34dc92018ae",
      "title": "Component name casing in templates",
      "rule": "In most projects, component names should always be PascalCase in Single-File Components and string templates - but kebab-case in in-DOM templates.",
      "why_is_this_important": "PascalCase allows editors to autocomplete component names and is more visually distinct from single-word HTML elements. However, if you've already invested heavily in kebab-case, using it everywhere is also acceptable for consistency.",
      "severity": "Medium",
      "bad_example": "\n<mycomponent/>\n\n\n<myComponent/>\n\n\n<MyComponent></MyComponent>",
      "good_example": "\n<MyComponent/>\n\n\n<my-component></my-component>\n\nOR\n\n\n<my-component></my-component>",
      "examples": [
        {
          "snippet": "<mycomponent/> ",
          "isCorrect": false
        },
        {
          "snippet": "<MyComponent></MyComponent> ",
          "isCorrect": false
        },
        {
          "snippet": "<MyComponent/> ",
          "isCorrect": true
        },
        {
          "snippet": "<my-component></my-component> ",
          "isCorrect": true
        },
        {
          "snippet": "<my-component></my-component> ",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "a8ff5907-7002-42a0-b800-0af437478372",
      "title": "Component name casing in JS/JSX",
      "rule": "Component names in JS/JSX should always be PascalCase, though they may be kebab-case inside strings for simpler applications that only use global component registration through `app.component`.",
      "why_is_this_important": "PascalCase is the convention for classes and constructors in JavaScript. Vue components have instances, so PascalCase makes sense. It also helps distinguish components from HTML elements in JSX and templates. Kebab-case is acceptable in strings for global registration.",
      "severity": "Medium",
      "bad_example": "app.component('myComponent', { /*... */ })\n\nimport myComponent from './MyComponent.vue'\n\nexport default {\n name: 'myComponent'\n //...\n}\n\nexport default {\n name: 'my-component'\n //...\n}",
      "good_example": "app.component('MyComponent', { /*... */ })\n\napp.component('my-component', { /*... */ })\n\nimport MyComponent from './MyComponent.vue'\n\nexport default {\n name: 'MyComponent'\n //...\n}",
      "examples": [
        {
          "snippet": "app.component('myComponent', { /*...*/ })",
          "isCorrect": false
        },
        {
          "snippet": "import myComponent from './MyComponent.vue'",
          "isCorrect": false
        },
        {
          "snippet": "export default { name: 'my-component' }",
          "isCorrect": false
        },
        {
          "snippet": "app.component('MyComponent', { /*...*/ })",
          "isCorrect": true
        },
        {
          "snippet": "app.component('my-component', { /*...*/ })",
          "isCorrect": true
        },
        {
          "snippet": "import MyComponent from './MyComponent.vue'",
          "isCorrect": true
        },
        {
          "snippet": "export default { name: 'MyComponent' }",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "ae7eb030-2272-47a6-b410-db211f15ec30",
      "title": "Full-word component names",
      "rule": "Component names should prefer full words over abbreviations.",
      "why_is_this_important": "Autocompletion in editors makes writing longer names easy, and the clarity they provide is invaluable. Uncommon abbreviations should always be avoided.",
      "severity": "Medium",
      "bad_example": "components/\n|- SdSettings.vue\n|- UProfOpts.vue",
      "good_example": "components/\n|- StudentDashboardSettings.vue\n|- UserProfileOptions.vue",
      "examples": [],
      "language": "jsts",
      "buckets": ["readability-refactor", "stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "5838484a-0947-4f9f-af62-215f79eb941a",
      "title": "Prop name casing",
      "rule": "Prop names should always use camelCase during declaration. When used inside in-DOM templates, props should be kebab-cased. Single-File Components templates and JSX can use either kebab-case or camelCase props. Casing should be consistent.",
      "why_is_this_important": "Consistency in prop casing improves code readability and maintainability.",
      "severity": "Medium",
      "bad_example": "props: {\n 'greeting-text': String\n}\n\n// for in-DOM templates\n<welcome-message greetingText=\"hi\"></welcome-message>",
      "good_example": "props: {\n greetingText: String\n}\n\n// for SFC - please make sure your casing is consistent throughout the project\n// you can use either convention but we don't recommend mixing two different casing styles\n<WelcomeMessage greeting-text=\"hi\"/>\n// or\n<WelcomeMessage greetingText=\"hi\"/>\n\n// for in-DOM templates\n<welcome-message greeting-text=\"hi\"></welcome-message>",
      "examples": [],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions", "api-contracts-versioning"],
      "scope": "file"
    },
    {
      "uuid": "839d423e-7a59-4afd-86f1-bc7efbd9bbc3",
      "title": "Multi-attribute elements",
      "rule": "Elements with multiple attributes should span multiple lines, with one attribute per line.",
      "why_is_this_important": "This improves readability, similar to splitting objects with multiple properties over multiple lines in JavaScript.",
      "severity": "Medium",
      "bad_example": "<img src=\"https://vuejs.org/images/logo.png\" alt=\"Vue Logo\">\n\n<MyComponent foo=\"a\" bar=\"b\" baz=\"c\"/>",
      "good_example": "<img\n src=\"https://vuejs.org/images/logo.png\"\n alt=\"Vue Logo\"\n>\n\n<MyComponent\n foo=\"a\"\n bar=\"b\"\n baz=\"c\"\n/>",
      "examples": [
        {
          "snippet": "<img src=\"...\" alt=\"...\">",
          "isCorrect": false
        },
        {
          "snippet": "<MyComponent foo=\"a\" bar=\"b\" baz=\"c\"/>",
          "isCorrect": false
        },
        {
          "snippet": "<img\n src=\"...\"\n alt=\"...\"\n>",
          "isCorrect": true
        },
        {
          "snippet": "<MyComponent\n foo=\"a\"\n bar=\"b\"\n baz=\"c\"\n/>",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["readability-refactor", "stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "ffaa73bb-30f3-4d4e-a02f-73759f27d835",
      "title": "Simple expressions in templates",
      "rule": "Component templates should only include simple expressions, with more complex expressions refactored into computed properties or methods.",
      "why_is_this_important": "Complex expressions in templates make them less declarative and harder to maintain. Moving logic into computed properties or methods allows for reuse and easier testing.",
      "severity": "Medium",
      "bad_example": "{{\n fullName.split(' ').map((word) => {\n   return word.toUpperCase() + word.slice(1)\n }).join(' ')\n}}",
      "good_example": "\n{{ normalizedFullName }}\n\n// The complex expression has been moved to a computed property\ncomputed: {\n normalizedFullName() {\n   return this.fullName.split(' ')\n    .map(word => word.toUpperCase() + word.slice(1))\n    .join(' ')\n }\n}",
      "examples": [
        {
          "snippet": "{{ firstName.trim().toUpperCase() }}",
          "isCorrect": false
        },
        {
          "snippet": "{{ formattedName }}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["readability-refactor", "stack-vue"],
      "scope": "file"
    },
    {
      "uuid": "a3f0b68f-5902-4491-bf68-f3306346b24e",
      "title": "Simple computed properties",
      "rule": "Complex computed properties should be split into as many simpler properties as possible.",
      "why_is_this_important": "Simpler, well-named computed properties are easier to test, read, and adapt to changing requirements.",
      "severity": "Medium",
      "bad_example": "computed: {\n price() {\n   const basePrice = this.manufactureCost / (1 - this.profitMargin)\n   return (\n     basePrice -\n     basePrice * (this.discountPercent || 0)\n   )\n }\n}",
      "good_example": "computed: {\n basePrice() {\n   return this.manufactureCost / (1 - this.profitMargin)\n },\n discount() {\n   return this.basePrice * (this.discountPercent || 0)\n },\n finalPrice() {\n   return this.basePrice - this.discount\n }\n}",
      "examples": [
        {
          "snippet": "computed: {\n  complexValue() { /* multiple operations */ }\n}",
          "isCorrect": false
        },
        {
          "snippet": "computed: {\n  valuePart1() { /* operation 1 */ },\n  valuePart2() { /* operation 2 */ },\n  finalValue() { return this.valuePart1 + this.valuePart2; }\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["duplication-complexity", "readability-refactor", "stack-vue"],
      "scope": "file"
    },
    {
      "uuid": "2dfd3728-00f2-4ce3-8c86-3a81731de4a3",
      "title": "Quoted attribute values",
      "rule": "Non-empty HTML attribute values should always be inside quotes (single or double, whichever is not used in JS).",
      "why_is_this_important": "This practice avoids issues with spaces in attribute values and makes them more readable.",
      "severity": "Medium",
      "bad_example": "<input type=text>\n\n<AppSidebar :style={width:sidebarWidth+'px'}>",
      "good_example": "<input type=\"text\">\n\n<AppSidebar :style=\"{ width: sidebarWidth + 'px' }\">",
      "examples": [
        {
          "snippet": "<input type=text>",
          "isCorrect": false
        },
        {
          "snippet": "<input type=\"text\">",
          "isCorrect": true
        },
        {
          "snippet": "<input type='text'>",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "e7dbcd9b-e2e3-4701-9744-3f826be26841",
      "title": "Directive shorthands",
      "rule": "Directive shorthands (`:` for `v-bind:`, `@` for `v-on:` and `#` for `v-slot`) should be used always or never.",
      "why_is_this_important": "Using directive shorthands consistently improves code conciseness and readability.",
      "severity": "Medium",
      "bad_example": "<input\n v-bind:value=\"newTodoText\"\n :placeholder=\"newTodoInstructions\"\n>\n\n<input\n v-on:input=\"onInput\"\n @focus=\"onFocus\"\n>\n\n<template v-slot:header>\n  <h1>Here might be a page title</h1>\n</template>\n<template #footer>\n  <p>Here's some contact info</p>\n</template>",
      "good_example": "// Always use shorthands:\n<input\n :value=\"newTodoText\"\n :placeholder=\"newTodoInstructions\"\n>\n<input\n @input=\"onInput\"\n @focus=\"onFocus\"\n>\n<template #header>\n  <h1>Here might be a page title</h1>\n</template>\n<template #footer>\n  <p>Here's some contact info</p>\n</template>\n\n// Never use shorthands:\n<input\n v-bind:value=\"newTodoText\"\n v-bind:placeholder=\"newTodoInstructions\"\n>\n<input\n v-on:input=\"onInput\"\n v-on:focus=\"onFocus\"\n>\n<template v-slot:header>\n  <h1>Here might be a page title</h1>\n</template>\n<template v-slot:footer>\n  <p>Here's some contact info</p>\n</template>",
      "examples": [
        {
          "snippet": "<input v-bind:value=\"text\" :placeholder=\"ph\">",
          "isCorrect": false
        },
        {
          "snippet": "<input :value=\"text\" :placeholder=\"ph\">",
          "isCorrect": true
        },
        {
          "snippet": "<input v-bind:value=\"text\" v-bind:placeholder=\"ph\">",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "9159d31f-8a2c-4922-8540-7fc41e5ed4a0",
      "title": "vue/attribute-hyphenation",
      "rule": "Enforces consistent usage of hyphenated (kebab-case) or non-hyphenated (camelCase) attribute names on custom components in templates.",
      "why_is_this_important": "HTML attributes are traditionally hyphenated and case-insensitive. While Vue allows camelCase props to be bound using kebab-case in templates, consistency in the template itself (always using kebab-case or always using camelCase where possible) improves readability and aligns with chosen project conventions.",
      "severity": "Medium",
      "bad_example": "// Config: 'always' (hyphenated)\n<MyComponent myProp=\"value\"></MyComponent>\n\n// Config: 'never' (camelCase)\n<MyComponent my-prop=\"value\"></MyComponent>",
      "good_example": "// Config: 'always' (hyphenated)\n<MyComponent my-prop=\"value\"></MyComponent>\n\n// Config: 'never' (camelCase)\n<MyComponent myProp=\"value\"></MyComponent>",
      "examples": [
        {
          "snippet": "// Config: 'always'\n<MyComponent myProp=\"value\"></MyComponent>",
          "isCorrect": false
        },
        {
          "snippet": "// Config: 'never'\n<MyComponent my-prop=\"value\"></MyComponent>",
          "isCorrect": false
        },
        {
          "snippet": "// Config: 'always'\n<MyComponent my-prop=\"value\"></MyComponent>",
          "isCorrect": true
        },
        {
          "snippet": "// Config: 'never'\n<MyComponent myProp=\"value\"></MyComponent>",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "7141404f-636d-4ea6-a028-482fadafd675",
      "title": "Component/instance options order",
      "rule": "Component options (like `name`, `props`, `data`, `computed`, `methods`, lifecycle hooks, etc.) should be ordered consistently according to a predefined sequence.",
      "why_is_this_important": "A consistent order for component options makes components easier to read, navigate, and maintain. Developers know where to find specific options (e.g., `methods` are always after lifecycle hooks), reducing cognitive load and improving predictability.",
      "severity": "Low",
      "bad_example": "// BAD: Inconsistent order\nexport default {\n  methods: {... },\n  data() {... },\n  props: {... },\n  name: 'MyComponent'\n}",
      "good_example": "// GOOD: Consistent order (Example based on Vue Style Guide recommendation)\nexport default {\n  name: 'MyComponent',\n  props: {... },\n  emits: [... ],\n  data() {... },\n  computed: {... },\n  watch: {... },\n  // Lifecycle Hooks (e.g., created, mounted)\n  created() {... },\n  mounted() {... },\n  methods: {... }\n}",
      "examples": [
        {
          "snippet": "export default {\n  methods: { fn1(){/*...*/} },\n  data() { return { count: 0 }; },\n  props: ['id'],\n  name: 'InconsistentOrder'\n}",
          "isCorrect": false
        },
        {
          "snippet": "export default {\n  name: 'ConsistentOrder',\n  props: ['id'],\n  data() { return { count: 0 }; },\n  //... other options in order...\n  methods: { fn1(){/*...*/} }\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "a04963c1-3df0-426a-96db-a7d602aa5157",
      "title": "Element attribute order",
      "rule": "Attributes within an element tag (including components) should be ordered consistently according to a predefined sequence (e.g., definitions, list rendering, conditionals, unique attributes, binding, events, content).",
      "why_is_this_important": "Consistent attribute ordering improves the readability of templates, especially for elements with many attributes or directives. It makes it easier to quickly scan and understand the element's behavior and properties.",
      "severity": "Low",
      "bad_example": "<MyComponent\n  @click=\"handleClick\"\n  v-if=\"isVisible\"\n  :prop-a=\"valueA\"\n  id=\"my-comp\"\n  v-for=\"item in items\"\n  :key=\"item.id\"\n/>",
      "good_example": "// GOOD: Consistent order (Example based on Vue Style Guide recommendation)\n<MyComponent\n  v-for=\"item in items\" // List Rendering\n  :key=\"item.id\"\n  v-if=\"isVisible\"      // Conditionals\n  id=\"my-comp\"          // Global Awareness\n  :prop-a=\"valueA\"      // Other Attributes\n  @click=\"handleClick\"   // Events\n/>",
      "examples": [
        {
          "snippet": "<MyComponent @click=\"fn\" v-if=\"ok\" :prop=\"val\" id=\"c1\"/>",
          "isCorrect": false
        },
        {
          "snippet": "<MyComponent id=\"c1\" v-if=\"ok\" :prop=\"val\" @click=\"fn\"/>",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "2b7c79b1-4697-4f98-9b2e-8f7e349d0296",
      "title": "Empty lines in component/instance options",
      "rule": "Consider adding one empty line between multi-line properties (like complex `props`, `computed`, `methods`, `watch` objects) within the component options, especially in large components.",
      "why_is_this_important": "Adding vertical whitespace can improve readability and scannability in components with many options or complex, multi-line definitions. It visually separates distinct blocks of options.",
      "severity": "Low",
      "bad_example": "// BAD (Potentially hard to read in large components)\nexport default {\n  props: {\n    propA: { /* multi-line */ },\n    propB: String\n  },\n  computed: {\n    compA() { /* multi-line */ },\n    compB() { /* multi-line */ }\n  },\n  methods: {\n    methodA() { /* multi-line */ }\n  }\n}",
      "good_example": "// GOOD (Improved readability with spacing)\nexport default {\n  props: {\n    propA: { /* multi-line */ },\n\n    propB: String\n  },\n\n  computed: {\n    compA() { /* multi-line */ },\n\n    compB() { /* multi-line */ }\n  },\n\n  methods: {\n    methodA() { /* multi-line */ }\n  }\n}",
      "examples": [
        {
          "snippet": "props: {\n  value: { /*...*/ },\n  focused: { /*...*/ }\n},\ncomputed: {\n  formattedValue() { /*...*/ },\n  inputClasses() { /*...*/ }\n}",
          "isCorrect": true
        },
        {
          "snippet": "props: {\n  value: { /*...*/ },\n\n  focused: { /*...*/ }\n},\n\ncomputed: {\n  formattedValue() { /*...*/ },\n\n  inputClasses() { /*...*/ }\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["readability-refactor", "stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "e6329ab7-6364-4664-89ec-cb651eb6276b",
      "title": "Single-file component top-level element order",
      "rule": "The top-level tags (`<script>`, `<template>`, `<style>`) in Single-File Components (.vue files) should be ordered consistently across the project. A common convention is `<script>`, then `<template>`, then `<style>`.",
      "why_is_this_important": "Consistency in the order of top-level tags makes SFCs easier to navigate and read. Developers know where to look for the script logic, template structure, and styles within any component file.",
      "severity": "Low",
      "bad_example": "\n<style>/*... */</style>\n<script>/*... */</script>\n<template>...</template>\n\n\n<script>/*... */</script>\n<template>...</template>\n<style>/*... */</style>\n\n<template>...</template>\n<script>/*... */</script>\n<style>/*... */</style>",
      "good_example": "\n\n<script>/*... */</script>\n<template>...</template>\n<style>/*... */</style>\n\n<script>/*... */</script>\n<template>...</template>\n<style>/*... */</style>\n\n\n\n<template>...</template>\n<script>/*... */</script>\n<style>/*... */</style>\n\n<template>...</template>\n<script>/*... */</script>\n<style>/*... */</style>",
      "examples": [
        {
          "snippet": "<style>...</style>\n<script>...</script>\n<template>...</template>",
          "isCorrect": false
        },
        {
          "snippet": "<script>...</script>\n<template>...</template>\n<style>...</style>",
          "isCorrect": true
        },
        {
          "snippet": "<template>...</template>\n<script>...</script>\n<style>...</style>",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "30ab36a3-1a5f-45e8-b6fd-05a3f93570de",
      "title": "Element selectors with `scoped`",
      "rule": "Avoid using element selectors (e.g., `button {... }`) directly within `<style scoped>`. Prefer class selectors.",
      "why_is_this_important": "When using `scoped`, Vue adds a unique data attribute selector (e.g., `[data-v-xxxxxxx]`) to each rule. Element selectors combined with attribute selectors (e.g., `button[data-v-xxxxxxx]`) can be significantly less performant in browsers compared to class selectors combined with attribute selectors (e.g., `.my-button[data-v-xxxxxxx]`). Using classes improves CSS performance.",
      "severity": "Low",
      "bad_example": "<template>\n  <button>×</button>\n</template>\n<style scoped>\n/* BAD: Element selector in scoped style */\nbutton {\n  background-color: red;\n}\n</style>",
      "good_example": "<template>\n  <button class=\"btn-close\">×</button>\n</template>\n<style scoped>\n/* GOOD: Class selector in scoped style */\n.btn-close {\n  background-color: red;\n}\n</style>",
      "examples": [
        {
          "snippet": "<style scoped>\nbutton { /* Noncompliant: Element selector */\n  background-color: red;\n}\n</style>",
          "isCorrect": false
        },
        {
          "snippet": "<style scoped>\n.btn-close { /* Compliant: Class selector */\n  background-color: red;\n}\n</style>",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["performance-efficiency", "stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "c3353429-6aa2-4a72-8f35-145067b9adc8",
      "title": "Implicit parent-child communication",
      "rule": "Avoid implicit communication between parent and child components, such as using `this.$parent`, `this.$root`, or directly mutating props received from the parent. Prefer explicit communication via props down and events up.",
      "why_is_this_important": "Implicit communication makes component relationships and data flow hard to understand and debug. It tightly couples components, making them brittle and difficult to refactor or reuse. The 'props down, events up' pattern creates a clear, predictable data flow that is easier to maintain.",
      "severity": "Medium",
      "bad_example": "// BAD: Child accessing parent directly\nthis.$parent.doSomething();\n\n// BAD: Child mutating prop (See vue/no-mutating-props rule)\nexport default {\n  props: ['todo'],\n  template: '<input v-model=\"todo.text\">' // Mutates todo.text\n}",
      "good_example": "// GOOD: Child emits event, parent listens\n// Child component:\nthis.$emit('delete-item', this.itemId);\n\n// Parent template:\n<child-component @delete-item=\"handleDelete\"></child-component>\n\n// GOOD: Using v-model for two-way binding (syntactic sugar for prop + event)\n// Child component:\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue'],\n  template: '<input :value=\"modelValue\" @input=\"$emit(\\'update:modelValue\\', $event.target.value)\">'\n}",
      "examples": [],
      "language": "jsts",
      "buckets": ["module-architecture", "stack-vue"],
      "scope": "file"
    },
    {
      "uuid": "4cba19e7-b8cc-4033-8f61-3a504de9f4fb",
      "title": "Avoid using the comma operator",
      "rule": "Detect occurrences of the comma operator in expressions. The comma operator can make code harder to read and debug, as it executes multiple expressions but only returns the value of the last one.",
      "why_is_this_important": "The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand. This behavior is often confusing and rarely intended, reducing code readability and increasing the potential for bugs. Clearer alternatives using separate statements are preferred.",
      "severity": "Low",
      "bad_example": "let x = 0;\nconst y = (x++, x + 1); // Bad: y becomes 2, x becomes 1. Confusing.",
      "good_example": "let x = 0;\nx++;\nconst y = x + 1; // Good: Clear separation of steps.",
      "examples": [
        {
          "snippet": "i = a += 2, a + b;",
          "isCorrect": false
        },
        {
          "snippet": "a += 2;\ni = a + b;",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "62dde711-38c2-4c3f-90f2-5f79d5e92e55",
      "title": "Prefer `const` over `let`/`var` in Vue components",
      "rule": "Use `const` for all references by default within Vue components (e.g., imports, non-reassigned variables, refs obtained via `ref()`). Use `let` only when reassignment of the variable itself is necessary (rare for state). Avoid `var` entirely.",
      "why_is_this_important": "Promotes immutability and predictability, reducing unexpected state changes in components. `const` signals that the variable binding won't be reassigned (though the value it holds, like an object or ref's `.value`, might still be mutable). `let` clearly indicates intentional reassignment. Avoids `var`'s confusing function scoping and hoisting issues.",
      "severity": "Low",
      "bad_example": "export default {\n  data() {\n    var message = 'Hello'; // Bad: using var\n    return { message };\n  },\n  methods: {\n    update() {\n      var counter = 0; // Bad: using var\n      counter++;\n    }\n  }\n}",
      "good_example": "import { ref, computed } from 'vue';\n\nconst componentName = 'MyComponent'; // Good: const for constant\n\nexport default {\n  name: componentName,\n  props: {\n    initialCount: { type: Number, default: 0 }\n  },\n  setup(props) {\n    const count = ref(props.initialCount); // Good: const for the ref itself\n    let loopCounter; // Good: let if reassignment needed (e.g., in loop)\n\n    const doubleCount = computed(() => count.value * 2); // Good: const for computed\n\n    const increment = () => { \n      count.value++; // Modifying ref's value, not the const binding\n    };\n\n    for (loopCounter = 0; loopCounter < 5; loopCounter++) { /*... */ }\n\n    return { count, doubleCount, increment };\n  }\n}",
      "examples": [],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "8931f5c0-b7cc-4076-8eb8-e8faf76b7232",
      "title": "Use object/array shorthands and spread syntax",
      "rule": "Utilize object method shorthands, property value shorthands, and computed property names when defining objects (e.g., in `data`, `computed`, `methods`). Prefer object spread syntax (`...`) over `Object.assign` for shallow copies or merging objects.",
      "why_is_this_important": "These ES6 features lead to more concise, readable, and maintainable code, especially within Vue component options which are often object-heavy. Spread syntax provides an immutable way to create new objects or arrays based on existing ones, fitting well with state update patterns.",
      "severity": "Low",
      "bad_example": "export default {\n  data: function() {\n    return { count: 0 };\n  },\n  methods: {\n    increment: function() {\n      this.count++;\n    }\n  },\n  computed: {\n    doubleCount: function() {\n      return this.count * 2;\n    }\n  }\n}\n\n// Merging objects with Object.assign\nconst newOptions = Object.assign({}, oldOptions, { enabled: true });",
      "good_example": "const name = 'MyComponent';\n\nexport default {\n  name, // Property value shorthand\n  data() { // Method shorthand\n    return { count: 0 };\n  },\n  methods: {\n    increment() { // Method shorthand\n      this.count++;\n    }\n  },\n  computed: {\n    doubleCount() { // Method shorthand\n      return this.count * 2;\n    },\n   () { // Computed property name\n      return 'loaded';\n    }\n  }\n}\n\n// Merging objects with spread syntax\nconst newOptions = {...oldOptions, enabled: true };",
      "examples": [
        {
          "snippet": "data: function() { return {}; }",
          "isCorrect": false
        },
        {
          "snippet": "data() { return {}; }",
          "isCorrect": true
        },
        {
          "snippet": "const name = 'Comp';\nexport default { name: name };",
          "isCorrect": false
        },
        {
          "snippet": "const name = 'Comp';\nexport default { name };",
          "isCorrect": true
        },
        {
          "snippet": "const newArr = oldArr.concat(newItem);",
          "isCorrect": false
        },
        {
          "snippet": "const newArr = [...oldArr, newItem]; // Good: Array spread",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "a5b39eb0-399f-4ac6-80ee-c52ed49cca69",
      "title": "Use destructuring for props and objects",
      "rule": "Use object and array destructuring to access properties from objects (like `props`, `this`, context in `setup`) or elements from arrays, especially when accessing multiple items.",
      "why_is_this_important": "Destructuring leads to cleaner and more concise code by reducing repetition when accessing object properties or array elements. It's particularly useful in Vue's `setup` function for extracting refs, props, and context, or within methods/computed properties accessing `this`.",
      "severity": "Low",
      "bad_example": "export default {\n  props: ['user', 'settings'],\n  computed: {\n    userName() {\n      return this.user.name;\n    },\n    theme() {\n      return this.settings.theme;\n    }\n  },\n  methods: {\n    save() {\n      const name = this.user.name;\n      const theme = this.settings.theme;\n      //... use name and theme\n    }\n  }\n}",
      "good_example": "import { toRefs } from 'vue';\n\nexport default {\n  props: { user: Object, settings: Object },\n  setup(props) {\n    // Good: Destructure props (use toRefs for reactivity if needed)\n    const { user, settings } = toRefs(props);\n    const { emit } = getCurrentInstance(); // Destructure context\n\n    const userName = computed(() => user.value.name);\n    const theme = computed(() => settings.value.theme);\n\n    const save = () => {\n      // Access destructured refs directly\n      console.log(user.value.name, settings.value.theme);\n      emit('save');\n    };\n\n    return { userName, theme, save };\n  },\n  // Alternative in Options API methods:\n  methods: {\n    display() {\n      const { name } = this.user; // Destructure from this\n      const { theme } = this.settings;\n      console.log(name, theme);\n    }\n  }\n}",
      "examples": [
        {
          "snippet": "const name = this.user.name;\nconst email = this.user.email;",
          "isCorrect": false
        },
        {
          "snippet": "const { name, email } = this.user;",
          "isCorrect": true
        },
        {
          "snippet": "function processCoords(coords) {\n  const x = coords;\n  const y = coords;\n}",
          "isCorrect": false
        },
        {
          "snippet": "function processCoords([x, y]) {\n  //...\n}",
          "isCorrect": true
        },
        {
          "snippet": "setup(props, context) {\n  const user = props.user;\n  const emit = context.emit;\n}",
          "isCorrect": false
        },
        {
          "snippet": "setup({ user }, { emit }) {\n  //...\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["readability-refactor", "stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "d4c1deb6-47ca-41fe-8bc2-c703fdb4e1c7",
      "title": "Prefer arrow functions for callbacks",
      "rule": "Use arrow functions (`=>`) for anonymous functions like callbacks (e.g., in lifecycle hooks, watchers, event handlers, array methods) instead of the `function` keyword, especially when needing lexical `this`.",
      "why_is_this_important": "Arrow functions inherit the `this` context from their surrounding scope (lexical `this`). This is crucial in Vue components, as it avoids the need for `_this = this` or `.bind(this)` when accessing the component instance (`this`) inside callbacks like `setTimeout`, `setInterval`, or asynchronous operations within methods/hooks.",
      "severity": "Low",
      "bad_example": "export default {\n  data() { return { count: 0 }; },\n  mounted() {\n    setTimeout(function() {\n      // BAD: 'this' here is not the component instance\n      // this.count++; // This would likely fail or refer to window\n      console.log('Timer finished');\n    }, 1000);\n  }\n}",
      "good_example": "export default {\n  data() { return { count: 0 }; },\n  mounted() {\n    setTimeout(() => {\n      // GOOD: Arrow function inherits 'this' from mounted hook\n      this.count++; \n      console.log('Timer finished, count is:', this.count);\n    }, 1000);\n  },\n  computed: {\n    // GOOD: Concise syntax for simple computed\n    doubleCount: vm => vm.count * 2 \n  }\n}",
      "examples": [],
      "language": "jsts",
      "buckets": ["readability-refactor", "stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "7ba1266f-6fcb-406a-bca7-1893736eb55b",
      "title": "Use ES Modules (`import`/`export`)",
      "rule": "Always use ES Modules (`import` and `export`) for managing dependencies and organizing code in Vue applications. Avoid non-standard module systems or global namespace pollution.",
      "why_is_this_important": "ES Modules are the standard JavaScript module system, crucial for code organization, reusability, tree-shaking (dead code elimination), and managing dependencies in modern front-end development, including Vue SFCs and JavaScript modules.",
      "severity": "Medium",
      "bad_example": "// BAD: Relying on globals or older module patterns\nvar MyUtil = require('./utils'); // CommonJS (less ideal in modern Vue)\n\nwindow.myGlobalComponent = { /*... */ };",
      "good_example": "// GOOD: Using ES Modules\n\n// utils.js\nexport function formatData(data) { /*... */ }\nexport const UtilityConstant = 42;\n\n// MyComponent.vue\nimport { formatData, UtilityConstant } from './utils.js';\nimport AnotherComponent from './AnotherComponent.vue';\n\nexport default {\n  components: { AnotherComponent },\n  setup() {\n    const formatted = formatData(/*... */);\n    console.log(UtilityConstant);\n    //...\n  }\n}",
      "examples": [
        {
          "snippet": "// utils.js\nmodule.exports = { format() {} };\n// component.js\nvar utils = require('./utils');",
          "isCorrect": false
        },
        {
          "snippet": "// utils.js\nexport function format() {}\n// component.js\nimport { format } from './utils';",
          "isCorrect": true
        },
        {
          "snippet": "// api.js\nconst api = { fetch() {} };\nexport default api;\n// component.js\nimport myApi from './api';",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["module-architecture", "stack-vue", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "9ae511a1-dea6-4a29-95e7-42b3e28495e3",
      "title": "Use object literals for event payloads",
      "rule": "When emitting custom events with data using `$emit`, pass an object literal as the payload instead of a raw primitive value, especially if there's a chance more data might be needed later.",
      "why_is_this_important": "Passing an object payload makes the event emission more extensible. If you later need to add more data to the event, you can add new properties to the object without breaking existing listeners expecting a specific primitive type. It improves the maintainability and future-proofing of component communication.",
      "severity": "Low",
      "bad_example": "// BAD: Emitting a raw value\nthis.$emit('item-selected', itemId); \n\n// Listener might break if we later change to emit an object:\n// handleItemSelected(itemId) { /*... */ }",
      "good_example": "// GOOD: Emitting an object payload\nthis.$emit('item-selected', { \n  itemId: itemId,\n  itemType: 'product' \n});\n\n// Listener is more robust:\n// handleItemSelected(payload) { \n//   console.log(payload.itemId, payload.itemType);\n// }",
      "examples": [
        {
          "snippet": "this.$emit('user-updated', userId);",
          "isCorrect": false
        },
        {
          "snippet": "this.$emit('user-updated', { userId: userId, status: 'active' });",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["api-conventions", "maintainability", "stack-vue"],
      "scope": "file"
    },
    {
      "uuid": "25e5457a-e784-496f-9845-baa00b1f5fa5",
      "title": "Disabling Vue.js built-in escaping is security-sensitive",
      "rule": "Avoid using directives or features that bypass Vue's built-in HTML escaping mechanisms, such as the `v-html` directive, unless the content is known to be safe or has been properly sanitized.",
      "why_is_this_important": "Vue automatically escapes dynamic content bound using `{{ }}` syntax to prevent Cross-Site Scripting (XSS) attacks. Using `v-html` renders raw HTML, potentially executing malicious scripts if the content originates from untrusted user input. Disabling this safety feature creates a significant security vulnerability.",
      "severity": "High",
      "bad_example": "<template>\n  \n  <div v-html=\"userGeneratedContent\"></div>\n</template>",
      "good_example": "<template>\n  \n  <div>{{ userGeneratedContent }}</div>\n\n  \n  <div v-html=\"sanitizedHtmlContent\"></div> \n</template>\n\n<script>\nimport DOMPurify from 'dompurify';\n\nexport default {\n  props: ['userGeneratedContent'],\n  computed: {\n    sanitizedHtmlContent() {\n      // Example: Sanitize before rendering with v-html\n      return DOMPurify.sanitize(this.userGeneratedContent);\n    }\n  }\n}\n</script>",
      "examples": [
        {
          "snippet": "<div v-html=\"userInput\"></div> ",
          "isCorrect": false
        },
        {
          "snippet": "<div>{{ userInput }}</div> ",
          "isCorrect": true
        },
        {
          "snippet": "<div v-html=\"sanitizedInput\"></div> ",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["security-hardening", "stack-vue"],
      "scope": "file"
    },
    {
      "uuid": "55a0284b-eb7f-40ae-8b8c-db3dc66e8e0a",
      "title": "Avoid equality operators in loop termination conditions",
      "rule": "Check if loops use equality operators (== or !=) in termination conditions. These can lead to infinite loops if the condition is never met exactly. Instead, use relational operators like < or > for safer loop termination.",
      "why_is_this_important": "Using equality operators (== or !=) in loop termination conditions can accidentally cause infinite loops if the condition is never met exactly. Relational operators like < or > are safer and reduce the risk of unintended infinite loops.",
      "severity": "Critical",
      "bad_example": "for (var i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}",
      "good_example": "for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}",
      "examples": [
        {
          "snippet": "for (var i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}",
          "isCorrect": false
        },
        {
          "snippet": "for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "68c567f6-0b2c-4796-aef0-cfc6a939cb1c",
      "title": "Avoid using the comma operator",
      "rule": "Detect occurrences of the comma operator in expressions. The comma operator can make code harder to read and debug, as it executes two expressions but only returns the last one. Suggest alternative structures for better readability.",
      "why_is_this_important": "The comma operator executes two expressions and returns the result of the second one, which can make the code confusing and harder to debug. It reduces readability and reliability, and the same outcome can be achieved with clearer alternatives.",
      "severity": "High",
      "bad_example": "i = a += 2, a + b;  // Noncompliant: What's the value of i ?",
      "good_example": "a += 2;\ni = a + b; // We probably expected to assign the result of the addition to i, although the previous code wasn't doing it.",
      "examples": [
        {
          "snippet": "i = a += 2, a + b;  // Noncompliant: What's the value of i ?",
          "isCorrect": false
        },
        {
          "snippet": "a += 2;\ni = a + b; // We probably expected to assign the result of the addition to i, although the previous code wasn't doing it.",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "95ab7c18-c733-4401-9dd3-90893f9723eb",
      "title": "A module should not import itself",
      "rule": "Identify cases where a module imports itself. Self-imports are usually unintentional and can cause confusion or unnecessary dependencies. Suggest removing them.",
      "why_is_this_important": "When a module imports itself, the import statement serves no purpose and may indicate a mistake during refactoring. Removing self-imports improves code clarity and avoids confusion.",
      "severity": "High",
      "bad_example": "// file: foo.js\nimport foo from './foo'; // Noncompliant\n\nconst foo = require('./foo'); // Noncompliant\n",
      "good_example": "// file: index.js\nimport index from '.'; // Noncompliant\n\nconst index = require('.'); // Noncompliant",
      "examples": [
        {
          "snippet": "// file: foo.js\nimport foo from './foo'; // Noncompliant\n\nconst foo = require('./foo'); // Noncompliant\n",
          "isCorrect": false
        },
        {
          "snippet": "// file: index.js\nimport index from '.'; // Noncompliant\n\nconst index = require('.'); // Noncompliant",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["module-architecture"],
      "scope": "file"
    },
    {
      "uuid": "2502eb35-99bc-43bd-978f-2967d4d6c2fb",
      "title": "Avoid asynchronous operations in constructors",
      "rule": "Ensure that constructors do not include asynchronous operations. Constructors should initialize class instances synchronously. If async logic is required, suggest moving it to a separate initialization method.",
      "why_is_this_important": "Constructors are meant to initialize class instances synchronously. Including asynchronous operations can result in partially initialized objects and unexpected behavior. Use an explicit initialization method instead.",
      "severity": "High",
      "bad_example": "class MyClass {\n  constructor() {\n    Promise.resolve().then(() => this.data = fetchData()); // Noncompliant, this.data will be undefined in the new instance\n  }\n}",
      "good_example": "class MyClass {\n  constructor() {\n    this.data = null;\n  }\n\n  async initialize() {\n    this.data = await fetchData();\n  }\n}\n\n(async () => {\n  const myObject = new MyClass();\n  await myObject.initialize();\n})();",
      "examples": [
        {
          "snippet": "class MyClass {\n  constructor() {\n    Promise.resolve().then(() => this.data = fetchData()); // Noncompliant, this.data will be undefined in the new instance\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "class MyClass {\n  constructor() {\n    this.data = null;\n  }\n\n  async initialize() {\n    this.data = await fetchData();\n  }\n}\n\n(async () => {\n  const myObject = new MyClass();\n  await myObject.initialize();\n})();",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "4f700025-144e-4534-a0e4-bca56ba9897b",
      "title": "Do not export mutable variables",
      "rule": "Check if modules export mutable variables. Mutable exports can be modified by other modules, leading to unpredictable behavior. Recommend exporting immutable values instead.",
      "why_is_this_important": "Exporting mutable variables allows other modules to modify their values, making it difficult to track changes and leading to potential bugs. Use immutable exports to ensure predictable behavior.",
      "severity": "High",
      "bad_example": "let mutableVar = \"initial value\";\n\nexport { mutableVar }; // Noncompliant",
      "good_example": "const immutableVar = \"constant value\";\nexport { immutableVar };",
      "examples": [
        {
          "snippet": "let mutableVar = \"initial value\";\n\nexport { mutableVar }; // Noncompliant",
          "isCorrect": false
        },
        {
          "snippet": "const immutableVar = \"constant value\";\nexport { immutableVar };",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["maintainability", "module-architecture"],
      "scope": "file"
    },
    {
      "uuid": "5e88a926-fa04-4c8b-b903-6a4cbf71f3db",
      "title": "Ensure heading elements have meaningful content",
      "rule": "Verify that heading elements contain meaningful content. Headings are used for structure and navigation, so empty or generic headings negatively impact accessibility and usability.",
      "why_is_this_important": "Heading elements are used for navigation and structure. Empty or meaningless headings confuse assistive technologies and negatively impact accessibility for screen reader users.",
      "severity": "High",
      "bad_example": "function JavaScript101() {\n  return (\n    <>\n      <h1>JavaScript Programming Guide</h1>\n      <p>An introduction to JavaScript programming and its applications.</p>\n\n      <h2>JavaScript Basics</h2>\n      <p>Understanding the basic concepts in JavaScript programming.</p>\n\n      <h3>Variables</h3>\n      <p>Explanation of what variables are and how to declare them in JavaScript.</p>\n\n      <h3 aria-hidden>Data Types</h3> // Noncompliant\n      <p>Overview of the different data types in JavaScript.</p>\n\n      <h3 /> // Noncompliant\n      <p>Understanding how to declare and use functions in JavaScript.</p>\n    </>\n  );\n}",
      "good_example": "function JavaScript101() {\n  return (\n    <>\n      <h1>JavaScript Programming Guide</h1>\n      <p>An introduction to JavaScript programming and its applications.</p>\n\n      <h2>JavaScript Basics</h2>\n      <p>Understanding the basic concepts in JavaScript programming.</p>\n\n      <h3>Variables</h3>\n      <p>Explanation of what variables are and how to declare them in JavaScript.</p>\n\n      <h3>Data Types</h3>\n      <p>Overview of the different data types in JavaScript.</p>\n\n      <h3>Functions</h3>\n      <p>Understanding how to declare and use functions in JavaScript.</p>\n    </>\n  );\n}",
      "examples": [
        {
          "snippet": "function JavaScript101() {\n  return (\n    <>\n      <h1>JavaScript Programming Guide</h1>\n      <p>An introduction to JavaScript programming and its applications.</p>\n\n      <h2>JavaScript Basics</h2>\n      <p>Understanding the basic concepts in JavaScript programming.</p>\n\n      <h3>Variables</h3>\n      <p>Explanation of what variables are and how to declare them in JavaScript.</p>\n\n      <h3 aria-hidden>Data Types</h3> // Noncompliant\n      <p>Overview of the different data types in JavaScript.</p>\n\n      <h3 /> // Noncompliant\n      <p>Understanding how to declare and use functions in JavaScript.</p>\n    </>\n  );\n}",
          "isCorrect": false
        },
        {
          "snippet": "function JavaScript101() {\n  return (\n    <>\n      <h1>JavaScript Programming Guide</h1>\n      <p>An introduction to JavaScript programming and its applications.</p>\n\n      <h2>JavaScript Basics</h2>\n      <p>Understanding the basic concepts in JavaScript programming.</p>\n\n      <h3>Variables</h3>\n      <p>Explanation of what variables are and how to declare them in JavaScript.</p>\n\n      <h3>Data Types</h3>\n      <p>Overview of the different data types in JavaScript.</p>\n\n      <h3>Functions</h3>\n      <p>Understanding how to declare and use functions in JavaScript.</p>\n    </>\n  );\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["accessibility-a11y"],
      "scope": "file"
    },
    {
      "uuid": "3a7b4041-0fe6-4905-ac07-04b691a11dce",
      "title": "Avoid using anchor tags as buttons",
      "rule": "Detect cases where <a> elements are used as buttons. Anchor tags should be used for navigation, while actions should be assigned to <button> elements to maintain accessibility and expected behavior.",
      "why_is_this_important": "Anchor tags (<a>) are intended for navigation, not actions. Using them as buttons can cause accessibility issues and unexpected behavior. Use <button> for actions to ensure proper functionality and accessibility.",
      "severity": "High",
      "bad_example": "const MyComponent = () => {\n    return <>\n        <a href=\"javascript:void(0)\" onClick={foo}>Perform action</a>\n        <a href=\"#\" onClick={foo}>Perform action</a>\n        <a onClick={foo}>Perform action</a>\n    </>;\n};",
      "good_example": "const MyComponent = () => {\n    return <>\n      <button onClick={foo}>Perform action</button>\n      <a href=\"#section\" onClick={foo}>Perform action</a>\n    </>;\n};",
      "examples": [
        {
          "snippet": "const MyComponent = () => {\n    return <>\n        <a href=\"javascript:void(0)\" onClick={foo}>Perform action</a>\n        <a href=\"#\" onClick={foo}>Perform action</a>\n        <a onClick={foo}>Perform action</a>\n    </>;\n};",
          "isCorrect": false
        },
        {
          "snippet": "const MyComponent = () => {\n    return <>\n      <button onClick={foo}>Perform action</button>\n      <a href=\"#section\" onClick={foo}>Perform action</a>\n    </>;\n};",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["accessibility-a11y", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "da87d51a-955f-4322-bd25-4f7bd2a5cef2",
      "title": "Avoid building system commands from user input",
      "rule": "Check for occurrences where user input is directly used to construct system commands. This introduces a risk of command injection. Suggest using parameterized queries or safe wrappers instead.",
      "why_is_this_important": "Using user input to construct system commands can lead to security vulnerabilities, such as command injection. Always validate and sanitize inputs or avoid using them in system commands",
      "severity": "High",
      "bad_example": "const { spawn } = require(\"child_process\");\nconst input = req.query.input;\nconst proc = spawn(\"/usr/bin/find\", [input]); // Sensitive",
      "good_example": "const { spawn } = require(\"child_process\");\nconst input = req.query.input;\nif (allowed.includes(input)) {\n  const proc = spawn(\"/usr/bin/find\", [input]);\n}",
      "examples": [
        {
          "snippet": "const { spawn } = require(\"child_process\");\nconst input = req.query.input;\nconst proc = spawn(\"/usr/bin/find\", [input]); // Sensitive",
          "isCorrect": false
        },
        {
          "snippet": "const { spawn } = require(\"child_process\");\nconst input = req.query.input;\nif (allowed.includes(input)) {\n  const proc = spawn(\"/usr/bin/find\", [input]);\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "8d456f43-5f12-4dbc-b8ea-aa62f0f776a7",
      "title": "Prevent open redirect vulnerabilities in DOM updates",
      "rule": "Ensure that URLs used in redirection are properly validated and restricted to trusted domains. Open redirects can be exploited to redirect users to malicious sites.",
      "why_is_this_important": "Open redirects allow attackers to manipulate URLs and redirect users to malicious sites. Always validate and restrict redirection URLs to trusted domains.",
      "severity": "Critical",
      "bad_example": "const queryParams = new URLSearchParams(document.location.search);\nconst redirectUrl = queryParams.get(\"url\");\ndocument.location = redirectUrl; // Noncompliant\n",
      "good_example": "const queryParams = new URLSearchParams(document.location.search);\nconst redirectUrl = queryParams.get(\"url\");\n\nif (redirectUrl.startsWith(\"https://www.example.com/\")) {\n    document.location = redirectUrl;\n}",
      "examples": [
        {
          "snippet": "const queryParams = new URLSearchParams(document.location.search);\nconst redirectUrl = queryParams.get(\"url\");\ndocument.location = redirectUrl; // Noncompliant\n",
          "isCorrect": false
        },
        {
          "snippet": "const queryParams = new URLSearchParams(document.location.search);\nconst redirectUrl = queryParams.get(\"url\");\n\nif (redirectUrl.startsWith(\"https://www.example.com/\")) {\n    document.location = redirectUrl;\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "163e2ccb-7186-4f88-8e0b-d4102aa26cc4",
      "title": "Avoid unprotected HTTP request redirections",
      "rule": "Check if HTTP request redirections are unvalidated. Allowing arbitrary redirections can expose users to phishing attacks. Recommend validating and restricting URLs.",
      "why_is_this_important": "Allowing unvalidated redirection URLs in HTTP responses can expose users to phishing attacks. Always validate redirection URLs and restrict them to trusted domains.",
      "severity": "Critical",
      "bad_example": "server.get('/redirect', (request, response) => {\n\n   response.redirect(request.query.url); // Noncompliant\n});",
      "good_example": "server.get('/redirect', (request, response) => {\n\n   if (request.query.url.startsWith(\"https://www.example.com/\")) {\n      response.redirect(request.query.url);\n   }\n});",
      "examples": [
        {
          "snippet": "server.get('/redirect', (request, response) => {\n\n   response.redirect(request.query.url); // Noncompliant\n});",
          "isCorrect": false
        },
        {
          "snippet": "server.get('/redirect', (request, response) => {\n\n   if (request.query.url.startsWith(\"https://www.example.com/\")) {\n      response.redirect(request.query.url);\n   }\n});",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "d404681d-2afc-48dc-97eb-29ea36b23ef1",
      "title": "Server-side requests should not be vulnerable to forgery attacks",
      "rule": "Identify server-side requests that do not validate input sources. SSRF vulnerabilities allow attackers to make unauthorized requests on behalf of the server. Restrict and validate request sources.",
      "why_is_this_important": "Server-Side Request Forgery (SSRF) vulnerabilities allow attackers to coerce a server into making arbitrary requests. This can lead to unauthorized access or data leakage. Properly validate and restrict URLs used in server-side requests.",
      "severity": "Critical",
      "bad_example": "const axios = require('axios');\nconst express = require('express');\n\nconst app = express();\n\napp.get('/example', async (req, res) => {\n    try {\n        await axios.get(req.query.url); // Noncompliant\n        res.send(\"OK\");\n    } catch (err) {\n        console.error(err);\n        res.send(\"ERROR\");\n    }\n})",
      "good_example": "const axios = require('axios');\nconst express = require('express');\n\nconst schemesList = [\"http:\", \"https:\"];\nconst domainsList = [\"trusted1.example.com\", \"trusted2.example.com\"];\n\napp.get('/example', async (req, res) => {\n    const url = (new URL(req.query.url));\n\n    if (schemesList.includes(url.protocol) && domainsList.includes(url.hosttitle)) {\n        try {\n            await axios.get(url);\n            res.send(\"OK\");\n        } catch (err) {\n            console.error(err);\n            res.send(\"ERROR\");\n        }\n    }else {\n        res.send(\"INVALID_URL\");\n    }\n})",
      "examples": [
        {
          "snippet": "const axios = require('axios');\nconst express = require('express');\n\nconst app = express();\n\napp.get('/example', async (req, res) => {\n    try {\n        await axios.get(req.query.url); // Noncompliant\n        res.send(\"OK\");\n    } catch (err) {\n        console.error(err);\n        res.send(\"ERROR\");\n    }\n})",
          "isCorrect": false
        },
        {
          "snippet": "const axios = require('axios');\nconst express = require('express');\n\nconst schemesList = [\"http:\", \"https:\"];\nconst domainsList = [\"trusted1.example.com\", \"trusted2.example.com\"];\n\napp.get('/example', async (req, res) => {\n    const url = (new URL(req.query.url));\n\n    if (schemesList.includes(url.protocol) && domainsList.includes(url.hosttitle)) {\n        try {\n            await axios.get(url);\n            res.send(\"OK\");\n        } catch (err) {\n            console.error(err);\n            res.send(\"ERROR\");\n        }\n    }else {\n        res.send(\"INVALID_URL\");\n    }\n})",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "da8f1ddb-f433-4e66-94bb-224339e8e02b",
      "title": "Use appropriate tabIndex values",
      "rule": "Ensure tabIndex values are either 0 or -1. Positive tabIndex values disrupt the natural tab order and can create accessibility issues.",
      "why_is_this_important": "Using positive tabIndex values disrupts the natural tab order, confusing users who rely on keyboard navigation or assistive technologies. Stick to tabIndex values of 0 or -1 for predictable and accessible navigation.",
      "severity": "High",
      "bad_example": "function MyDiv() {\n    return (\n        <div>\n            <span tabIndex=\"5\">foo</span> // Noncompliant\n            <span tabIndex=\"3\">bar</span> // Noncompliant\n            <span tabIndex=\"1\">baz</span> // Noncompliant\n            <span tabIndex=\"2\">qux</span> // Noncompliant\n        </div>\n    );\n}",
      "good_example": "function MyDiv() {\n    return (\n        <div>\n            <span tabIndex=\"0\">foo</span>\n            <span tabIndex=\"-1\">bar</span>\n            <span tabIndex={0}>baz</span>\n            <span>qux</span>\n        </div>\n    );\n}",
      "examples": [
        {
          "snippet": "function MyDiv() {\n    return (\n        <div>\n            <span tabIndex=\"5\">foo</span> // Noncompliant\n            <span tabIndex=\"3\">bar</span> // Noncompliant\n            <span tabIndex=\"1\">baz</span> // Noncompliant\n            <span tabIndex=\"2\">qux</span> // Noncompliant\n        </div>\n    );\n}",
          "isCorrect": false
        },
        {
          "snippet": "function MyDiv() {\n    return (\n        <div>\n            <span tabIndex=\"0\">foo</span>\n            <span tabIndex=\"-1\">bar</span>\n            <span tabIndex={0}>baz</span>\n            <span>qux</span>\n        </div>\n    );\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["accessibility-a11y"],
      "scope": "file"
    },
    {
      "uuid": "9677039b-81e4-4dea-9cb1-d75f93e6ef51",
      "title": "React children should not be passed as props",
      "rule": "Check if React children are passed as regular props instead of being nested inside components. Passing them incorrectly can cause conflicts and reduce clarity.",
      "why_is_this_important": "Passing React children through the children prop instead of nesting them can lead to conflicts and errors, especially if both approaches are used simultaneously. Always pass children as nested components for clarity.",
      "severity": "High",
      "bad_example": "<div children='Children' />\n<Foo children={<Bar />} />\n\nReact.createElement(\"div\", { children: 'Children' })",
      "good_example": "<div>Children</div>\n<Foo><Bar /></Foo>\n\nReact.createElement(\"div\", {}, 'Children');",
      "examples": [
        {
          "snippet": "<div children='Children' />\n<Foo children={<Bar />} />\n\nReact.createElement(\"div\", { children: 'Children' })",
          "isCorrect": false
        },
        {
          "snippet": "<div>Children</div>\n<Foo><Bar /></Foo>\n\nReact.createElement(\"div\", {}, 'Children');",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["readability-refactor", "stack-react", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "6d2484fd-3844-464b-a20e-ac04b06d874c",
      "title": "Simplify else blocks with single if statements",
      "rule": "Detect unnecessary nesting where an if statement is the only statement inside an else block. Recommend using else-if instead for improved readability.",
      "why_is_this_important": "Using if statements as the only statement in an else block adds unnecessary nesting and reduces code readability. Replace them with else-if to make the logic clearer and easier to follow.",
      "severity": "Medium",
      "bad_example": "if (condition1) {\n    // ...\n} else {\n    if (condition2) {  // Noncompliant: 'if' statement is the only statement in the 'else' block\n        // ...\n    }\n}\n\n\nif (condition3) {\n    // ...\n} else {\n    if (condition4) { // Noncompliant: 'if' statement is the only statement in the 'else' block\n        // ...\n    } else {\n        // ...\n    }\n}",
      "good_example": "if (condition1) {\n    // ...\n} else if (condition2) {\n    // ...\n}\n\n\nif (condition3) {\n    // ...\n} else if (condition4) {\n    // ...\n} else {\n    // ...\n}",
      "examples": [
        {
          "snippet": "if (condition1) {\n    // ...\n} else {\n    if (condition2) {  // Noncompliant: 'if' statement is the only statement in the 'else' block\n        // ...\n    }\n}\n\n\nif (condition3) {\n    // ...\n} else {\n    if (condition4) { // Noncompliant: 'if' statement is the only statement in the 'else' block\n        // ...\n    } else {\n        // ...\n    }\n}",
          "isCorrect": false
        },
        {
          "snippet": "if (condition1) {\n    // ...\n} else if (condition2) {\n    // ...\n}\n\n\nif (condition3) {\n    // ...\n} else if (condition4) {\n    // ...\n} else {\n    // ...\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "0a8c4825-fa07-47a3-890a-200b5ec9c858",
      "title": "Do not reassign imported variables",
      "rule": "Ensure that imported variables are not reassigned. This can cause runtime errors, especially in TypeScript. Modify object properties instead of reassigning variables.",
      "why_is_this_important": "Reassigning imported variables causes runtime errors and is prohibited in TypeScript. Modify properties on the imported object instead of reassigning the variable itself.",
      "severity": "Medium",
      "bad_example": "import { exportedObject } from 'module.js';\nexportedObject = 'hello world!';   // Noncompliant: TypeError: Assignment to constant variable.",
      "good_example": "import { exportedObject } from 'module.js';\nexportedObject.newAttribute = 'hello world!'; // exportedObject now contains newAttribute and can be seen from all other modules importing it\n",
      "examples": [
        {
          "snippet": "import { exportedObject } from 'module.js';\nexportedObject = 'hello world!';   // Noncompliant: TypeError: Assignment to constant variable.",
          "isCorrect": false
        },
        {
          "snippet": "import { exportedObject } from 'module.js';\nexportedObject.newAttribute = 'hello world!'; // exportedObject now contains newAttribute and can be seen from all other modules importing it\n",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "module-architecture"],
      "scope": "file"
    },
    {
      "uuid": "2092d7f6-b302-4177-9547-7253b05ff842",
      "title": "Ensure React list keys are stable between renders",
      "rule": "Check if React list keys are stable and unique. Using dynamic values like Math.random() or Date.now() can cause rendering issues. Recommend using unique IDs.",
      "why_is_this_important": "To optimize the rendering of React list components, a unique identifier (UID) is required in the key attribute for each list item. This UID lets React identify the item throughout its lifetime. Using generated values like Math.random() or Date.now() is discouraged as their return value will differ between calls, causing the keys to not match up between renders, recreating the DOM. Also, this may cause bugs if values collide.",
      "severity": "High",
      "bad_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={Math.random()}> <!-- Noncompliant: Since the 'key' will be different on each render, React will update the DOM unnecessarily -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
      "good_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
      "examples": [
        {
          "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={Math.random()}> <!-- Noncompliant: Since the 'key' will be different on each render, React will update the DOM unnecessarily -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
          "isCorrect": false
        },
        {
          "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["performance-efficiency", "stack-react", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "6b52afb6-742f-4d2c-8eb9-e69df67634ac",
      "title": "React Context values should have stable identities",
      "rule": "Identify cases where React Context values are being reassigned dynamically. Unstable context values trigger unnecessary re-renders. Use memoization to stabilize them.",
      "why_is_this_important": "Passing dynamic values (like object literals) directly to React Context causes unnecessary re-renders and performance issues. Use memoization to ensure values remain stable.",
      "severity": "High",
      "bad_example": "function Component() {\n  return (\n    <SomeContext.Provider value={{foo: 'bar'}}> { /* Noncompliant: value is an object literal */ }\n      <SomeComponent />\n    </SomeContext.Provider>\n  );\n}",
      "good_example": "function Component() {\n  const obj = useMemo(() => ({foo: 'bar'}), []); // value is cached by useMemo\n  return (\n    <SomeContext.Provider value={obj}> { /* Compliant */ }\n      <SomeComponent />\n    </SomeContext.Provider>\n  );\n}",
      "examples": [
        {
          "snippet": "function Component() {\n  return (\n    <SomeContext.Provider value={{foo: 'bar'}}> { /* Noncompliant: value is an object literal */ }\n      <SomeComponent />\n    </SomeContext.Provider>\n  );\n}",
          "isCorrect": false
        },
        {
          "snippet": "function Component() {\n  const obj = useMemo(() => ({foo: 'bar'}), []); // value is cached by useMemo\n  return (\n    <SomeContext.Provider value={obj}> { /* Compliant */ }\n      <SomeComponent />\n    </SomeContext.Provider>\n  );\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["performance-efficiency", "stack-react", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "51ddc78d-53e4-4a99-b566-867df75116b3",
      "title": "Avoid using .bind() or arrow functions in JSX props",
      "rule": "Detect the use of .bind() or inline arrow functions inside JSX props. These create new functions on every render, impacting performance. Suggest moving function definitions outside the render method.",
      "why_is_this_important": "Using .bind() or arrow functions in JSX props creates new functions on every render, which negatively impacts performance and can trigger unnecessary re-renders. Use useCallback or predefine functions instead.",
      "severity": "High",
      "bad_example": "<Component onClick={this._handleClick.bind(this)}></Component>\n\n<Component onClick={() => handleClick()}></Component>",
      "good_example": "function handleClick() {\n    //...\n}\n\n<Component onClick={handleClick}></Component",
      "examples": [
        {
          "snippet": "<Component onClick={this._handleClick.bind(this)}></Component>\n\n<Component onClick={() => handleClick()}></Component>",
          "isCorrect": false
        },
        {
          "snippet": "function handleClick() {\n    //...\n}\n\n<Component onClick={handleClick}></Component",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["performance-efficiency", "stack-react"],
      "scope": "file"
    },
    {
      "uuid": "e04a8cc5-092b-4e2f-8f18-a79eabd8272b",
      "title": "Avoid array indexes as keys in React lists",
      "rule": "Ensure that React list items do not use array indexes as keys. This practice can cause reordering issues and unexpected behavior. Recommend using unique identifiers instead.",
      "why_is_this_important": "Using array indexes as keys can cause React to recreate the DOM when the order of items changes, negatively affecting performance and state management. Use unique identifiers instead.",
      "severity": "High",
      "bad_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post, index) =>\n        <li key={index}> <!-- Noncompliant: When 'posts' are reordered, React will need to recreate the list DOM -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
      "good_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
      "examples": [
        {
          "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post, index) =>\n        <li key={index}> <!-- Noncompliant: When 'posts' are reordered, React will need to recreate the list DOM -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
          "isCorrect": false
        },
        {
          "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["performance-efficiency", "stack-react", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "a3a30f68-023f-4d9a-8fd7-cc5ebef963c3",
      "title": "Do not nest React components",
      "rule": "Check if React components are defined inside other components. Nested components are recreated on every render, causing unnecessary re-renders. Suggest moving them outside the parent component.",
      "why_is_this_important": "Nesting components within other components causes state to be lost on re-renders and can lead to unnecessary recreations. Move nested components outside the parent to improve maintainability and performance.",
      "severity": "High",
      "bad_example": "function Component() {\n  function NestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n    return <div />;\n  }\n\n  return (\n    <div>\n      <NestedComponent />\n    </div>\n  );\n\nclass Component extends React.Component {\n  render() {\n    function UnstableNestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n      return <div />;\n    }\n\n    return (\n      <div>\n        <UnstableNestedComponent />\n      </div>\n    );\n  }\n}",
      "good_example": "function OutsideComponent(props) {\n  return <div />;\n}\n\nfunction Component() {\n  return (\n    <div>\n      <OutsideComponent />\n    </div>\n  );\n}",
      "examples": [
        {
          "snippet": "function Component() {\n  function NestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n    return <div />;\n  }\n\n  return (\n    <div>\n      <NestedComponent />\n    </div>\n  );\n\nclass Component extends React.Component {\n  render() {\n    function UnstableNestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n      return <div />;\n    }\n\n    return (\n      <div>\n        <UnstableNestedComponent />\n      </div>\n    );\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "function OutsideComponent(props) {\n  return <div />;\n}\n\nfunction Component() {\n  return (\n    <div>\n      <OutsideComponent />\n    </div>\n  );\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["performance-efficiency", "stack-react", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "7b894f16-eaab-4edc-b48a-26d0684d1da1",
      "title": "Continue should not be used in loops",
      "rule": "Detect the use of 'continue' inside loops. This practice can make control flow harder to follow. Recommend restructuring the loop for better readability.",
      "why_is_this_important": "Using 'continue' in loops creates unstructured control flow, making the code harder to read and maintain. Replace it with clearer conditional logic to improve readability.",
      "severity": "Low",
      "bad_example": "  for (i = 0; i < 10; i++) {\n    if (i == 5) {\n      continue;  /* Noncompliant */\n    }\n    alert(\"i = \" + i);\n  }",
      "good_example": "  for (i = 0; i < 10; i++) {\n    if (i != 5) {  /* Compliant */\n      alert(\"i = \" + i);\n    }\n  }",
      "examples": [
        {
          "snippet": "  for (i = 0; i < 10; i++) {\n    if (i == 5) {\n      continue;  /* Noncompliant */\n    }\n    alert(\"i = \" + i);\n  }",
          "isCorrect": false
        },
        {
          "snippet": "  for (i = 0; i < 10; i++) {\n    if (i != 5) {  /* Compliant */\n      alert(\"i = \" + i);\n    }\n  }",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "32e26bf9-ca82-40c1-b8d0-44e29f804170",
      "title": "React's isMounted should not be used",
      "rule": "Ensure that isMounted is not used in React components. This method is deprecated and can cause unreliable state updates. Suggest using cleanup functions or useRef instead.",
      "why_is_this_important": "The isMounted method is deprecated and hides warnings about improper state updates. Instead, use cleanup functions or other lifecycle methods to handle unmounted components safely.",
      "severity": "Medium",
      "bad_example": "class MyComponent extends React.Component {\n  componentDidMount() {\n    mydatastore.subscribe(this);\n  }\n  dataHandler() {\n    if (this.isMounted()) { // Noncompliant: isMounted() hides the error\n      //...\n    }\n  }\n  render() {\n    //... calls dataHandler()\n  }\n};",
      "good_example": "class MyComponent extends React.Component {\n  componentDidMount() {\n    mydatastore.subscribe(this);\n  }\n  dataHandler() {\n    //...\n  }\n  render() {\n    //...\n  }\n  componentWillUnmount() {\n    mydatastore.unsubscribe(this);\n  }\n}",
      "examples": [
        {
          "snippet": "class MyComponent extends React.Component {\n  componentDidMount() {\n    mydatastore.subscribe(this);\n  }\n  dataHandler() {\n    if (this.isMounted()) { // Noncompliant: isMounted() hides the error\n      //...\n    }\n  }\n  render() {\n    //... calls dataHandler()\n  }\n};",
          "isCorrect": false
        },
        {
          "snippet": "class MyComponent extends React.Component {\n  componentDidMount() {\n    mydatastore.subscribe(this);\n  }\n  dataHandler() {\n    //...\n  }\n  render() {\n    //...\n  }\n  componentWillUnmount() {\n    mydatastore.unsubscribe(this);\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["maintainability", "stack-react", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "f1737cbb-f52b-45dd-9430-43bab52091a8",
      "title": "Always use const and let",
      "rule": "Check for occurrences of var declarations. Using var leads to function scoping issues. Recommend using const for immutable values and let for mutable ones.",
      "why_is_this_important": "he var keyword creates variables with function scope, leading to bugs and unexpected behavior. Use const for variables that don't change and let for those that do, to ensure block scoping.",
      "severity": "Medium",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "jsts",
      "buckets": ["error-handling", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "97fe785f-d366-4712-9b42-961f1972fa97",
      "title": "One variable per declaration",
      "rule": "Ensure that multiple variables are not declared in a single statement. This practice reduces readability and can introduce subtle bugs. Recommend declaring variables separately.",
      "why_is_this_important": "Declaring multiple variables in a single statement reduces readability and can introduce subtle bugs. Declare each variable separately for clarity.",
      "severity": "Medium",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "jsts",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "178e5a15-e727-40ef-a796-a5a9d8a9a86f",
      "title": "Do not use the Array constructor",
      "rule": "Detect occurrences of the Array constructor. It behaves inconsistently depending on arguments. Recommend using array literals [] instead for clarity and predictability.",
      "why_is_this_important": "The Array constructor behaves inconsistently depending on the arguments provided. Use array literals [] instead, which are clearer and more predictable.",
      "severity": "Medium",
      "bad_example": "const a1 = new Array(x1, x2, x3);\nconst a2 = new Array(x1, x2);\nconst a3 = new Array(x1);\nconst a4 = new Array();",
      "good_example": "const a1 = [x1, x2, x3];\nconst a2 = [x1, x2];\nconst a3 = [x1];\nconst a4 = [];",
      "examples": [
        {
          "snippet": "const a1 = new Array(x1, x2, x3);\nconst a2 = new Array(x1, x2);\nconst a3 = new Array(x1);\nconst a4 = new Array();",
          "isCorrect": false
        },
        {
          "snippet": "const a1 = [x1, x2, x3];\nconst a2 = [x1, x2];\nconst a3 = [x1];\nconst a4 = [];",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "04b1b7e8-0291-47a0-94a3-64f2495666c1",
      "title": "Avoid using Getters and Setters",
      "rule": "Check for the use of getters and setters. These can introduce unexpected side effects and have limited compiler support. Recommend using regular methods unless required by a framework.",
      "why_is_this_important": "Getters and setters can be difficult to reason about and have limited compiler support. They can introduce unexpected side effects and performance issues. Instead, use regular methods to define and modify properties unless working with frameworks that require them.",
      "severity": "Medium",
      "bad_example": "class Foo {\n  get next() { return this.nextId++; }\n}",
      "good_example": "",
      "examples": [
        {
          "snippet": "class Foo {\n  get next() { return this.nextId++; }\n}",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "buckets": ["maintainability", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "3d735d2d-45a5-4479-8806-05c5a23fd46a",
      "title": "Always use JSDoc for documentation",
      "rule": "Ensure that all classes, fields, and methods are documented with JSDoc. JSDoc improves code clarity, provides documentation for developers, and helps with IDE autocompletion.",
      "why_is_this_important": "JSDoc improves code clarity, provides documentation for developers, and helps with IDE autocompletion. All classes, fields, and methods should be properly documented using JSDoc.",
      "severity": "Medium",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "jsts",
      "buckets": ["docs-adrs", "maintainability"],
      "scope": "file"
    },
    {
      "uuid": "7888bc2b-08b3-49c3-b362-60479a87a2cc",
      "title": "Avoid using eval",
      "rule": "Detect the use of eval(). Eval allows execution of arbitrary code, leading to security vulnerabilities such as code injection. Recommend safer alternatives like function execution.",
      "why_is_this_important": "Using eval to execute code can lead to security vulnerabilities and is not allowed in environments with Content Security Policies. Avoid eval and use safer alternatives.",
      "severity": "Critical",
      "bad_example": "const userInput = 'alert(\"Hacked!\")';\neval(userInput);",
      "good_example": "const userInput = 'alert(\"Hacked!\")';\n// Avoid eval usage; parse or sanitize input appropriately\nconsole.log('Safe execution:', userInput);",
      "examples": [
        {
          "snippet": "const userInput = 'alert(\"Hacked!\")';\neval(userInput);",
          "isCorrect": false
        },
        {
          "snippet": "const userInput = 'alert(\"Hacked!\")';\n// Avoid eval usage; parse or sanitize input appropriately\nconsole.log('Safe execution:', userInput);",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "7de6bc14-d456-4bf8-9897-b54bf21565c3",
      "title": "Enforce Async/Await for asynchronous code",
      "rule": "Check for the use of eval() to handle asynchronous execution. Eval leads to security vulnerabilities. Recommend using Async/Await or Promises instead.",
      "why_is_this_important": "Using eval() executes arbitrary code, leading to security vulnerabilities like code injection. Always use Async/Await or Promises instead of dynamic execution methods like eval().",
      "severity": "Medium",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "jsts",
      "buckets": ["error-handling", "readability-refactor", "security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "4d2ea914-b5c0-43b7-be59-be147bf4ac9d",
      "title": "Proper memory management in event listeners",
      "rule": "Ensure that event listeners are removed when no longer needed. Not doing so can lead to memory leaks and unnecessary resource consumption.",
      "why_is_this_important": "Event listeners that are not removed properly can cause memory leaks. Always remove listeners when they are no longer needed to avoid unnecessary resource consumption.",
      "severity": "Medium",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "jsts",
      "buckets": ["performance-efficiency", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "0434f77e-1c93-428a-a00c-e999f3e3f6e3",
      "title": "Do not use the 'with' statement",
      "rule": "Detect occurrences of the 'with' statement. This construct is banned in strict mode due to unpredictable behavior and makes debugging harder.",
      "why_is_this_important": "The 'with' statement makes code harder to understand and debug. It has been banned in strict mode since ES5 due to its unpredictable behavior.",
      "severity": "High",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "jsts",
      "buckets": ["error-handling", "maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "54ce13df-f5a4-42ab-8ce7-b746ce17e22a",
      "title": "Avoid console statements in production",
      "rule": "Ensure that console statements are removed in production code. Console logs can expose sensitive data and impact performance.",
      "why_is_this_important": "Using console logging in production can expose sensitive data and negatively impact performance. Always remove or disable debug logs before deployment.",
      "severity": "Medium",
      "bad_example": "var myObj = getData();\nconsole.log(myObj); // bad\nconsole.debug(\"myObj:\", myObj); // bad",
      "good_example": "",
      "examples": [
        {
          "snippet": "var myObj = getData();\nconsole.log(myObj); // bad\nconsole.debug(\"myObj:\", myObj); // bad",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "buckets": [
        "maintainability",
        "observability-logging",
        "security-hardening"
      ],
      "scope": "file"
    },
    {
      "uuid": "cc05a887-0d44-4b39-bb26-9298853fbf34",
      "title": "File titles must be lowercase with underscores or dashes",
      "rule": "Check if file titles follow the lowercase naming convention with underscores or dashes. This improves cross-platform compatibility and consistency.",
      "why_is_this_important": "Inconsistent file naming makes file imports harder to track and can lead to cross-platform compatibility issues. Always use lowercase with underscores or dashes.",
      "severity": "Low",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "jsts",
      "buckets": ["style-conventions", "stack-nodejs"],
      "scope": "file"
    },
    {
      "uuid": "abaabd57-62d2-44bd-b1ba-84c75b505ca5",
      "title": "Limit lines to 80 characters",
      "rule": "Ensure that lines do not exceed 80 characters. Long lines reduce readability, especially on smaller screens or during code reviews.",
      "why_is_this_important": "Long lines make code harder to read, especially on smaller screens or during code reviews. Keeping lines within 80 characters improves readability and maintainability.",
      "severity": "Low",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "jsts",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "a4f18b7f-6cca-408d-9f07-06ece8630e6c",
      "title": "Avoid default exports",
      "rule": "Detect the use of default exports. Named exports provide better clarity, maintainability, and prevent issues when refactoring.",
      "why_is_this_important": "Default exports make it harder to track imported module titles, leading to inconsistencies. Named exports provide better clarity and maintainability.",
      "severity": "Low",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "jsts",
      "buckets": [
        "maintainability",
        "module-architecture",
        "style-conventions",
        "stack-nodejs"
      ],
      "scope": "file"
    },
    {
      "uuid": "2a4fa850-9656-47fe-adff-d11e1c5d14f3",
      "title": "Always use strict equality checks",
      "rule": "Ensure that strict equality (===) is used instead of loose equality (==). Loose equality can lead to unexpected type coercion and logical errors.",
      "why_is_this_important": "Loose equality (==) can cause unexpected behavior due to type coercion. Always use strict equality (===) to prevent logical errors.",
      "severity": "Medium",
      "bad_example": "if (userInput == 0) {\n  console.log('This might cause type coercion vulnerabilities');\n}",
      "good_example": "if (userInput === 0) {\n  console.log('This avoids type coercion issues');\n}",
      "examples": [
        {
          "snippet": "if (userInput == 0) {\n  console.log('This might cause type coercion vulnerabilities');\n}",
          "isCorrect": false
        },
        {
          "snippet": "if (userInput === 0) {\n  console.log('This avoids type coercion issues');\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "08d4da8d-d35f-4901-85c7-23284097e004",
      "title": "Always sanitize user inputs",
      "rule": "Check if user inputs are sanitized before being used in rendering or database queries. Unsanitized inputs can lead to injection vulnerabilities like XSS or SQL injection.",
      "why_is_this_important": "Unsanitized inputs can lead to injection vulnerabilities, such as XSS or SQL injection, in cases where inputs are directly used in rendering or database queries.",
      "severity": "Critical",
      "bad_example": "const userInput = '<script>alert(\"Hacked!\")</script>';\ndocument.innerHTML = userInput; // Vulnerable to XSS",
      "good_example": "const userInput = '<script>alert(\"Hacked!\")</script>';\nconst sanitizedInput = userInput.replace(/</g, '&lt;').replace(/>/g, '&gt;');\ndocument.innerHTML = sanitizedInput; // Safe rendering\n",
      "examples": [
        {
          "snippet": "const userInput = '<script>alert(\"Hacked!\")</script>';\ndocument.innerHTML = userInput; // Vulnerable to XSS",
          "isCorrect": false
        },
        {
          "snippet": "const userInput = '<script>alert(\"Hacked!\")</script>';\nconst sanitizedInput = userInput.replace(/</g, '&lt;').replace(/>/g, '&gt;');\ndocument.innerHTML = sanitizedInput; // Safe rendering\n",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "30b9eda5-6b10-4c01-9245-1361c2b6cc73",
      "title": "Always validate JSON parsing",
      "rule": "Ensure that JSON data is validated before parsing. Parsing untrusted JSON without validation can result in runtime errors or vulnerabilities.",
      "why_is_this_important": "Parsing untrusted JSON without validation can result in runtime errors or vulnerabilities. Always validate the structure of parsed JSON to ensure it meets expected requirements.",
      "severity": "Medium",
      "bad_example": "const data = JSON.parse(userInput); // No validation",
      "good_example": "try {\n  const data = JSON.parse(userInput);\n  if (typeof data !== 'object' || Array.isArray(data)) {\n    throw new Error('Invalid JSON structure');\n  }\n} catch (err) {\n  console.error('JSON parsing error:', err);\n}\n",
      "examples": [
        {
          "snippet": "const data = JSON.parse(userInput); // No validation",
          "isCorrect": false
        },
        {
          "snippet": "try {\n  const data = JSON.parse(userInput);\n  if (typeof data !== 'object' || Array.isArray(data)) {\n    throw new Error('Invalid JSON structure');\n  }\n} catch (err) {\n  console.error('JSON parsing error:', err);\n}\n",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "af8bb4dd-720e-4b9d-99c5-1776fb22e68f",
      "title": "Enable CSRF prevention",
      "rule": "Ensure that CSRF protection is enforced. Disabling CSRF protection allows malicious sites to execute unauthorized actions on behalf of authenticated users.",
      "why_is_this_important": "Disabling CSRF protection allows malicious sites to execute unauthorized actions on behalf of authenticated users. Always enforce CSRF protection.",
      "severity": "High",
      "bad_example": "new ApolloServer({\n  csrfPrevention: false,\n});",
      "good_example": "new ApolloServer({\n  csrfPrevention: true,\n});",
      "examples": [
        {
          "snippet": "new ApolloServer({\n  csrfPrevention: false,\n});",
          "isCorrect": false
        },
        {
          "snippet": "new ApolloServer({\n  csrfPrevention: true,\n});",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["security-hardening", "stack-nodejs"],
      "scope": "file"
    },
    {
      "uuid": "b259d4ab-18ae-4a27-8237-3dab1e783d6c",
      "title": "Use graphql-upload with caution",
      "rule": "Check for the use of graphql-upload. This library enables file uploads using multipart requests, which can be exploited for CSRF attacks if not properly secured.",
      "why_is_this_important": "The graphql-upload library enables file uploads using multipart requests, which can be exploited for CSRF attacks if not properly secured.",
      "severity": "Medium",
      "bad_example": "app.use(graphqlUploadExpress());",
      "good_example": "app.use(graphqlUploadExpress({\n  maxFileSize: 1000000,\n  maxFiles: 10,\n})); // Ensure CSRF protection is enabled elsewhere\n",
      "examples": [
        {
          "snippet": "app.use(graphqlUploadExpress());",
          "isCorrect": false
        },
        {
          "snippet": "app.use(graphqlUploadExpress({\n  maxFileSize: 1000000,\n  maxFiles: 10,\n})); // Ensure CSRF protection is enabled elsewhere\n",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["security-hardening", "stack-nodejs"],
      "scope": "file"
    },
    {
      "uuid": "a24e2266-b67f-4066-93ea-e77fa1cce655",
      "title": "Avoid weak or missing CORS policies",
      "rule": "Ensure that CORS policies are properly defined. Weak or missing CORS policies may allow unauthorized domains to access your resources, leading to security vulnerabilities.",
      "why_is_this_important": "A weak or missing CORS policy may allow unauthorized domains to access your resources. Always define strict CORS rules to control access.",
      "severity": "Medium",
      "bad_example": "new ApolloServer({});",
      "good_example": "new ApolloServer({\n  cors: {\n    origin: ['https://trusted.com'],\n  },\n});",
      "examples": [
        {
          "snippet": "new ApolloServer({});",
          "isCorrect": false
        },
        {
          "snippet": "new ApolloServer({\n  cors: {\n    origin: ['https://trusted.com'],\n  },\n});",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["security-hardening", "stack-nodejs"],
      "scope": "file"
    },
    {
      "uuid": "8146b323-7825-4d87-83a8-154ca8bc668b",
      "title": "Avoid excessive precision in numeric literals",
      "rule": "Detect floating-point numbers with excessive precision. Overly precise numeric literals can cause rounding errors and unexpected behavior in calculations.",
      "why_is_this_important": "Floating-point numbers have limited precision. Excessively precise numeric literals can lead to rounding errors and unexpected behavior in calculations.",
      "severity": "Medium",
      "bad_example": "var c = 999999999999999999999; // Not good, exceeds precision limits\nvar z = 1.12345678901234567;  // Too precise, may lose accuracy",
      "good_example": "var a = 9;                     // Ok\nvar b = 999999999999999;       // Ok, within safe limits\nvar w = 1.12e-4;               // Ok\nvar y = 1.1234567890123;       // Ok, precise but within limits",
      "examples": [
        {
          "snippet": "var c = 999999999999999999999; // Not good, exceeds precision limits\nvar z = 1.12345678901234567;  // Too precise, may lose accuracy",
          "isCorrect": false
        },
        {
          "snippet": "var a = 9;                     // Ok\nvar b = 999999999999999;       // Ok, within safe limits\nvar w = 1.12e-4;               // Ok\nvar y = 1.1234567890123;       // Ok, precise but within limits",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "40cd4c5d-5ac3-4534-8ff6-e5da5635375e",
      "title": "Do not use the Object constructor",
      "rule": "Ensure that the Object constructor is not used. Object literals are clearer, more predictable, and improve readability.",
      "why_is_this_important": "The Object constructor is less readable and can lead to unexpected behavior. Object literals are safer and clearer.",
      "severity": "Medium",
      "bad_example": "const foo = new Object();",
      "good_example": "const foo = {};\n",
      "examples": [
        {
          "snippet": "const foo = new Object();",
          "isCorrect": false
        },
        {
          "snippet": "const foo = {};\n",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "18ae2a27-4f03-457b-bac9-293099232dde",
      "title": "Avoid the 'any' type",
      "rule": "Detect the use of the 'any' type in TypeScript. Using 'any' disables type checking and can lead to runtime errors. Recommend using specific types or generics instead.",
      "why_is_this_important": "Using 'any' disables type checking and can lead to runtime errors. Always use specific types or generics to ensure type safety.",
      "severity": "High",
      "bad_example": "let foo: any = \"bar\";",
      "good_example": "let foo: string = \"bar\";",
      "examples": [
        {
          "snippet": "let foo: any = \"bar\";",
          "isCorrect": false
        },
        {
          "snippet": "let foo: string = \"bar\";",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "ebb36fe3-4268-4d41-9b6d-3a8f382b60e4",
      "title": "Prefer interfaces over type aliases",
      "rule": "Check if type aliases are used instead of interfaces. Interfaces provide better extensibility and readability when defining object shapes.",
      "why_is_this_important": "Interfaces provide better extensibility and readability compared to type aliases. Use interfaces for defining object shapes when possible.",
      "severity": "Medium",
      "bad_example": "type User = {\n  title: string;\n  age: number;\n};",
      "good_example": "interface User {\n  title: string;\n  age: number;\n}\n",
      "examples": [
        {
          "snippet": "type User = {\n  title: string;\n  age: number;\n};",
          "isCorrect": false
        },
        {
          "snippet": "interface User {\n  title: string;\n  age: number;\n}\n",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "ee851f62-8965-42f4-9169-c7698762fae6",
      "title": "Avoid Non-Numeric Properties on Arrays",
      "rule": "Ensure that arrays do not contain non-numeric properties. This practice can lead to unexpected behavior. Use Maps or Objects instead.",
      "why_is_this_important": "Adding non-numeric properties to arrays is error-prone and goes against the intended use of arrays. Use Map or Object instead to ensure predictable behavior.",
      "severity": "Medium",
      "bad_example": "const arr = [];\narr['key'] = 'value'; // Bad practice",
      "good_example": "const map = new Map<string, string>();\nmap.set('key', 'value');",
      "examples": [
        {
          "snippet": "const arr = [];\narr['key'] = 'value'; // Bad practice",
          "isCorrect": false
        },
        {
          "snippet": "const map = new Map<string, string>();\nmap.set('key', 'value');",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "maintainability"],
      "scope": "file"
    },
    {
      "uuid": "8a38af86-2e9f-4fe1-9c9d-6c75f62b3563",
      "title": "Mark Properties as readonly If Not Reassigned",
      "rule": "Check if properties that are never reassigned are marked as readonly. This improves code clarity and prevents unintended reassignment.",
      "why_is_this_important": "Marking properties as readonly improves code clarity and prevents unintended reassignment.",
      "severity": "Medium",
      "bad_example": "class User {\n  title: string = \"John\";\n}",
      "good_example": "class User {\n  readonly title: string = \"John\";\n}\n",
      "examples": [
        {
          "snippet": "class User {\n  title: string = \"John\";\n}",
          "isCorrect": false
        },
        {
          "snippet": "class User {\n  readonly title: string = \"John\";\n}\n",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "7b302d88-2166-4652-8c58-deda6a6d4cd7",
      "title": "Always Use isFinite to Validate Numbers",
      "rule": "Ensure that isFinite is used to validate numbers. Without this, NaN or Infinity can cause unexpected behavior and runtime errors.",
      "why_is_this_important": "Validating numbers without isFinite can lead to unexpected behavior with NaN or Infinity, which can cause runtime errors.",
      "severity": "Medium",
      "bad_example": "const value = Number(\"Not a Number\");\nif (value) {\n  console.log(\"Valid number\"); // Will not catch NaN or Infinity\n}",
      "good_example": "const value = Number(\"Not a Number\");\nif (isFinite(value)) {\n  console.log(\"Valid number\");\n}\n",
      "examples": [
        {
          "snippet": "const value = Number(\"Not a Number\");\nif (value) {\n  console.log(\"Valid number\"); // Will not catch NaN or Infinity\n}",
          "isCorrect": false
        },
        {
          "snippet": "const value = Number(\"Not a Number\");\nif (isFinite(value)) {\n  console.log(\"Valid number\");\n}\n",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "uuid": "d180d23b-5c28-4e77-946a-821578e81e6d",
      "title": "Avoid unsafe type assertions",
      "rule": "Detect cases of unsafe type assertions. These do not perform runtime checks and can lead to unexpected runtime errors. Recommend using proper type guards instead.",
      "why_is_this_important": "Unsafe type assertions do not perform runtime checks, leading to potential runtime errors if the assertion is incorrect. Use proper type checks instead.",
      "severity": "High",
      "bad_example": "const element = document.getElementById(\"myId\") as HTMLInputElement;\nelement.value = \"Hello\"; // Unsafe if the element is not an input",
      "good_example": "const element = document.getElementById(\"myId\");\nif (element instanceof HTMLInputElement) {\n  element.value = \"Hello\";\n}\n",
      "examples": [
        {
          "snippet": "const element = document.getElementById(\"myId\") as HTMLInputElement;\nelement.value = \"Hello\"; // Unsafe if the element is not an input",
          "isCorrect": false
        },
        {
          "snippet": "const element = document.getElementById(\"myId\");\nif (element instanceof HTMLInputElement) {\n  element.value = \"Hello\";\n}\n",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "maintainability"],
      "scope": "file"
    },
    {
      "uuid": "b0276f98-d47a-4c59-bfe8-4ab3015e794a",
      "title": "Use destructuring for function parameters",
      "rule": "Ensure that destructuring is used in function parameters where applicable. This improves readability by clearly showing accessed properties and default values.",
      "why_is_this_important": " Destructuring makes code more readable by clearly showing which properties are being accessed and their defaults.",
      "severity": "Medium",
      "bad_example": "function configure(options: { key?: string, value?: number }) {\n  const key = options.key || \"defaultKey\";\n  const value = options.value || 0;\n}",
      "good_example": "function configure({ key = \"defaultKey\", value = 0 }: { key?: string; value?: number }) {}",
      "examples": [
        {
          "snippet": "function configure(options: { key?: string, value?: number }) {\n  const key = options.key || \"defaultKey\";\n  const value = options.value || 0;\n}",
          "isCorrect": false
        },
        {
          "snippet": "function configure({ key = \"defaultKey\", value = 0 }: { key?: string; value?: number }) {}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "7db791c3-3e62-4227-a5a8-2fa64267cd4a",
      "title": "Use Template Literals Instead of String Concatenation",
      "rule": "Check for cases of string concatenation using +. Template literals improve readability and are less error-prone.",
      "why_is_this_important": "Destructuring improves readability by clearly defining which properties are accessed and their default values.",
      "severity": "Medium",
      "bad_example": "const message = \"Hello, \" + title + \"!\"\n",
      "good_example": "const message = `Hello, ${title}!`;\n",
      "examples": [
        {
          "snippet": "const message = \"Hello, \" + title + \"!\"\n",
          "isCorrect": false
        },
        {
          "snippet": "const message = `Hello, ${title}!`;\n",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": [
        "performance-efficiency",
        "readability-refactor",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "uuid": "16c49f48-5d5a-4bdd-97a4-6a9cfd7fbb44",
      "title": "Avoid empty catch blocks",
      "rule": "Ensure that catch blocks do not remain empty. Empty catch blocks hide errors, making debugging difficult. Recommend logging or handling errors properly.",
      "why_is_this_important": "Empty catch blocks hide errors and make debugging difficult. Always log or handle errors properly to prevent silent failures.",
      "severity": "High",
      "bad_example": "try {\n  doSomething();\n} catch (e) {\n  // Ignored\n}",
      "good_example": "try {\n  doSomething();\n} catch (e) {\n  console.error(\"Error occurred:\", e);\n}\n",
      "examples": [
        {
          "snippet": "try {\n  doSomething();\n} catch (e) {\n  // Ignored\n}",
          "isCorrect": false
        },
        {
          "snippet": "try {\n  doSomething();\n} catch (e) {\n  console.error(\"Error occurred:\", e);\n}\n",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "observability-logging"],
      "scope": "file"
    },
    {
      "uuid": "8e399cb6-c9ec-4d05-9143-a2a28e349f80",
      "title": "Avoid modifying built-in prototypes",
      "rule": "Detect modifications to built-in prototypes. Modifying built-in objects can lead to compatibility issues and unexpected behavior. Recommend creating helper functions instead.",
      "why_is_this_important": "Modifying built-in prototypes can lead to compatibility issues and unexpected behavior, especially when working with third-party libraries. Create helper functions instead.",
      "severity": "Critical",
      "bad_example": "String.prototype.toCustomCase = function () {\n  return this.toUpperCase();\n};",
      "good_example": "function toCustomCase(value: string): string {\n  return value.toUpperCase();\n}",
      "examples": [
        {
          "snippet": "String.prototype.toCustomCase = function () {\n  return this.toUpperCase();\n};",
          "isCorrect": false
        },
        {
          "snippet": "function toCustomCase(value: string): string {\n  return value.toUpperCase();\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["maintainability", "security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "7fdc65b8-2627-4328-97f0-88f31899f663",
      "title": "Interactive DOM elements should not have non-interactive ARIA roles",
      "rule": "Ensure that interactive DOM elements have appropriate ARIA roles. Incorrect roles can mislead assistive technologies, affecting accessibility.",
      "why_is_this_important": "Assigning non-interactive ARIA roles to interactive elements can mislead assistive technologies, causing accessibility issues. Always ensure elements have appropriate roles.",
      "severity": "High",
      "bad_example": "function myButton() {\n    return <button role=\"article\">Click me!</button>; // Noncompliant; \"button\" is interactive, but \"article\" isn't\n}",
      "good_example": "function myButton() {\n    return <button role=\"button\">Click me!</button>;\n}",
      "examples": [
        {
          "snippet": "function myButton() {\n    return <button role=\"article\">Click me!</button>; // Noncompliant; \"button\" is interactive, but \"article\" isn't\n}",
          "isCorrect": false
        },
        {
          "snippet": "function myButton() {\n    return <button role=\"button\">Click me!</button>;\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["accessibility-a11y"],
      "scope": "file"
    },
    {
      "uuid": "fe2f45b6-4e78-453d-94c8-c714359427b0",
      "title": "DOM elements should use the autocomplete attribute correctly",
      "rule": "Check for missing or incorrect autocomplete attributes. Proper use of autocomplete improves accessibility and usability, especially for screen readers.",
      "why_is_this_important": "Missing or incorrect autocomplete values hinder accessibility and usability, especially for screen readers. Ensure valid and meaningful autocomplete values are applied.",
      "severity": "Low",
      "bad_example": "function MyInput() {\n    return <input type=\"text\" autocomplete=\"foo\" />; // Noncompliant\n}",
      "good_example": "function MyInput() {\n    return <input type=\"text\" autocomplete=\"title\" />;\n}",
      "examples": [
        {
          "snippet": "function MyInput() {\n    return <input type=\"text\" autocomplete=\"foo\" />; // Noncompliant\n}",
          "isCorrect": false
        },
        {
          "snippet": "function MyInput() {\n    return <input type=\"text\" autocomplete=\"title\" />;\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["accessibility-a11y", "security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "2ae3325f-b8f4-46ea-9c2b-83f19a81c290",
      "title": "String references should not be used",
      "rule": "Ensure that string refs are not used in React. String refs are deprecated, make components harder to maintain, and reduce composability. Recommend using function-based refs instead.",
      "why_is_this_important": "Using string refs in React is deprecated and makes the component slower, harder to maintain, and less composable. Use function-based refs instead.",
      "severity": "Medium",
      "bad_example": "const Hello = createReactClass({\n  componentDidMount() {\n    const component = this.refs.hello; // Noncompliant\n    // ...\n  },\n  render() {\n    return <div ref=\"hello\">Hello, world.</div>;\n  }\n});",
      "good_example": "const Hello = createReactClass({\n  componentDidMount() {\n    const component = this.hello;\n    // ...\n  },\n  render() {\n    return <div ref={(c) => { this.hello = c; }}>Hello, world.</div>;\n  }\n});",
      "examples": [
        {
          "snippet": "const Hello = createReactClass({\n  componentDidMount() {\n    const component = this.refs.hello; // Noncompliant\n    // ...\n  },\n  render() {\n    return <div ref=\"hello\">Hello, world.</div>;\n  }\n});",
          "isCorrect": false
        },
        {
          "snippet": "const Hello = createReactClass({\n  componentDidMount() {\n    const component = this.hello;\n    // ...\n  },\n  render() {\n    return <div ref={(c) => { this.hello = c; }}>Hello, world.</div>;\n  }\n});",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["maintainability", "stack-react"],
      "scope": "file"
    },
    {
      "uuid": "a30c4316-9e08-4e77-a975-666f262d28e0",
      "title": "\"this\" should not be used in functional components\n",
      "rule": "Ensure that 'this' is not used in functional components. Functional components do not have a 'this' context. Use props and destructuring for data access instead.",
      "why_is_this_important": "Functional components do not have a 'this' context. Using 'this' leads to runtime errors. Instead, use props and destructuring for data access.",
      "severity": "High",
      "bad_example": "function MyComponent(props){\n    const foo = this.props.bar; // Noncompliant: remove 'this'\n    return (\n        <div>{foo}</div>\n    );\n}",
      "good_example": "function MyComponent({bar}){\n    const foo = bar;\n    return (\n        <div>{foo}</div>\n    );\n}",
      "examples": [
        {
          "snippet": "function MyComponent(props){\n    const foo = this.props.bar; // Noncompliant: remove 'this'\n    return (\n        <div>{foo}</div>\n    );\n}",
          "isCorrect": false
        },
        {
          "snippet": "function MyComponent({bar}){\n    const foo = bar;\n    return (\n        <div>{foo}</div>\n    );\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "stack-react"],
      "scope": "file"
    },
    {
      "uuid": "93d12f34-5178-4299-ae39-9114b081eba0",
      "title": "React \"render\" functions should return a value\n",
      "rule": "Ensure that React class components' render functions return a value. Forgetting a return statement results in missing UI elements and potential bugs.",
      "why_is_this_important": "React class components require the render function to return a value. Forgetting a return statement results in missing UI elements and potential bugs.",
      "severity": "High",
      "bad_example": "const React = require('react');\nclass MyComponent extends React.Component {\n  render() {\n    <div>Contents</div>; // Noncompliant: The render function returns nothing\n  }\n}",
      "good_example": "const React = require('react');\nclass MyComponent extends React.Component {\n  render() {\n    return <div>Contents</div>;\n  }\n}",
      "examples": [
        {
          "snippet": "const React = require('react');\nclass MyComponent extends React.Component {\n  render() {\n    <div>Contents</div>; // Noncompliant: The render function returns nothing\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "const React = require('react');\nclass MyComponent extends React.Component {\n  render() {\n    return <div>Contents</div>;\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["error-handling", "stack-react", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "072c0f3d-b363-4417-aec5-cc1e82c9ee11",
      "title": "Ensure JSX list components have a key property",
      "rule": "Check that JSX list components have unique key properties. Missing keys can cause unnecessary re-renders and lead to state inconsistencies.",
      "why_is_this_important": "React uses keys to optimize list rendering. Missing keys cause unnecessary re-renders and can lead to state inconsistencies.",
      "severity": "High",
      "bad_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li> <!-- Noncompliant: When 'posts' are reordered, React will need to recreate the list DOM -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
      "good_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}> <!-- Compliant: id will always be the same even if 'posts' order changes -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
      "examples": [
        {
          "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li> <!-- Noncompliant: When 'posts' are reordered, React will need to recreate the list DOM -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
          "isCorrect": false
        },
        {
          "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}> <!-- Compliant: id will always be the same even if 'posts' order changes -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "buckets": ["performance-efficiency", "stack-react", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "463dde77-7ab9-458b-84f1-8f4bb863c3b1",
      "title": "Use Module Imports Instead of Importing Specific Classes or Functions",
      "rule": "Check if the code imports individual classes or functions instead of the entire module. Directly importing specific classes or functions can clutter the titlespace and increase naming conflicts. Recommend importing the module and referencing items explicitly.",
      "why_is_this_important": "Importing individual classes or functions directly can clutter the titlespace, making it harder to track where objects come from. This increases the risk of naming conflicts and reduces code clarity. Instead, import the module and reference items explicitly.",
      "severity": "Low",
      "bad_example": "from math import sqrt\nresult = sqrt(16)",
      "good_example": "import math\nresult = math.sqrt(16)",
      "language": "python",
      "examples": [
        {
          "snippet": "from math import sqrt\nresult = sqrt(16)",
          "isCorrect": false
        },
        {
          "snippet": "import math\nresult = math.sqrt(16)",
          "isCorrect": true
        }
      ],
      "buckets": [
        "module-architecture",
        "readability-refactor",
        "style-conventions",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "uuid": "fd9b9ad0-347c-48bd-b178-1e4b40dafbcf",
      "title": "Avoid Mutable Objects as Default Arguments",
      "rule": "Identify function definitions where a mutable object (e.g., list, dictionary, set) is used as a default argument. This can cause shared state across function calls, leading to unintended behavior. Suggest using `None` as a default and initializing the object inside the function.",
      "why_is_this_important": "Using mutable objects (like lists or dictionaries) as default arguments can cause unexpected behavior. Since Python reuses the same object across multiple function calls, changes persist between calls, leading to bugs that are difficult to debug.",
      "severity": "High",
      "bad_example": "def append_to_list(value, my_list=[]):\n    my_list.append(value)\n    return my_list",
      "good_example": "def append_to_list(value, my_list=None):\n    if my_list is None:\n        my_list = []\n    my_list.append(value)\n    return my_list",
      "language": "python",
      "examples": [
        {
          "snippet": "def append_to_list(value, my_list=[]):\n    my_list.append(value)\n    return my_list",
          "isCorrect": false
        },
        {
          "snippet": "def append_to_list(value, my_list=None):\n    if my_list is None:\n        my_list = []\n    my_list.append(value)\n    return my_list",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "b31b7578-5e8a-4f9b-9560-27f2d895d47f",
      "title": "Avoid Generic `except:` Blocks",
      "rule": "Detect `except:` blocks that catch all exceptions indiscriminately. Using a broad `except:` can hide real issues and prevent necessary errors like `KeyboardInterrupt`. Recommend catching specific exceptions instead.",
      "why_is_this_important": "Catching all exceptions with a broad `except:` block hides real issues, including unexpected errors. It can also prevent important exceptions like `KeyboardInterrupt` from stopping the program properly, making debugging more difficult. Always catch specific exceptions instead.",
      "severity": "High",
      "bad_example": "try:\n    result = 10 / 0\nexcept:\n    print('An error occurred')",
      "good_example": "try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')",
      "language": "python",
      "examples": [
        {
          "snippet": "try:\n    result = 10 / 0\nexcept:\n    print('An error occurred')",
          "isCorrect": false
        },
        {
          "snippet": "try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "0ef6c30f-749f-4205-b0a4-7914ba7ad48b",
      "title": "Always Use `with` for Managing Resources",
      "rule": "Ensure that resources such as files, sockets, or database connections are managed using the `with` statement. Code that explicitly calls `.close()` without `with` should be refactored to use context managers for automatic resource cleanup.",
      "why_is_this_important": "Forgetting to close resources like files or sockets can lead to memory leaks or unexpected behavior. The `with` statement ensures resources are properly released, even if an error occurs.",
      "severity": "Medium",
      "bad_example": "file = open('test.txt', 'r')\ndata = file.read()\nfile.close()",
      "good_example": "with open('test.txt', 'r') as file:\n    data = file.read()",
      "language": "python",
      "examples": [
        {
          "snippet": "file = open('test.txt', 'r')\ndata = file.read()\nfile.close()",
          "isCorrect": false
        },
        {
          "snippet": "with open('test.txt', 'r') as file:\n    data = file.read()",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "performance-efficiency", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "8faa2b6e-0c69-4699-94c2-e757aac4f71e",
      "title": "Use Absolute Imports Instead of Relative Imports",
      "rule": "Detect relative imports (e.g., `from .module import x`). Relative imports can break if the project structure changes. Recommend using absolute imports (`from package.module import x`) for better clarity and maintainability.",
      "why_is_this_important": "Relative imports can make the code harder to understand and maintain, especially in large projects. They can also break when the project structure changes. Absolute imports make dependencies clearer and more reliable.",
      "severity": "Medium",
      "bad_example": "from .module import MyClass",
      "good_example": "from project.module import MyClass",
      "language": "python",
      "examples": [
        {
          "snippet": "from .module import MyClass",
          "isCorrect": false
        },
        {
          "snippet": "from project.module import MyClass",
          "isCorrect": true
        }
      ],
      "buckets": [
        "maintainability",
        "module-architecture",
        "stack-python",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "uuid": "136deba4-3bb8-455e-bdab-425fb29a155f",
      "title": "Use Type Annotations for Better Readability",
      "rule": "Check if function signatures include type annotations. Type hints improve readability and help catch type-related errors early. Recommend adding type annotations where missing.",
      "why_is_this_important": "Type annotations improve code clarity, making it easier to understand function inputs and outputs. They also help catch type-related errors early, reducing debugging time.",
      "severity": "Medium",
      "bad_example": "def add(a, b):\n    return a + b",
      "good_example": "def add(a: int, b: int) -> int:\n    return a + b",
      "language": "python",
      "examples": [
        {
          "snippet": "def add(a, b):\n    return a + b",
          "isCorrect": false
        },
        {
          "snippet": "def add(a: int, b: int) -> int:\n    return a + b",
          "isCorrect": true
        }
      ],
      "buckets": [
        "maintainability",
        "readability-refactor",
        "stack-python",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "uuid": "52edc4de-b503-4e80-8087-acb8aa289d54",
      "title": "Document Exceptions in Function Docstrings",
      "rule": "Identify functions that raise exceptions but do not document them in docstrings. Missing exception documentation makes it difficult to understand failure cases. Suggest adding an `:raises` section in the docstring.",
      "why_is_this_important": "If a function raises exceptions but doesn't document them, it can be unclear what errors to expect. This makes it harder to use the function safely and handle potential failures correctly.",
      "severity": "High",
      "bad_example": "def fetch_data():\n    if error:\n        raise ValueError('Invalid data')",
      "good_example": "def fetch_data():\n    \"\"\"\n    Fetches data from the database.\n\n    Raises:\n        ValueError: If the data is invalid.\n    \"\"\"\n    if error:\n        raise ValueError(\"Invalid data\")",
      "language": "python",
      "examples": [
        {
          "snippet": "def fetch_data():\n    if error:\n        raise ValueError('Invalid data')",
          "isCorrect": false
        },
        {
          "snippet": "def fetch_data():\n    \"\"\"\n    Fetches data from the database.\n\n    Raises:\n        ValueError: If the data is invalid.\n    \"\"\"\n    if error:\n        raise ValueError(\"Invalid data\")",
          "isCorrect": true
        }
      ],
      "buckets": [
        "docs-adrs",
        "error-handling",
        "maintainability",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "uuid": "2b53473b-a9c5-4c7a-a681-b14d642364db",
      "title": "Keep Lines Under 80 Characters for Readability",
      "rule": "Check if lines exceed 80 characters (excluding comments and docstrings). Long lines reduce readability. Recommend breaking lines or using line continuations for better formatting.",
      "why_is_this_important": "Long lines can make code harder to read, especially on smaller screens or in side-by-side comparisons. Keeping lines short improves readability and maintainability.",
      "severity": "Low",
      "bad_example": "result = [mapping_expr for value in iterable if condition(value)]",
      "good_example": "result = [\n    mapping_expr\n    for value in iterable\n    if condition(value)\n]",
      "language": "python",
      "examples": [
        {
          "snippet": "result = [mapping_expr for value in iterable if condition(value)]",
          "isCorrect": false
        },
        {
          "snippet": "result = [\n    mapping_expr\n    for value in iterable\n    if condition(value)\n]",
          "isCorrect": true
        }
      ],
      "buckets": ["readability-refactor", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "9925f859-7b11-4a1d-ac12-1455e0cdc749",
      "title": "Prefer f-strings for String Formatting",
      "rule": "Detect string formatting using `.format()` or `%`. These methods are less readable and slower than f-strings. Recommend converting string formatting to f-strings for better readability and performance.",
      "why_is_this_important": "Using `.format()` or `%` for string formatting can be less readable and more error-prone. f-strings are faster, more concise, and improve code clarity.",
      "severity": "Medium",
      "bad_example": "Hello, {}'.format(title)",
      "good_example": "f'Hello, {title}'",
      "language": "python",
      "examples": [
        {
          "snippet": "Hello, {}'.format(title)",
          "isCorrect": false
        },
        {
          "snippet": "f'Hello, {title}'",
          "isCorrect": true
        }
      ],
      "buckets": [
        "performance-efficiency",
        "readability-refactor",
        "stack-python",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "uuid": "66903ede-9f31-4ce3-913f-fd02a31c8c65",
      "title": "Don’t Use `assert` for Data Validation",
      "rule": "Ensure that `assert` is not used for validating user input or critical checks. Assertions can be disabled in optimized mode (`python -O`). Recommend using explicit validation with `if` conditions and raising proper exceptions.",
      "why_is_this_important": "Assertions can be disabled in production, meaning critical checks might not run. Use explicit validation with exceptions to ensure errors are handled properly.",
      "severity": "Critical",
      "bad_example": "assert x > 0, 'x must be positive'",
      "good_example": "if x <= 0:\n    raise ValueError('x must be positive')",
      "language": "python",
      "examples": [
        {
          "snippet": "assert x > 0, 'x must be positive'",
          "isCorrect": false
        },
        {
          "snippet": "if x <= 0:\n    raise ValueError('x must be positive')",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "7160cdf8-b8a3-450e-a478-2ab7fe0aa363",
      "title": "Use `is` When Comparing with `None`",
      "rule": "Identify occurrences where `== None` or `!= None` is used. Using `is None` and `is not None` is more reliable because it checks identity instead of equality, preventing potential issues with overloaded `__eq__` methods.",
      "why_is_this_important": "Using `==` to check for `None` can fail if an object overrides equality (`__eq__`). The correct way to check for `None` is with `is`, which is more reliable.",
      "severity": "Medium",
      "bad_example": "if value == None:",
      "good_example": "if value is None:",
      "language": "python",
      "examples": [
        {
          "snippet": "if value == None:",
          "isCorrect": false
        },
        {
          "snippet": "if value is None:",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "047de581-d842-41e9-8e60-b1aa7ceb3bb3",
      "title": "Remove Unnecessary Trailing Whitespace",
      "rule": "Detect lines with trailing whitespace. Trailing spaces add unnecessary noise to version control diffs. Recommend removing them to keep the codebase clean.",
      "why_is_this_important": "Trailing whitespace adds noise to version control diffs and makes the codebase look untidy. Keeping code clean improves maintainability.",
      "severity": "Low",
      "bad_example": "x = 42",
      "good_example": "x = 42",
      "language": "python",
      "examples": [
        {
          "snippet": "x = 42",
          "isCorrect": false
        },
        {
          "snippet": "x = 42",
          "isCorrect": true
        }
      ],
      "buckets": ["maintainability", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "dba6cbe1-2bca-4b8c-9edc-8be04349a3b0",
      "title": "Explicitly Close Resources in `finally` Blocks",
      "rule": "Check if resources such as files or database connections are properly closed in a `finally` block. This ensures resources are always released, even if an exception occurs.",
      "why_is_this_important": "Failing to close files, sockets, or other resources can cause memory leaks and unexpected behavior. Placing cleanup code in a `finally` block ensures resources are always released, even if an error occurs.",
      "severity": "High",
      "bad_example": "file = open('test.txt')\ndata = file.read()",
      "good_example": "try:\n    file = open('test.txt')\n    data = file.read()\nfinally:\n    file.close()",
      "language": "python",
      "examples": [
        {
          "snippet": "file = open('test.txt')\ndata = file.read()",
          "isCorrect": false
        },
        {
          "snippet": "try:\n    file = open('test.txt')\n    data = file.read()\nfinally:\n    file.close()",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "performance-efficiency", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "07ff5369-d341-4f68-bbbb-218c9d66b994",
      "title": "Keep `try` Blocks Small and Focused",
      "rule": "Detect `try` blocks that contain excessive code. Large `try` blocks make it harder to debug errors. Recommend narrowing the scope of the `try` block to only the necessary code.",
      "why_is_this_important": "Large `try` blocks make it harder to pinpoint what caused an exception. Keeping them small ensures that only the necessary code is monitored for errors.",
      "severity": "Medium",
      "bad_example": "try:\n    x = 10\n    y = x / 0\n    print(y)\nexcept ZeroDivisionError:\n    print('Error')",
      "good_example": "x = 10\ntry:\n    y = x / 0\nexcept ZeroDivisionError:\n    print('Error')",
      "language": "python",
      "examples": [
        {
          "snippet": "try:\n    x = 10\n    y = x / 0\n    print(y)\nexcept ZeroDivisionError:\n    print('Error')",
          "isCorrect": false
        },
        {
          "snippet": "x = 10\ntry:\n    y = x / 0\nexcept ZeroDivisionError:\n    print('Error')",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "readability-refactor", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "25ba8302-60a5-46e3-bb60-c9acc794a415",
      "title": "Avoid Using Mutable Global Variables",
      "rule": "Identify global variables that are mutable (e.g., lists, dictionaries). Global mutable state can cause unpredictable behavior. Recommend using local variables or encapsulating state in a class.",
      "why_is_this_important": "Global mutable state can lead to unpredictable behavior, making debugging and testing more difficult. Functions should use local variables or class attributes instead.",
      "severity": "High",
      "bad_example": "global_state = {}\n\ndef update_state(key, value):\n    global global_state\n    global_state[key] = value",
      "good_example": "class GlobalState:\n    def __init__(self):\n        self.state = {}\n\n    def update_state(self, key, value):\n        self.state[key] = value\n\nglobal_state = GlobalState()\nglobal_state.update_state(\"key\", \"\n",
      "language": "python",
      "examples": [
        {
          "snippet": "global_state = {}\n\ndef update_state(key, value):\n    global global_state\n    global_state[key] = value",
          "isCorrect": false
        },
        {
          "snippet": "class GlobalState:\n    def __init__(self):\n        self.state = {}\n\n    def update_state(self, key, value):\n        self.state[key] = value\n\nglobal_state = GlobalState()\nglobal_state.update_state(\"key\", \"\n",
          "isCorrect": true
        }
      ],
      "buckets": ["concurrency-safety", "maintainability", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "5da88434-3f09-4aa8-a526-985ebcda0fc9",
      "title": "Use Comprehensions for Simple Cases Only",
      "rule": "Ensure that list, set, or dictionary comprehensions are not overly complex. If a comprehension includes multiple conditions or nested loops, recommend refactoring to a regular loop for better readability.",
      "why_is_this_important": "Overly complex comprehensions can reduce readability and maintainability of the code. If a comprehension has multiple conditions or nested loops, consider using a regular loop for better clarity.",
      "severity": "Medium",
      "bad_example": "result = [(x, y) for x in range(10) for y in range(5) if x * y > 10]",
      "good_example": "result = []\nfor x in range(10):\n    for y in range(5):\n        if x * y > 10:\n            result.append((x, y))\n",
      "language": "python",
      "examples": [
        {
          "snippet": "result = [(x, y) for x in range(10) for y in range(5) if x * y > 10]",
          "isCorrect": false
        },
        {
          "snippet": "result = []\nfor x in range(10):\n    for y in range(5):\n        if x * y > 10:\n            result.append((x, y))\n",
          "isCorrect": true
        }
      ],
      "buckets": ["readability-refactor", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "376a35b7-e84a-44b7-af28-387ab7751c8d",
      "title": "Use `finally` for Resource Cleanup",
      "rule": "Detect code where resources (files, sockets, etc.) are not closed in a `finally` block. Using `finally` ensures that resources are released, even if an exception is raised.",
      "why_is_this_important": "Failing to close resources like files or sockets can lead to resource leaks and undefined behavior. Using `finally` ensures resources are released even if an error occurs.",
      "severity": "High",
      "bad_example": "file = open(\"test.txt\")\ndata = file.read()",
      "good_example": "try:\n    file = open(\"test.txt\")\n    data = file.read()\nfinally:\n    file.close()\n",
      "language": "python",
      "examples": [
        {
          "snippet": "file = open(\"test.txt\")\ndata = file.read()",
          "isCorrect": false
        },
        {
          "snippet": "try:\n    file = open(\"test.txt\")\n    data = file.read()\nfinally:\n    file.close()\n",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "performance-efficiency", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "704d205a-4831-49b1-89a3-779912d58c7f",
      "title": "Avoid Overuse of Lambda Functions",
      "rule": "Identify lambda functions that are too complex. Lambdas should be simple and concise. If a lambda contains multiple expressions, recommend converting it to a titled function for better readability.",
      "why_is_this_important": "Lambdas are useful for short, simple functions, but complex ones can be harder to read and debug. Use titled functions when more clarity is needed.",
      "severity": "Medium",
      "bad_example": "items.sort(key=lambda x: x[0] * x[1] - x[2] ** 2)",
      "good_example": "def custom_sort_key(item):\n    return item[0] * item[1] - item[2] ** 2\n\nitems.sort(key=custom_sort_key)",
      "language": "python",
      "examples": [
        {
          "snippet": "items.sort(key=lambda x: x[0] * x[1] - x[2] ** 2)",
          "isCorrect": false
        },
        {
          "snippet": "def custom_sort_key(item):\n    return item[0] * item[1] - item[2] ** 2\n\nitems.sort(key=custom_sort_key)",
          "isCorrect": true
        }
      ],
      "buckets": ["readability-refactor", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "33c9776e-1324-44fb-9582-83d2238e1b8d",
      "title": "Avoid Default Mutable Arguments",
      "rule": "Detect function definitions that use mutable objects (lists, dictionaries) as default arguments. This can lead to unintended shared state. Recommend using `None` as the default and initializing the object inside the function.",
      "why_is_this_important": "Using mutable objects as default arguments can lead to unexpected behavior since the same object is shared across function calls. Use `None` as a default and initialize the object inside the function.",
      "severity": "High",
      "bad_example": "def add_item_to_list(item, my_list=[]):\n    my_list.append(item)\n    return my_list\n",
      "good_example": "def add_item_to_list(item, my_list=None):\n    if my_list is None:\n        my_list = []\n    my_list.append(item)\n    return my_list\n",
      "language": "python",
      "examples": [
        {
          "snippet": "def add_item_to_list(item, my_list=[]):\n    my_list.append(item)\n    return my_list\n",
          "isCorrect": false
        },
        {
          "snippet": "def add_item_to_list(item, my_list=None):\n    if my_list is None:\n        my_list = []\n    my_list.append(item)\n    return my_list\n",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "a3a2f891-01a7-42e7-9f8d-7792ca460024",
      "title": "Avoid Semicolons",
      "rule": "Check if semicolons are used at the end of statements in Python code. Semicolons are unnecessary and may cause readability issues or errors when multiple statements are placed on one line. Recommend using new lines instead.",
      "why_is_this_important": "Semicolons are unnecessary in Python and can create visual clutter. They may also lead to errors when combining multiple statements on one line. Use new lines instead.",
      "severity": "Medium",
      "bad_example": "x = 1; y = 2; print(x + y)",
      "good_example": "x = 1\ny = 2\nprint(x + y)\n",
      "language": "python",
      "examples": [
        {
          "snippet": "x = 1; y = 2; print(x + y)",
          "isCorrect": false
        },
        {
          "snippet": "x = 1\ny = 2\nprint(x + y)\n",
          "isCorrect": true
        }
      ],
      "buckets": ["readability-refactor", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "a53d2421-7969-428c-a5ab-3991d0d58446",
      "title": "Use Type Annotations for Public APIs",
      "rule": "Ensure that functions in public APIs include type annotations. Type annotations improve code clarity and help catch type-related errors early. Recommend adding them where missing.",
      "why_is_this_important": "Type annotations improve the maintainability and readability of code and help catch type-related errors during development.",
      "severity": "Medium",
      "bad_example": "def add(a, b):\n    return a + b",
      "good_example": "def add(a: int, b: int) -> int:\n    return a + b",
      "language": "python",
      "examples": [
        {
          "snippet": "def add(a, b):\n    return a + b",
          "isCorrect": false
        },
        {
          "snippet": "def add(a: int, b: int) -> int:\n    return a + b",
          "isCorrect": true
        }
      ],
      "buckets": [
        "maintainability",
        "readability-refactor",
        "stack-python",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "uuid": "f3e395c0-36de-4959-bf30-46db154ee103",
      "title": "Call `model.eval()` or `model.train()` After Loading a PyTorch Model",
      "rule": "Verify that after loading a PyTorch model, either `model.eval()` or `model.train()` is called. Failing to do so can result in incorrect behavior, especially for layers like dropout and batch normalization.",
      "why_is_this_important": "When loading a model’s state in PyTorch, failing to set it to training (`train()`) or evaluation (`eval()`) mode can lead to incorrect behavior.",
      "severity": "High",
      "bad_example": "import torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth')) # Noncompliant: model.train() or model.eval() was not called.",
      "good_example": "import torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth'))\nmodel.eval()",
      "language": "python",
      "examples": [
        {
          "snippet": "import torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth')) # Noncompliant: model.train() or model.eval() was not called.",
          "isCorrect": false
        },
        {
          "snippet": "import torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth'))\nmodel.eval()",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "4d38958d-7ad0-46d2-8981-eb6d2501b1c2",
      "title": "Prefer `str.replace()` Over `re.sub()` for Simple Cases",
      "rule": "Detect uses of `re.sub()` where regular expressions are not needed. For simple string replacements, `str.replace()` is more efficient and should be used instead.",
      "why_is_this_important": "Using `re.sub()` when no regex features are needed is inefficient. `str.replace()` is faster and should be used for simple string replacements.",
      "severity": "Critical",
      "bad_example": "init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = re.sub(r\"Bob is\", \"It's\", init) # Noncompliant\nchanged = re.sub(r\"\\.\\.\\.\", \";\", changed) # Noncompliant",
      "good_example": "init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = init.replace(\"Bob is\", \"It's\")\nchanged = changed.replace(\"...\", \";\")",
      "language": "python",
      "examples": [
        {
          "snippet": "init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = re.sub(r\"Bob is\", \"It's\", init) # Noncompliant\nchanged = re.sub(r\"\\.\\.\\.\", \";\", changed) # Noncompliant",
          "isCorrect": false
        },
        {
          "snippet": "init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = init.replace(\"Bob is\", \"It's\")\nchanged = changed.replace(\"...\", \";\")",
          "isCorrect": true
        }
      ],
      "buckets": ["performance-efficiency", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "f62bb5e2-d2f3-4969-9dff-8cfadf1d0982",
      "title": "Ensure Function Arguments Match Expected Parameters",
      "rule": "Identify function calls where the number of arguments passed does not match the expected parameters. This often results in a `TypeError`. Suggest reviewing function signatures.",
      "why_is_this_important": "Passing too few or too many arguments to a function causes `TypeError`. This often indicates a mistake in function calls.",
      "severity": "High",
      "bad_example": "",
      "good_example": "",
      "language": "python",
      "examples": [],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "33c45a80-cbfa-4b16-a90f-074b81e06bb3",
      "title": "Prevent Memory Allocation Vulnerabilities",
      "rule": "Check if memory allocation sizes are derived from untrusted input. Attackers may exploit this to crash the program or consume excessive resources. Recommend validating and limiting allocation sizes.",
      "why_is_this_important": "If memory allocation size is determined by untrusted input, attackers can exploit it to crash the program or cause excessive resource usage.",
      "severity": "High",
      "bad_example": "def example():\n    limit = int(request.args.get('limit'))\n\n    data = '#' * limit  # Noncompliant",
      "good_example": "def example():\n    limit = int(request.args.get('limit'))\n    restricted_limit = min(10, limit)\n\n    data = '#' * restricted_limit",
      "language": "python",
      "examples": [
        {
          "snippet": "def example():\n    limit = int(request.args.get('limit'))\n\n    data = '#' * limit  # Noncompliant",
          "isCorrect": false
        },
        {
          "snippet": "def example():\n    limit = int(request.args.get('limit'))\n    restricted_limit = min(10, limit)\n\n    data = '#' * restricted_limit",
          "isCorrect": true
        }
      ],
      "buckets": ["security-hardening", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "2a38dfe5-0510-4ca5-aac1-a0ba185a3221",
      "title": "Ensure `__init__` Does Not Return a Value",
      "rule": "Verify that `__init__` methods always return `None`. Returning any other value causes a `TypeError` and prevents correct object instantiation.",
      "why_is_this_important": "Python’s `__init__` method should always return `None`. Returning anything else will raise a `TypeError` and break object instantiation.",
      "severity": "High",
      "bad_example": "class MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n        return self  # Noncompliant: a TypeError will be raised",
      "good_example": "class MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'",
      "language": "python",
      "examples": [
        {
          "snippet": "class MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n        return self  # Noncompliant: a TypeError will be raised",
          "isCorrect": false
        },
        {
          "snippet": "class MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "ae5f66f6-5021-40f2-9402-24e417a7e42e",
      "title": "Write One Statement Per Line for Clarity",
      "rule": "Detect multiple statements on the same line, separated by semicolons. This reduces readability and debugging efficiency. Recommend placing each statement on its own line.",
      "why_is_this_important": "Placing multiple statements on the same line makes code harder to read and debug. Keeping one statement per line improves clarity.",
      "severity": "Medium",
      "bad_example": "if (True): print(\"hello\") # Noncompliant",
      "good_example": "if (True):\n    print(\"hello\")",
      "language": "python",
      "examples": [
        {
          "snippet": "if (True): print(\"hello\") # Noncompliant",
          "isCorrect": false
        },
        {
          "snippet": "if (True):\n    print(\"hello\")",
          "isCorrect": true
        }
      ],
      "buckets": ["readability-refactor", "stack-python", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "f6c30567-b81b-442f-bc57-e35dbcb2f171",
      "title": "Re-raise `SystemExit` and `KeyboardInterrupt`",
      "rule": "Ensure that `SystemExit` and `KeyboardInterrupt` are not caught without being re-raised. Preventing Python from exiting can cause unintended behavior.",
      "why_is_this_important": "Catching and not re-raising `SystemExit` or `KeyboardInterrupt` prevents Python from exiting properly, leading to unexpected behavior.",
      "severity": "Critical",
      "bad_example": "try:\n    ...\nexcept SystemExit:  # Noncompliant: the SystemExit exception is not re-raised.\n    pass\n\ntry:\n    ...\nexcept BaseException:  # Noncompliant: BaseExceptions encompass SystemExit exceptions and should be re-raised.\n    pass\n\ntry:\n    ...\nexcept:  # Noncompliant: exceptions caught by this statement should be re-raised or a more specific exception should be caught.\n    pass",
      "good_example": "try:\n    ...\nexcept SystemExit as e:\n    ...\n    raise e\n\ntry:\n    ...\nexcept BaseException as e:\n    ...\n    raise e\n\ntry:\n    ...\nexcept FileNotFoundError:\n    ... # Handle a more specific exception",
      "language": "python",
      "examples": [
        {
          "snippet": "try:\n    ...\nexcept SystemExit:  # Noncompliant: the SystemExit exception is not re-raised.\n    pass\n\ntry:\n    ...\nexcept BaseException:  # Noncompliant: BaseExceptions encompass SystemExit exceptions and should be re-raised.\n    pass\n\ntry:\n    ...\nexcept:  # Noncompliant: exceptions caught by this statement should be re-raised or a more specific exception should be caught.\n    pass",
          "isCorrect": false
        },
        {
          "snippet": "try:\n    ...\nexcept SystemExit as e:\n    ...\n    raise e\n\ntry:\n    ...\nexcept BaseException as e:\n    ...\n    raise e\n\ntry:\n    ...\nexcept FileNotFoundError:\n    ... # Handle a more specific exception",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "f208a7fa-fb12-4b71-ba3f-8d10b746fd0b",
      "title": "Only Catch Exceptions That Derive from `BaseException`",
      "rule": "Detect exception handling blocks that catch objects not derived from `BaseException`. This causes a `TypeError` and should be avoided.",
      "why_is_this_important": "Catching objects that don’t inherit from `BaseException` causes a `TypeError`. Only valid exception classes should be caught.",
      "severity": "Critical",
      "bad_example": "class CustomException(object):\n    \"\"\"An Invalid exception class.\"\"\"\n    pass\n\ntry:\n    ...\nexcept CustomException:  # Noncompliant: this custom exception does not derive from BaseException or Exception.\n    print(\"exception\")\n\ntry:\n    ...\nexcept [TypeError, ValueError]:  # Noncompliant: list of exceptions, only tuples are valid.\n    print(\"exception\")",
      "good_example": "class CustomException(Exception):\n    pass\n\ntry:\n    ...\nexcept CustomException:\n    print(\"exception\")\n\ntry:\n    ...\nexcept (TypeError, ValueError):\n    print(\"exception\")",
      "language": "python",
      "examples": [
        {
          "snippet": "class CustomException(object):\n    \"\"\"An Invalid exception class.\"\"\"\n    pass\n\ntry:\n    ...\nexcept CustomException:  # Noncompliant: this custom exception does not derive from BaseException or Exception.\n    print(\"exception\")\n\ntry:\n    ...\nexcept [TypeError, ValueError]:  # Noncompliant: list of exceptions, only tuples are valid.\n    print(\"exception\")",
          "isCorrect": false
        },
        {
          "snippet": "class CustomException(Exception):\n    pass\n\ntry:\n    ...\nexcept CustomException:\n    print(\"exception\")\n\ntry:\n    ...\nexcept (TypeError, ValueError):\n    print(\"exception\")",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "adb93e61-1f79-4af7-8384-68c5a74a1602",
      "title": "Don’t Create Exceptions Without Raising Them",
      "rule": "Identify instances where an exception object is created but never raised. This is likely an oversight and should either be removed or properly raised.",
      "why_is_this_important": "Creating an exception without raising it does nothing and is likely an oversight. It should be removed or properly raised.",
      "severity": "Critical",
      "bad_example": "def func(x):\n    if not isinstance(x, int):\n        TypeError(\"Wrong type for parameter 'x'. func expects an integer\")  # Noncompliant\n    if x < 0:\n        ValueError  # Noncompliant\n    return x + 42",
      "good_example": "def func(x):\n    if not isinstance(x, int):\n        raise TypeError(\"Wrong type for parameter 'x'. func expects an integer\")\n    if x < 0:\n        raise ValueError\n    return x + 42",
      "language": "python",
      "examples": [
        {
          "snippet": "def func(x):\n    if not isinstance(x, int):\n        TypeError(\"Wrong type for parameter 'x'. func expects an integer\")  # Noncompliant\n    if x < 0:\n        ValueError  # Noncompliant\n    return x + 42",
          "isCorrect": false
        },
        {
          "snippet": "def func(x):\n    if not isinstance(x, int):\n        raise TypeError(\"Wrong type for parameter 'x'. func expects an integer\")\n    if x < 0:\n        raise ValueError\n    return x + 42",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "3b33ae8f-3fae-4771-b778-8b812cbef3bc",
      "title": "Avoid Using Boolean Expressions in `except` Statements",
      "rule": "Detect `except` clauses that use `or` or `and` to catch multiple exceptions. This does not work as intended. Recommend using a tuple of exceptions instead.",
      "why_is_this_important": "Using `or`/`and` with exceptions in `except` blocks doesn’t work as expected and can lead to unintended behavior. Use tuples instead.",
      "severity": "Critical",
      "bad_example": "try:\n    raise TypeError()\nexcept ValueError or TypeError:  # Noncompliant\n    print(\"Catching only ValueError\")\nexcept ValueError and TypeError:  # Noncompliant\n    print(\"Catching only TypeError\")\nexcept (ValueError or TypeError) as exception:  # Noncompliant\n    print(\"Catching only ValueError\")\n\nfoo = ValueError or TypeError  # foo == ValueError\nfoo = ValueError and TypeError  # foo == TypeError",
      "good_example": "try:\n    raise TypeError()\nexcept (ValueError, TypeError) as exception:\n    print(\"Catching ValueError and TypeError\")",
      "language": "python",
      "examples": [
        {
          "snippet": "try:\n    raise TypeError()\nexcept ValueError or TypeError:  # Noncompliant\n    print(\"Catching only ValueError\")\nexcept ValueError and TypeError:  # Noncompliant\n    print(\"Catching only TypeError\")\nexcept (ValueError or TypeError) as exception:  # Noncompliant\n    print(\"Catching only ValueError\")\n\nfoo = ValueError or TypeError  # foo == ValueError\nfoo = ValueError and TypeError  # foo == TypeError",
          "isCorrect": false
        },
        {
          "snippet": "try:\n    raise TypeError()\nexcept (ValueError, TypeError) as exception:\n    print(\"Catching ValueError and TypeError\")",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "622ba238-8a74-4e12-85cf-8d128aefa564",
      "title": "Ensure `__all__` Contains Only Defined Names",
      "rule": "Check if the `__all__` list in a module contains titles that are not defined. Listing undefined titles can cause `ImportError` when performing wildcard imports.",
      "why_is_this_important": "The `__all__` variable should only list valid module attributes. Listing undefined titles can cause `ImportError` when using wildcard imports.",
      "severity": "High",
      "bad_example": "from mymodule import my_func\n\n__all__ = [\"unknown_func\"]  # Noncompliant: \"unknown_func\" is undefined",
      "good_example": "from mymodule import my_func\n\n__all__ = [\"my_func\"]",
      "language": "python",
      "examples": [
        {
          "snippet": "from mymodule import my_func\n\n__all__ = [\"unknown_func\"]  # Noncompliant: \"unknown_func\" is undefined",
          "isCorrect": false
        },
        {
          "snippet": "from mymodule import my_func\n\n__all__ = [\"my_func\"]",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "module-architecture", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "4e382ca3-55cf-45fa-bc17-d21570b92da0",
      "title": "Ensure Special Methods Have the Correct Parameters",
      "rule": "Verify that special methods (e.g., `__eq__`, `__len__`) have the correct number of parameters. Incorrect parameters can cause runtime errors or unexpected behavior.",
      "why_is_this_important": "Magic methods (like `__eq__`, `__len__`, etc.) must have the right number of parameters. Otherwise, they won’t work as expected and may cause runtime errors.",
      "severity": "High",
      "bad_example": "class A:\n    def __mul__(self, other, unexpected):  # Noncompliant: too many parameters\n        return 42\n\n    def __add__(self):  # Noncompliant: missing one parameter\n        return 42\n\nA() * 3  # TypeError: __mul__() missing 1 required positional argument: 'unexpected'\nA() + 3  # TypeError: __add__() takes 1 positional argument but 2 were given",
      "good_example": "class A:\n    def __mul__(self, other):\n        return 42\n\n    def __add__(self, other):\n        return 42\n\nA() * 3\nA() + 3",
      "language": "python",
      "examples": [
        {
          "snippet": "class A:\n    def __mul__(self, other, unexpected):  # Noncompliant: too many parameters\n        return 42\n\n    def __add__(self):  # Noncompliant: missing one parameter\n        return 42\n\nA() * 3  # TypeError: __mul__() missing 1 required positional argument: 'unexpected'\nA() + 3  # TypeError: __add__() takes 1 positional argument but 2 were given",
          "isCorrect": false
        },
        {
          "snippet": "class A:\n    def __mul__(self, other):\n        return 42\n\n    def __add__(self, other):\n        return 42\n\nA() * 3\nA() + 3",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "9d21a8a4-ec0d-48f9-96c1-859547d4552e",
      "title": "Ensure Functions Use `return` Consistently",
      "rule": "Detect functions that mix `return` statements with values and those without. Inconsistent return usage can lead to unpredictable behavior.",
      "why_is_this_important": "Mixing `return` statements that return values with those that don’t can lead to confusing, unpredictable behavior.",
      "severity": "High",
      "bad_example": "def foo(a): # Noncompliant, function will return \"true\" or None\n  if a == 1:\n    return True\n  return",
      "good_example": "def foo(a):\n  if a == 1:\n    return True\n  return False",
      "language": "python",
      "examples": [
        {
          "snippet": "def foo(a): # Noncompliant, function will return \"true\" or None\n  if a == 1:\n    return True\n  return",
          "isCorrect": false
        },
        {
          "snippet": "def foo(a):\n  if a == 1:\n    return True\n  return False",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "readability-refactor", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "d985b3c6-83df-441a-8b5e-346a185bb680",
      "title": "Avoid Functions That Always Return the Same Value",
      "rule": "Identify functions that return the same value regardless of input. This may indicate poor design or a logic error.",
      "why_is_this_important": "If a function always returns the same value regardless of input, it may indicate poor design or a logic error.",
      "severity": "High",
      "bad_example": "def foo(a):  # NonCompliant\n    b = 12\n    if a == 1:\n        return b\n    return b",
      "good_example": "",
      "language": "python",
      "examples": [
        {
          "snippet": "def foo(a):  # NonCompliant\n    b = 12\n    if a == 1:\n        return b\n    return b",
          "isCorrect": false
        }
      ],
      "buckets": [
        "duplication-complexity",
        "readability-refactor",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "uuid": "e90fdcbf-6727-4635-bbfa-12999ac70765",
      "title": "Ensure All Used Variables, Classes, and Functions Are Defined",
      "rule": "Check for variables, functions, or classes that are used but not defined. This results in `NameError` and should be fixed by ensuring all symbols are properly declared.",
      "why_is_this_important": "Using undefined variables, functions, or classes leads to `NameError` and prevents code from running.",
      "severity": "Medium",
      "bad_example": "my_var # Noncompliant (variable is never defined)\n\ndef noncompliant():\n    foo()  # Noncompliant\n    MyClass()  # Noncompliant",
      "good_example": "from mod import my_var\n\nmy_var\n\ndef compliant():\n    foo = sum\n    foo()\n\n    class MyClass:\n        pass\n    MyClass()",
      "language": "python",
      "examples": [
        {
          "snippet": "my_var # Noncompliant (variable is never defined)\n\ndef noncompliant():\n    foo()  # Noncompliant\n    MyClass()  # Noncompliant",
          "isCorrect": false
        },
        {
          "snippet": "from mod import my_var\n\nmy_var\n\ndef compliant():\n    foo = sum\n    foo()\n\n    class MyClass:\n        pass\n    MyClass()",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "1c0c835c-c8d7-43eb-ac3f-24cc10fe0b74",
      "title": "Avoid Confusing Implicit String Concatenation",
      "rule": "Detect missing commas in lists, tuples, or dictionaries that unintentionally concatenate strings. This can lead to unexpected behavior and hard-to-find bugs.",
      "why_is_this_important": "Accidental string concatenation can happen when missing commas in lists, tuples, or dictionaries, leading to unexpected bugs.",
      "severity": "High",
      "bad_example": "def func():\n    return \"item1\" \"item2\"  # Noncompliant: a comma is missing to return a tuple.\n\n[\"1\"  # Noncompliant: a comma is missing.\n \"2\",\n \"a very\"  # Noncompliant: a \"+\" is missing.\n \"long string\"]",
      "good_example": "def func():\n    return \"item1\", \"item2\"\n\n[\"1\",\n \"2\",\n \"a very\" +\n \"long string\"]",
      "language": "python",
      "examples": [
        {
          "snippet": "def func():\n    return \"item1\" \"item2\"  # Noncompliant: a comma is missing to return a tuple.\n\n[\"1\"  # Noncompliant: a comma is missing.\n \"2\",\n \"a very\"  # Noncompliant: a \"+\" is missing.\n \"long string\"]",
          "isCorrect": false
        },
        {
          "snippet": "def func():\n    return \"item1\", \"item2\"\n\n[\"1\",\n \"2\",\n \"a very\" +\n \"long string\"]",
          "isCorrect": true
        }
      ],
      "buckets": ["error-handling", "readability-refactor", "stack-python"],
      "scope": "file"
    },
    {
      "uuid": "a03dc1d3-7b94-42e6-8b43-7a5860c09d18",
      "title": "Avoid Redundant `None` Comparisons",
      "rule": "Identify cases where `x is None` or `x is not None` is used redundantly when `x` is always or never `None`. This may indicate a deeper logic issue.",
      "why_is_this_important": "Checking `x is None` when `x` is always `None` (or never `None`) is unnecessary and may indicate a deeper logic issue.",
      "severity": "Critical",
      "bad_example": "def foo():\n    my_var = None\n    if my_var == None:  # Noncompliant: always True.\n        ...",
      "good_example": "def foo(my_var):\n    if my_var == None:\n        ...",
      "language": "python",
      "examples": [
        {
          "snippet": "def foo():\n    my_var = None\n    if my_var == None:  # Noncompliant: always True.\n        ...",
          "isCorrect": false
        },
        {
          "snippet": "def foo(my_var):\n    if my_var == None:\n        ...",
          "isCorrect": true
        }
      ],
      "buckets": [
        "duplication-complexity",
        "readability-refactor",
        "stack-python"
      ],
      "scope": "file"
    },
    {
      "uuid": "bdd904ec-0cbc-4ad7-909f-87222cc57705",
      "title": "Avoid Wildcard Imports",
      "rule": "Ensure that imports are explicitly listed and avoid using wildcard imports (`import package.*;`).",
      "why_is_this_important": "Wildcard imports (`import package.*;`) can lead to ambiguity, increase compilation time, and introduce unintended dependencies. Explicit imports improve readability and maintainability.",
      "severity": "Medium",
      "bad_example": "import java.util.*;",
      "good_example": "import java.util.List;\nimport java.util.Map;",
      "examples": [
        {
          "snippet": "import java.util.*;",
          "isCorrect": false
        },
        {
          "snippet": "import java.util.List;\nimport java.util.Map;",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["module-architecture", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "d1829290-d3c9-405a-a1f7-1d1bb138e044",
      "title": "Always Use Braces for Single Statements",
      "rule": "Ensure that all control structures (if, for, while) use braces `{}` even for single statements.",
      "why_is_this_important": "Omitting braces in control structures (if, for, while) can cause logical errors when modifying the code later. Always using braces improves code clarity and prevents unintended execution flows.",
      "severity": "High",
      "bad_example": "if (condition) doSomething();",
      "good_example": "if (condition) {\n    doSomething();\n}",
      "examples": [
        {
          "snippet": "if (condition) doSomething();",
          "isCorrect": false
        },
        {
          "snippet": "if (condition) {\n    doSomething();\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "ffc51d92-643e-4730-8b43-2e1e198f2578",
      "title": "Limit Line Length to 100 Characters",
      "rule": "Ensure that no line exceeds 100 characters in length to maintain readability.",
      "why_is_this_important": "Lines longer than 100 characters reduce readability, make code harder to review, and complicate side-by-side comparisons in version control.",
      "severity": "Low",
      "bad_example": "String longString = \"This is an example of a very long line of code that exceeds 100 characters\";",
      "good_example": "String longString = \"This is an example of a very long line of code \" +\n                  \"that is split into multiple lines.\";",
      "examples": [
        {
          "snippet": "String longString = \"This is an example of a very long line of code that exceeds 100 characters\";",
          "isCorrect": false
        },
        {
          "snippet": "String longString = \"This is an example of a very long line of code \" +\n                  \"that is split into multiple lines.\";",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "fbe41506-e466-425b-b09a-1139b11ecdaa",
      "title": "Use @Override for Method Overrides",
      "rule": "Ensure that all overridden methods explicitly use the `@Override` annotation.",
      "why_is_this_important": "Omitting `@Override` when overriding methods can lead to accidental method overloading instead of overriding, causing subtle bugs.",
      "severity": "Medium",
      "bad_example": "public void equals(Object obj) {\n    // Incorrect override\n}",
      "good_example": "@Override\npublic void equals(Object obj) {\n    // Correct override\n}",
      "examples": [
        {
          "snippet": "public void equals(Object obj) {\n    // Incorrect override\n}",
          "isCorrect": false
        },
        {
          "snippet": "@Override\npublic void equals(Object obj) {\n    // Correct override\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "6bc52828-f4d8-4b1f-a68a-dc924ae74c78",
      "title": "Do Not Ignore Caught Exceptions",
      "rule": "Ensure that all caught exceptions are either logged or handled properly. Empty catch blocks are not allowed.",
      "why_is_this_important": "Ignoring exceptions by leaving catch blocks empty can suppress important errors, making debugging difficult and potentially leading to unexpected failures.",
      "severity": "High",
      "bad_example": "try {\n    someMethod();\n} catch (Exception e) {\n    // Do nothing\n}",
      "good_example": "try {\n    someMethod();\n} catch (Exception e) {\n    log.error(\"Exception occurred\", e);\n}",
      "examples": [
        {
          "snippet": "try {\n    someMethod();\n} catch (Exception e) {\n    // Do nothing\n}",
          "isCorrect": false
        },
        {
          "snippet": "try {\n    someMethod();\n} catch (Exception e) {\n    log.error(\"Exception occurred\", e);\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["error-handling", "observability-logging"],
      "scope": "file"
    },
    {
      "uuid": "0acdd67c-efe7-4df9-98df-5e06424fd7ba",
      "title": "Declare Variables Separately",
      "rule": "Ensure that each variable is declared separately instead of using multiple declarations in one statement.",
      "why_is_this_important": "Declaring multiple variables in one statement reduces readability and increases the risk of errors, especially when initializing complex objects.",
      "severity": "Low",
      "bad_example": "int a, b, c;",
      "good_example": "int a;\nint b;\nint c;",
      "examples": [
        {
          "snippet": "int a, b, c;",
          "isCorrect": false
        },
        {
          "snippet": "int a;\nint b;\nint c;",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "313a5858-e91e-4762-b9c8-83f0964475ce",
      "title": "Use `final` for Constants",
      "rule": "Ensure that constants are declared with the `final` keyword to prevent modification.",
      "why_is_this_important": "Constants should be declared with `final` to prevent unintended modifications, ensuring immutability and safer code.",
      "severity": "High",
      "bad_example": "static int MAX_VALUE = 100;",
      "good_example": "static final int MAX_VALUE = 100;",
      "examples": [
        {
          "snippet": "static int MAX_VALUE = 100;",
          "isCorrect": false
        },
        {
          "snippet": "static final int MAX_VALUE = 100;",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "8553655e-b82f-446b-bd72-80df6f3efe82",
      "title": "Maintain Consistent Annotation Placement",
      "rule": "Ensure that annotations are placed consistently before or after modifiers throughout the codebase.",
      "why_is_this_important": "Inconsistent annotation placement (before or after modifiers) reduces readability and can cause confusion when following coding conventions.",
      "severity": "Medium",
      "bad_example": "@Override public void someMethod() { ... }",
      "good_example": "@Override\npublic void someMethod() { ... }",
      "examples": [
        {
          "snippet": "@Override public void someMethod() { ... }",
          "isCorrect": false
        },
        {
          "snippet": "@Override\npublic void someMethod() { ... }",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "269aa151-63d7-4235-aab0-20b8ed3f1a64",
      "title": "Avoid Empty Catch Blocks",
      "rule": "Ensure that catch blocks contain meaningful exception handling logic and do not remain empty.",
      "why_is_this_important": "Empty catch blocks swallow exceptions, making it difficult to diagnose issues. Instead, log the exception or handle it appropriately.",
      "severity": "High",
      "bad_example": "try {\n    process();\n} catch (IOException e) {}",
      "good_example": "try {\n    process();\n} catch (IOException e) {\n    log.error(\"Error processing\", e);\n}",
      "examples": [
        {
          "snippet": "try {\n    process();\n} catch (IOException e) {}",
          "isCorrect": false
        },
        {
          "snippet": "try {\n    process();\n} catch (IOException e) {\n    log.error(\"Error processing\", e);\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "uuid": "fde0e6b3-0acd-4274-8dd8-7337aab40922",
      "title": "Avoid Using `Object.finalize()`",
      "rule": "Ensure that the `finalize()` method is not used. Use try-with-resources or explicit cleanup methods instead.",
      "why_is_this_important": "Finalizers are deprecated, unreliable, and can cause performance issues. Use try-with-resources or explicit cleanup methods instead.",
      "severity": "High",
      "bad_example": "@Override\nprotected void finalize() {\n    // Cleanup logic\n}",
      "good_example": "// Use try-with-resources or explicit cleanup instead",
      "examples": [
        {
          "snippet": "@Override\nprotected void finalize() {\n    // Cleanup logic\n}",
          "isCorrect": false
        },
        {
          "snippet": "// Use try-with-resources or explicit cleanup instead",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["maintainability", "performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "4b36d8bc-40a2-4c83-8954-d1e4004429ad",
      "title": "Use Try-With-Resources for Resource Management",
      "rule": "Ensure that resources such as streams or file handlers are managed using try-with-resources to avoid leaks.",
      "why_is_this_important": "Failing to use try-with-resources can lead to resource leaks, as manually closing resources is error-prone and harder to maintain.",
      "severity": "Medium",
      "bad_example": "FileInputStream fis = new FileInputStream(\"file.txt\");\ntry {\n    // Read file\n} finally {\n    fis.close();\n}",
      "good_example": "try (FileInputStream fis = new FileInputStream(\"file.txt\")) {\n    // Read file\n}",
      "examples": [
        {
          "snippet": "FileInputStream fis = new FileInputStream(\"file.txt\");\ntry {\n    // Read file\n} finally {\n    fis.close();\n}",
          "isCorrect": false
        },
        {
          "snippet": "try (FileInputStream fis = new FileInputStream(\"file.txt\")) {\n    // Read file\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["error-handling", "performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "4288b1bb-5220-4c44-b0a8-3c7faa152a8c",
      "title": "Declare Variables Near Their First Use",
      "rule": "Ensure that variables are declared as close as possible to their first use to improve readability.",
      "why_is_this_important": "Declaring variables far from their usage reduces clarity and makes it harder to track their purpose, leading to maintainability issues.",
      "severity": "Low",
      "bad_example": "int result;\n// Many lines of code\nresult = computeResult();",
      "good_example": "int result = computeResult();",
      "examples": [
        {
          "snippet": "int result;\n// Many lines of code\nresult = computeResult();",
          "isCorrect": false
        },
        {
          "snippet": "int result = computeResult();",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "3d0cfe31-ffe7-4a84-ac78-33c873c11101",
      "title": "Properly Initialize Hash-Based Collections",
      "rule": "Ensure that `HashMap` and `HashSet` are initialized with appropriate capacity settings to optimize performance.",
      "why_is_this_important": "Hash-based collections (e.g., `HashMap`, `HashSet`) should be initialized with proper capacity settings to avoid unnecessary resizing and performance overhead.",
      "severity": "High",
      "bad_example": "private static final int KNOWN_CAPACITY = 1_000_000;\n\npublic static Map<String, Integer> buildAMap() {\n    return new HashMap<>(KNOWN_CAPACITY); // Noncompliant\n}\n\npublic static Set<String> buildASet() {\n    return new HashSet<>(KNOWN_CAPACITY); // Noncompliant\n}",
      "good_example": "private static final int KNOWN_CAPACITY = 1_000_000;\n\npublic static Map<String, Integer> buildABetterMap() {\n    return HashMap.newHashMap(KNOWN_CAPACITY);\n}\n\npublic static Set<String> buildABetterSet() {\n    return HashSet.newHashSet(KNOWN_CAPACITY);\n}\n\npublic static Set<String> buildABetterSet(float customLoadFactor) {\n    return new HashSet<>(KNOWN_CAPACITY, customLoadFactor);\n}",
      "examples": [
        {
          "snippet": "private static final int KNOWN_CAPACITY = 1_000_000;\n\npublic static Map<String, Integer> buildAMap() {\n    return new HashMap<>(KNOWN_CAPACITY); // Noncompliant\n}\n\npublic static Set<String> buildASet() {\n    return new HashSet<>(KNOWN_CAPACITY); // Noncompliant\n}",
          "isCorrect": false
        },
        {
          "snippet": "private static final int KNOWN_CAPACITY = 1_000_000;\n\npublic static Map<String, Integer> buildABetterMap() {\n    return HashMap.newHashMap(KNOWN_CAPACITY);\n}\n\npublic static Set<String> buildABetterSet() {\n    return HashSet.newHashSet(KNOWN_CAPACITY);\n}\n\npublic static Set<String> buildABetterSet(float customLoadFactor) {\n    return new HashSet<>(KNOWN_CAPACITY, customLoadFactor);\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "0f7998b5-3438-45b3-a07e-2d4fd6080c44",
      "title": "Use `String.replace()` Instead of `String.replaceAll()` for Simple Replacements",
      "rule": "Ensure that `String.replace()` is used when a simple string replacement is needed instead of `String.replaceAll()`.",
      "why_is_this_important": "`String.replaceAll()` compiles a regex pattern every time it is called, even if no regex is needed, leading to unnecessary performance overhead.",
      "severity": "Critical",
      "bad_example": "String init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed = init.replaceAll(\"Bob is\", \"It's\"); // Noncompliant\nchanged = changed.replaceAll(\"\\\\.\\\\.\\\\.\", \";\"); // Noncompliant",
      "good_example": "String init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed = init.replace(\"Bob is\", \"It's\");\nchanged = changed.replace(\"...\", \";\");",
      "examples": [
        {
          "snippet": "String init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed = init.replaceAll(\"Bob is\", \"It's\"); // Noncompliant\nchanged = changed.replaceAll(\"\\\\.\\\\.\\\\.\", \";\"); // Noncompliant",
          "isCorrect": false
        },
        {
          "snippet": "String init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed = init.replace(\"Bob is\", \"It's\");\nchanged = changed.replace(\"...\", \";\");",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "26aa5cc6-ada1-450e-b5e8-126adf0ee5fe",
      "title": "Ensure `ThreadLocal` Variables Are Properly Cleaned",
      "rule": "Ensure that `ThreadLocal` variables are cleaned using `.remove()` to avoid memory leaks.",
      "why_is_this_important": "Failing to clean up `ThreadLocal` variables can cause memory leaks in long-running applications, especially when using thread pools.",
      "severity": "High",
      "bad_example": "public class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal<UserSession> DELEGATE = new ThreadLocal<>();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n   public void incorrectCleanup() {\n     DELEGATE.set(null); // Noncompliant\n   }\n\n  // some other methods without a call to DELEGATE.remove()\n}",
      "good_example": "public class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal<UserSession> DELEGATE = new ThreadLocal<>();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n  public void unload() {\n    DELEGATE.remove(); // Compliant\n  }\n\n  // ...\n}",
      "examples": [
        {
          "snippet": "public class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal<UserSession> DELEGATE = new ThreadLocal<>();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n   public void incorrectCleanup() {\n     DELEGATE.set(null); // Noncompliant\n   }\n\n  // some other methods without a call to DELEGATE.remove()\n}",
          "isCorrect": false
        },
        {
          "snippet": "public class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal<UserSession> DELEGATE = new ThreadLocal<>();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n  public void unload() {\n    DELEGATE.remove(); // Compliant\n  }\n\n  // ...\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "6e49355d-dc48-483b-9d88-24ed9460b3d0",
      "title": "Override `read(byte[], int, int)` in InputStream Subclasses",
      "rule": "Ensure that the `read(byte[], int, int)` method is overridden in `InputStream` subclasses to improve efficiency.",
      "why_is_this_important": "The default implementation of `read(byte[], int, int)` calls `read()` for every byte, leading to poor performance. Overriding this method improves efficiency.",
      "severity": "",
      "bad_example": "public class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}",
      "good_example": "public class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}",
      "examples": [
        {
          "snippet": "public class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "01f09fd9-8d0e-4368-a551-a9d49ab75c7a",
      "title": "Prefer Offset-Based String Methods",
      "rule": "Ensure that offset-based string methods are used instead of creating unnecessary substring instances.",
      "why_is_this_important": "Using `str.substring(beginIndex).indexOf(char1)` creates unnecessary temporary strings. Use index methods with an offset parameter instead to improve performance.",
      "severity": "Critical",
      "bad_example": "str.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by \"substring\"",
      "good_example": "str.indexOf(char1, beginIndex) - beginIndex; // index for char1 not found is (-1-beginIndex)",
      "examples": [
        {
          "snippet": "str.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by \"substring\"",
          "isCorrect": false
        },
        {
          "snippet": "str.indexOf(char1, beginIndex) - beginIndex; // index for char1 not found is (-1-beginIndex)",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "10eb2d6f-233d-4234-9d72-3692d8023bac",
      "title": "Use `Arrays.stream()` for Primitive Arrays",
      "rule": "Ensure that `Arrays.stream(array)` is used instead of `Arrays.asList(T... a).stream()` for primitive arrays.",
      "why_is_this_important": "`Arrays.asList(T... a).stream()` boxes primitive types unnecessarily, while `Arrays.stream(array)` directly creates the appropriate primitive stream type, improving performance.",
      "severity": "High",
      "bad_example": "Arrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);",
      "good_example": "Arrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);",
      "examples": [
        {
          "snippet": "Arrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);",
          "isCorrect": false
        },
        {
          "snippet": "Arrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "097b066b-7bdf-446f-a169-d3dcb689c754",
      "title": "Use Factory Method Injection in `@Configuration` Classes",
      "rule": "Ensure that factory method injection is used in `@Configuration` classes instead of `@Autowired` field injection.",
      "why_is_this_important": "Using `@Autowired` field injection can lead to early initialization issues. Factory method injection ensures dependencies are resolved only when needed.",
      "severity": "Critical",
      "bad_example": "@Configuration\npublic class  FooConfiguration {\n\n  @Autowired private  DataSource dataSource ;  // Noncompliant\n\n  @Bean\n  public  MyService myService() {\n    return new  MyService(this .dataSource );\n  }\n}",
      "good_example": "@Configuration\npublic class  FooConfiguration {\n\n @Bean\n  public  MyService myService(DataSource dataSource) {\n    return new  MyService(dataSource);\n  }\n}",
      "examples": [
        {
          "snippet": "@Configuration\npublic class  FooConfiguration {\n\n  @Autowired private  DataSource dataSource ;  // Noncompliant\n\n  @Bean\n  public  MyService myService() {\n    return new  MyService(this .dataSource );\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "@Configuration\npublic class  FooConfiguration {\n\n @Bean\n  public  MyService myService(DataSource dataSource) {\n    return new  MyService(dataSource);\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["module-architecture", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "56c5722a-12f6-4039-a064-c3f921be2a80",
      "title": "Combine Multiple Loops Over the Same Collection",
      "rule": "Ensure that multiple loops over the same collection are combined into a single loop to improve efficiency.",
      "why_is_this_important": "Iterating over the same collection multiple times in separate loops is inefficient. Combining them reduces execution time and improves performance.",
      "severity": "Low",
      "bad_example": "public void doSomethingToAList(List<String> strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}",
      "good_example": "public void doSomethingToAList(List<String> strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}",
      "examples": [
        {
          "snippet": "public void doSomethingToAList(List<String> strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public void doSomethingToAList(List<String> strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["duplication-complexity", "performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "c75c3bab-468f-4e13-9068-6dc6f25fac31",
      "title": "Use `entrySet()` When Iterating Over Maps",
      "rule": "Ensure that `entrySet()` is used instead of iterating over `keySet()` and calling `get(key)`, to optimize performance.",
      "why_is_this_important": "Iterating over `keySet()` and then calling `get(key)` leads to unnecessary lookups. Using `entrySet()` retrieves both key and value in a single operation, improving efficiency.",
      "severity": "High",
      "bad_example": "public void doSomethingWithMap(Map<String,Object> map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}",
      "good_example": "public void doSomethingWithMap(Map<String,Object> map) {\n  for (Map.Entry<String,Object> entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}",
      "examples": [
        {
          "snippet": "public void doSomethingWithMap(Map<String,Object> map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public void doSomethingWithMap(Map<String,Object> map) {\n  for (Map.Entry<String,Object> entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "446aeb41-fdb0-4ea1-8474-44e6d4e98239",
      "title": "Avoid Using `deleteOnExit()`",
      "rule": "Ensure that `File.deleteOnExit()` is not used, as it can cause memory and resource leaks.",
      "why_is_this_important": "`File.deleteOnExit()` only deletes files on a normal JVM shutdown, and memory associated with handlers is released only at the end of the process, which can cause resource leaks.",
      "severity": "High",
      "bad_example": "File file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant",
      "good_example": "",
      "examples": [
        {
          "snippet": "File file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant",
          "isCorrect": false
        }
      ],
      "language": "java",
      "buckets": ["maintainability", "performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "33f537e3-9eb7-48fd-ae45-671e79fba2cb",
      "title": "Avoid Expensive Preconditions and Logging Arguments",
      "rule": "Ensure that logging arguments and preconditions do not require costly evaluations before method calls.",
      "why_is_this_important": "Preconditions and logging arguments should not require costly evaluations. Using precomputed values prevents unnecessary performance overhead, especially for logging.",
      "severity": "High",
      "bad_example": "logger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a > 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a > 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant",
      "good_example": "logger.log(Level.DEBUG, \"Something went wrong: {0} \", message);  // String formatting only applied if needed\nlogger.log(Level.SEVERE, () -> \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nlogger.fine(\"An exception occurred with message: {}\", message);  // SLF4J, Log4j\n\nLOG.error(\"Unable to open file {0}\", csvPath, e);\n\nif (LOG.isDebugEnabled()) {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg > 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}",
      "examples": [
        {
          "snippet": "logger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a > 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a > 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant",
          "isCorrect": false
        },
        {
          "snippet": "logger.log(Level.DEBUG, \"Something went wrong: {0} \", message);  // String formatting only applied if needed\nlogger.log(Level.SEVERE, () -> \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nlogger.fine(\"An exception occurred with message: {}\", message);  // SLF4J, Log4j\n\nLOG.error(\"Unable to open file {0}\", csvPath, e);\n\nif (LOG.isDebugEnabled()) {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg > 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["observability-logging", "performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "9ea667b8-5097-4544-abbb-689584adc413",
      "title": "Avoid Creating Objects Just to Call `getClass()`",
      "rule": "Ensure that objects are not created solely for calling `getClass()`. Use `ClassName.class` instead.",
      "why_is_this_important": "Creating an object solely to call `getClass()` wastes memory and CPU cycles. Use `ClassName.class` instead.",
      "severity": "High",
      "bad_example": "MyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();",
      "good_example": "Class c = MyObject.class;",
      "examples": [
        {
          "snippet": "MyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();",
          "isCorrect": false
        },
        {
          "snippet": "Class c = MyObject.class;",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "89ca18bf-df36-4c81-a74c-ff7691b962b5",
      "title": "Do Not Call `wait()` When Holding Multiple Locks",
      "rule": "Ensure that `wait()` is not called while holding multiple locks to prevent deadlocks.",
      "why_is_this_important": "Calling `wait()` while holding multiple locks can cause deadlocks if no other thread tries to acquire the awaited object. Always release locks before calling `wait()`.",
      "severity": "Critical",
      "bad_example": "synchronized (this.mon1) {  // threadB can't enter this block to request this.mon2 lock & release threadA\n\tsynchronized (this.mon2) {\n\t\tthis.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1\n\t}\n}",
      "good_example": "",
      "examples": [
        {
          "snippet": "synchronized (this.mon1) {  // threadB can't enter this block to request this.mon2 lock & release threadA\n\tsynchronized (this.mon2) {\n\t\tthis.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1\n\t}\n}",
          "isCorrect": false
        }
      ],
      "language": "java",
      "buckets": ["concurrency-safety"],
      "scope": "file"
    },
    {
      "uuid": "114564cb-fc9d-450f-bd6e-c4384fa65c31",
      "title": "Avoid Equality Operators in Loop Termination Conditions",
      "rule": "Ensure that relational operators (`<`, `>`) are used instead of equality operators (`==`, `!=`) in loop termination conditions.",
      "why_is_this_important": "Using `==` or `!=` in loop termination conditions can lead to infinite loops due to floating-point precision errors or unexpected comparisons. Prefer relational operators (`<`, `>`) instead.",
      "severity": "Critical",
      "bad_example": "for (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}",
      "good_example": "for (int i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}",
      "examples": [
        {
          "snippet": "for (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}",
          "isCorrect": false
        },
        {
          "snippet": "for (int i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "ddd19b01-ec5d-4541-924b-f16c722dd929",
      "title": "Prevent Server-Side Request Path Traversal Attacks",
      "rule": "Ensure that all user inputs related to file paths are validated and sanitized to prevent path traversal attacks.",
      "why_is_this_important": "Path traversal attacks exploit server-side request handling to access unauthorized resources. Always validate and sanitize request paths to prevent unauthorized access.",
      "severity": "Critical",
      "bad_example": "@GetMapping(\"/user\")\npublic String getUser(@RequestParam(value = \"id\") String id) {\n    URL url = new URL(\"http://example.com/api/user/\" + id); // Noncompliant\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n}",
      "good_example": "import java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\n\n@GetMapping(\"/user\")\npublic String getUser(@RequestParam(value = \"id\") String id) {\n    String encodedId = URLEncoder.encode(id, StandardCharsets.UTF_8);\n    URL url = new URL(\"http://example.com/api/user/?id=\" + encodedId);\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n}",
      "examples": [
        {
          "snippet": "@GetMapping(\"/user\")\npublic String getUser(@RequestParam(value = \"id\") String id) {\n    URL url = new URL(\"http://example.com/api/user/\" + id); // Noncompliant\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n}",
          "isCorrect": false
        },
        {
          "snippet": "import java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\n\n@GetMapping(\"/user\")\npublic String getUser(@RequestParam(value = \"id\") String id) {\n    String encodedId = URLEncoder.encode(id, StandardCharsets.UTF_8);\n    URL url = new URL(\"http://example.com/api/user/?id=\" + encodedId);\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "0cde2d0b-b6bd-40be-b3a0-d745f35c6043",
      "title": "Prevent Filesystem Oracle Attacks",
      "rule": "Ensure that the application does not disclose file existence based on user input to prevent filesystem oracle attacks.",
      "why_is_this_important": "Applications that disclose file existence based on user input can be exploited to infer filesystem structure. Ensure user input is properly validated and sanitized.",
      "severity": "Critical",
      "bad_example": "import java.io.File;\n\n@Controller\npublic class ExampleController\n{\n    static private String targetDirectory = \"/path/to/target/directory/\";\n\n    @GetMapping(value = \"/exists\")\n    public void delete(@RequestParam(\"filetitle\") String filetitle) throws IOException {\n\n        File file = new File(targetDirectory + filetitle);\n        if (!file.exists()) { // Noncompliant\n            throw new IOException(\"File does not exists in the target directory\");\n        }\n    }\n}",
      "good_example": "import java.io.File;\n\n@Controller\npublic class ExampleController\n{\n    static private String targetDirectory = \"/path/to/target/directory/\";\n\n    @GetMapping(value = \"/exists\")\n    public void delete(@RequestParam(\"filetitle\") String filetitle) throws IOException {\n\n        File file = new File(targetDirectory + filetitle);\n        String canonicalDestinationPath = file.getCanonicalPath();\n\n        if (!canonicalDestinationPath.startsWith(targetDirectory)) {\n            throw new IOException(\"Entry is outside of the target directory\");\n        } else if (!file.exists()) {\n            throw new IOException(\"File does not exists in the target directory\");\n        }\n    }\n}",
      "examples": [
        {
          "snippet": "import java.io.File;\n\n@Controller\npublic class ExampleController\n{\n    static private String targetDirectory = \"/path/to/target/directory/\";\n\n    @GetMapping(value = \"/exists\")\n    public void delete(@RequestParam(\"filetitle\") String filetitle) throws IOException {\n\n        File file = new File(targetDirectory + filetitle);\n        if (!file.exists()) { // Noncompliant\n            throw new IOException(\"File does not exists in the target directory\");\n        }\n    }\n}",
          "isCorrect": false
        },
        {
          "snippet": "import java.io.File;\n\n@Controller\npublic class ExampleController\n{\n    static private String targetDirectory = \"/path/to/target/directory/\";\n\n    @GetMapping(value = \"/exists\")\n    public void delete(@RequestParam(\"filetitle\") String filetitle) throws IOException {\n\n        File file = new File(targetDirectory + filetitle);\n        String canonicalDestinationPath = file.getCanonicalPath();\n\n        if (!canonicalDestinationPath.startsWith(targetDirectory)) {\n            throw new IOException(\"Entry is outside of the target directory\");\n        } else if (!file.exists()) {\n            throw new IOException(\"File does not exists in the target directory\");\n        }\n    }\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "d96ecbef-2f69-4605-9183-84e324808417",
      "title": "Do Not Define Environment Variables from Untrusted Input",
      "rule": "Ensure that external user input is properly sanitized before being used to define environment variables.",
      "why_is_this_important": "Environment variable injection can allow attackers to manipulate system behavior, affecting sensitive paths like `PATH` or `LD_PRELOAD`. Always sanitize external input before using it.",
      "severity": "Critical",
      "bad_example": "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n  Runtime r = Runtime.getRuntime();\n  String userInput = request.getParameter(\"example\");\n\n  if (userInput != null) {\n    String[] envs = {userInput};\n    r.exec(\"/path/to/example\", userInput);\n  } else{\n    r.exec(\"/path/to/example\");\n  }\n}",
      "good_example": "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n  Runtime r = Runtime.getRuntime();\n  String userInput = request.getParameter(\"example\");\n\n  if (userInput != null && userInput.matches(\"^[a-zA-Z0-9]*$\")) {\n    String[] envs = {\"ENV_VAR=%s\".format(userInput)};\n    r.exec(\"/path/to/example\", envs);\n  } else {\n    r.exec(\"/path/to/example\");\n  }\n}",
      "examples": [
        {
          "snippet": "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n  Runtime r = Runtime.getRuntime();\n  String userInput = request.getParameter(\"example\");\n\n  if (userInput != null) {\n    String[] envs = {userInput};\n    r.exec(\"/path/to/example\", userInput);\n  } else{\n    r.exec(\"/path/to/example\");\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n  Runtime r = Runtime.getRuntime();\n  String userInput = request.getParameter(\"example\");\n\n  if (userInput != null && userInput.matches(\"^[a-zA-Z0-9]*$\")) {\n    String[] envs = {\"ENV_VAR=%s\".format(userInput)};\n    r.exec(\"/path/to/example\", envs);\n  } else {\n    r.exec(\"/path/to/example\");\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "fffcbad8-819c-4a66-9ecd-4878f5cd0507",
      "title": "Prevent Thread Suspension from Leading to Denial of Service (DoS)",
      "rule": "Ensure that user-controlled data is not used to suspend threads, as it can lead to Denial of Service (DoS) attacks.",
      "why_is_this_important": "Using user-controlled data as a parameter for thread suspension can be exploited to cause Denial of Service (DoS) attacks by exhausting available threads.",
      "severity": "Critical",
      "bad_example": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n        Long time = Long.parseLong(req.getParameter(\"time\"));\n        try {\n            Thread.sleep(time); // Noncompliant\n        } catch (InterruptedException e) {\n            resp.sendError(500);\n        }\n    }",
      "good_example": "protected void compliant(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n        Long time = Long.parseLong(req.getParameter(\"time\"));\n        try {\n            Thread.sleep(Math.min(time, 1000));\n        } catch (InterruptedException e) {\n            resp.sendError(500);\n        }\n    }",
      "examples": [
        {
          "snippet": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n        Long time = Long.parseLong(req.getParameter(\"time\"));\n        try {\n            Thread.sleep(time); // Noncompliant\n        } catch (InterruptedException e) {\n            resp.sendError(500);\n        }\n    }",
          "isCorrect": false
        },
        {
          "snippet": "protected void compliant(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n        Long time = Long.parseLong(req.getParameter(\"time\"));\n        try {\n            Thread.sleep(Math.min(time, 1000));\n        } catch (InterruptedException e) {\n            resp.sendError(500);\n        }\n    }",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "a9dcc12d-4534-4278-ac87-b63a1ed12f10",
      "title": "Prevent Intent Redirection Vulnerabilities",
      "rule": "Ensure that applications do not expose intent-processing components that can be manipulated by other applications.",
      "why_is_this_important": "Intent redirection occurs when an app exposes an intent-processing component that can be manipulated by malicious applications, leading to security risks.",
      "severity": "Critical",
      "bad_example": "public class Noncompliant extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        Intent intent = getIntent();\n        Intent forward = (Intent) intent.getParcelableExtra(\"anotherintent\");\n        startActivity(forward); // Noncompliant\n    }\n}",
      "good_example": "public class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Intent intent = getIntent();\n        Intent forward = (Intent) intent.getParcelableExtra(\"anotherintent\");\n\n        ComponentName title = forward.resolveActivity(getPackageManager());\n        if (title.getPackageName().equals(\"safePackage\") &&\n                title.getClassName().equals(\"safeClass\")) {\n            startActivity(forward);\n        }\n    }\n}",
      "examples": [
        {
          "snippet": "public class Noncompliant extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        Intent intent = getIntent();\n        Intent forward = (Intent) intent.getParcelableExtra(\"anotherintent\");\n        startActivity(forward); // Noncompliant\n    }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Intent intent = getIntent();\n        Intent forward = (Intent) intent.getParcelableExtra(\"anotherintent\");\n\n        ComponentName title = forward.resolveActivity(getPackageManager());\n        if (title.getPackageName().equals(\"safePackage\") &&\n                title.getClassName().equals(\"safeClass\")) {\n            startActivity(forward);\n        }\n    }\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "adfdaeb0-2d70-44da-b4bd-319df5f2eeba",
      "title": "Create a New Session on User Authentication",
      "rule": "Ensure that a new session is always created upon user authentication to prevent session fixation attacks.",
      "why_is_this_important": "Failing to create a new session upon user authentication makes the application vulnerable to session fixation attacks, allowing attackers to hijack user sessions.",
      "severity": "Critical",
      "bad_example": "@Override\nprotected void configure(HttpSecurity http) throws Exception {\n   http.sessionManagement()\n     .sessionFixation().none(); // Noncompliant: the existing session will continue\n}",
      "good_example": "@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  http.sessionManagement()\n     .sessionFixation().migrateSession();\n}",
      "examples": [
        {
          "snippet": "@Override\nprotected void configure(HttpSecurity http) throws Exception {\n   http.sessionManagement()\n     .sessionFixation().none(); // Noncompliant: the existing session will continue\n}",
          "isCorrect": false
        },
        {
          "snippet": "@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  http.sessionManagement()\n     .sessionFixation().migrateSession();\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "6a2f133a-b2ee-49dd-baee-8c2c568ef1de",
      "title": "Prevent Server-Side Template Injection (SSTI)",
      "rule": "Ensure that all user inputs in templates are properly validated and sanitized to prevent SSTI attacks.",
      "why_is_this_important": "Unsanitized user input in server-side templates can allow attackers to manipulate template rendering logic, leading to remote code execution vulnerabilities.",
      "severity": "Critical",
      "bad_example": "<!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<body>\n    <span th:text=\"${__${tainted}__}\"></span> <!-- Noncompliant -->\n</div>\n</body>\n</html>",
      "good_example": "<!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<body>\n    <span th:text=\"${tainted}\"></span>\n</div>\n</body>\n</html>",
      "examples": [
        {
          "snippet": "<!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<body>\n    <span th:text=\"${__${tainted}__}\"></span> <!-- Noncompliant -->\n</div>\n</body>\n</html>",
          "isCorrect": false
        },
        {
          "snippet": "<!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<body>\n    <span th:text=\"${tainted}\"></span>\n</div>\n</body>\n</html>",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "8e3ae781-34f9-4ee4-8683-fd9381943296",
      "title": "Prevent Open HTTP Redirect Vulnerabilities",
      "rule": "Ensure that user-controlled HTTP redirections are validated to prevent phishing attacks.",
      "why_is_this_important": "Allowing user-controlled HTTP redirections enables attackers to redirect victims to malicious websites, commonly used in phishing attacks.",
      "severity": "Critical",
      "bad_example": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n  String location = req.getParameter(\"url\");\n  resp.sendRedirect(location);\n}",
      "good_example": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n  String location = req.getParameter(\"url\");\n\n  List<String> allowedHosts = new ArrayList<String>();\n  allowedHosts.add(\"https://trusted1.example.com/\");\n  allowedHosts.add(\"https://trusted2.example.com/\");\n\n  if (allowedHosts.contains(location))\n    resp.sendRedirect(location);\n}",
      "examples": [
        {
          "snippet": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n  String location = req.getParameter(\"url\");\n  resp.sendRedirect(location);\n}",
          "isCorrect": false
        },
        {
          "snippet": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n  String location = req.getParameter(\"url\");\n\n  List<String> allowedHosts = new ArrayList<String>();\n  allowedHosts.add(\"https://trusted1.example.com/\");\n  allowedHosts.add(\"https://trusted2.example.com/\");\n\n  if (allowedHosts.contains(location))\n    resp.sendRedirect(location);\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "aacecf97-5e41-48e3-bc02-c7cdd223bba9",
      "title": "Prevent Server-Side Request Forgery (SSRF)",
      "rule": "Ensure that server-side requests are properly validated to prevent SSRF attacks.",
      "why_is_this_important": "SSRF vulnerabilities allow attackers to manipulate server-side requests, potentially accessing internal resources or exposing sensitive data.",
      "severity": "High",
      "bad_example": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String location = req.getParameter(\"url\");\n\n    URL url = new URL(location);\n\n    HttpURLConnection  conn = (HttpURLConnection) url.openConnection();\n}",
      "good_example": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String location = req.getParameter(\"url\");\n\n    List<String> allowedHosts = new ArrayList<String>();\n    allowedHosts.add(\"https://trusted1.example.com/\");\n    allowedHosts.add(\"https://trusted2.example.com/\");\n\n    URL url = new URL(location);\n\n    if (allowedHosts.contains(location))\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n}",
      "examples": [
        {
          "snippet": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String location = req.getParameter(\"url\");\n\n    URL url = new URL(location);\n\n    HttpURLConnection  conn = (HttpURLConnection) url.openConnection();\n}",
          "isCorrect": false
        },
        {
          "snippet": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String location = req.getParameter(\"url\");\n\n    List<String> allowedHosts = new ArrayList<String>();\n    allowedHosts.add(\"https://trusted1.example.com/\");\n    allowedHosts.add(\"https://trusted2.example.com/\");\n\n    URL url = new URL(location);\n\n    if (allowedHosts.contains(location))\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "16df4af5-51b6-4e0b-9a49-70421793087a",
      "title": "Ensure Secure Deserialization",
      "rule": "Ensure that deserialization processes validate untrusted data before processing to prevent code execution vulnerabilities.",
      "why_is_this_important": "Deserializing untrusted data without validation can allow attackers to inject malicious objects, leading to remote code execution and security breaches.",
      "severity": "Critical",
      "bad_example": "public class RequestProcessor {\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n    ServletInputStream servletIS = request.getInputStream();\n    ObjectInputStream  objectIS  = new ObjectInputStream(servletIS);\n    Object input                 = objectIS.readObject();\n  }\n}",
      "good_example": "public class SecureObjectInputStream extends ObjectInputStream {\n\n  @Override\n  protected Class<?> resolveClass(ObjectStreamClass osc) throws IOException, ClassNotFoundException {\n\n    List<String> approvedClasses = new ArrayList<String>();\n    approvedClasses.add(AllowedClass1.class.getName());\n    approvedClasses.add(AllowedClass2.class.getName());\n\n    if (!approvedClasses.contains(osc.getName())) {\n      throw new InvalidClassException(\"Unauthorized deserialization\", osc.getName());\n    }\n\n    return super.resolveClass(osc);\n  }\n}\n\npublic class RequestProcessor {\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n    ServletInputStream servletIS = request.getInputStream();\n    ObjectInputStream  objectIS  = new SecureObjectInputStream(servletIS);\n    Object input                 = objectIS.readObject();\n  }\n}",
      "examples": [
        {
          "snippet": "public class RequestProcessor {\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n    ServletInputStream servletIS = request.getInputStream();\n    ObjectInputStream  objectIS  = new ObjectInputStream(servletIS);\n    Object input                 = objectIS.readObject();\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public class SecureObjectInputStream extends ObjectInputStream {\n\n  @Override\n  protected Class<?> resolveClass(ObjectStreamClass osc) throws IOException, ClassNotFoundException {\n\n    List<String> approvedClasses = new ArrayList<String>();\n    approvedClasses.add(AllowedClass1.class.getName());\n    approvedClasses.add(AllowedClass2.class.getName());\n\n    if (!approvedClasses.contains(osc.getName())) {\n      throw new InvalidClassException(\"Unauthorized deserialization\", osc.getName());\n    }\n\n    return super.resolveClass(osc);\n  }\n}\n\npublic class RequestProcessor {\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n    ServletInputStream servletIS = request.getInputStream();\n    ObjectInputStream  objectIS  = new SecureObjectInputStream(servletIS);\n    Object input                 = objectIS.readObject();\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "597a0558-b568-4cc9-89f4-de5a86839ec8",
      "title": "Use Appropriate HTTP Status Codes",
      "rule": "Ensure that HTTP handlers return the appropriate status codes based on request success or failure.",
      "why_is_this_important": "Returning incorrect HTTP status codes can lead to ambiguous API behavior, making it harder for clients to handle responses correctly.",
      "severity": "High",
      "bad_example": "@Controller\npublic class UserController {\n    public ResponseEntity<User> getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(user); // Noncompliant: Setting 500 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.OK).build(); // Noncompliant: Setting 200 for exception\n        }\n    }\n}",
      "good_example": "@Controller\npublic class UserController {\n    public ResponseEntity<User> getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.ok(user); // Compliant: Setting 200 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Compliant: Setting 500 for exception\n        }\n    }\n}",
      "examples": [
        {
          "snippet": "@Controller\npublic class UserController {\n    public ResponseEntity<User> getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(user); // Noncompliant: Setting 500 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.OK).build(); // Noncompliant: Setting 200 for exception\n        }\n    }\n}",
          "isCorrect": false
        },
        {
          "snippet": "@Controller\npublic class UserController {\n    public ResponseEntity<User> getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.ok(user); // Compliant: Setting 200 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Compliant: Setting 500 for exception\n        }\n    }\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["api-conventions"],
      "scope": "file"
    },
    {
      "uuid": "27e686fd-1c5c-49b7-9baf-0e3506ca21ff",
      "title": "Ensure `@PathVariable` is Used for Path Variables",
      "rule": "Ensure that `@PathVariable` is used correctly in Spring applications to bind URI path variables to method parameters.",
      "why_is_this_important": "In Spring, failing to use `@PathVariable` with a path template placeholder (`/api/resource/{id}`) can cause unexpected behavior or missing parameter errors.",
      "severity": "High",
      "bad_example": "@GetMapping(\"/api/resource/{id}\")\npublic ResponseEntity<String> getResourceById(Long id) { // Noncompliant - The 'id' parameter will not be automatically populated with the path variable value\n  return ResponseEntity.ok(\"Fetching resource with ID: \" + id);\n}",
      "good_example": "@GetMapping(\"/api/resource/{id}\")\npublic ResponseEntity<String> getResourceById(@PathVariable Long id) { // Compliant\n  return ResponseEntity.ok(\"Fetching resource with ID: \" + id);\n}",
      "examples": [
        {
          "snippet": "@GetMapping(\"/api/resource/{id}\")\npublic ResponseEntity<String> getResourceById(Long id) { // Noncompliant - The 'id' parameter will not be automatically populated with the path variable value\n  return ResponseEntity.ok(\"Fetching resource with ID: \" + id);\n}",
          "isCorrect": false
        },
        {
          "snippet": "@GetMapping(\"/api/resource/{id}\")\npublic ResponseEntity<String> getResourceById(@PathVariable Long id) { // Compliant\n  return ResponseEntity.ok(\"Fetching resource with ID: \" + id);\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["api-conventions", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "a6ba9d44-a30b-478a-b80a-a56bd159b321",
      "title": "Avoid Using `@Qualifier` on `@Bean` Methods",
      "rule": "Ensure that `@Qualifier` is not used on `@Bean` methods, as explicit bean titles should be used instead.",
      "why_is_this_important": "Using `@Qualifier` on `@Bean` methods is redundant and can cause unnecessary complexity in Spring applications. Beans should be titled explicitly using the method title or the `title` attribute.",
      "severity": "High",
      "bad_example": "@Configuration\npublic class MyConfiguration {\n  @Bean\n  @Qualifier(\"myService\")\n  public MyService myService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"betterService\")\n  public MyService aBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"evenBetterService\")\n  public MyService anEvenBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"differentService\")\n  public MyBean aDifferentService() {\n    // ...\n    return new MyBean();\n  }\n}",
      "good_example": "@Configuration\npublic class MyConfiguration {\n  @Bean\n  public MyService myService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(title=\"betterService\")\n  public MyService aBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(title=\"evenBetterService\")\n  public MyService anEvenBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(title=\"differentService\")\n  public MyBean aDifferentService() {\n    // ...\n    return new MyBean();\n  }\n}",
      "examples": [
        {
          "snippet": "@Configuration\npublic class MyConfiguration {\n  @Bean\n  @Qualifier(\"myService\")\n  public MyService myService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"betterService\")\n  public MyService aBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"evenBetterService\")\n  public MyService anEvenBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"differentService\")\n  public MyBean aDifferentService() {\n    // ...\n    return new MyBean();\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "@Configuration\npublic class MyConfiguration {\n  @Bean\n  public MyService myService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(title=\"betterService\")\n  public MyService aBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(title=\"evenBetterService\")\n  public MyService anEvenBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(title=\"differentService\")\n  public MyBean aDifferentService() {\n    // ...\n    return new MyBean();\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "531eee8c-cc3c-42e4-832a-7170d8b5557a",
      "title": "Avoid ClassCastException Due to Unsafe Casting",
      "rule": "Ensure that `instanceof` checks are used before performing explicit type casting to prevent `ClassCastException`.",
      "why_is_this_important": "Unsafe casting can lead to runtime `ClassCastException` errors. Always use `instanceof` checks before performing type casting.",
      "severity": "High",
      "bad_example": "private String hexString(Object o) {\n  return Integer.toHexString((Integer) o); // Noncompliant if hexString is called with a String for example\n}",
      "good_example": "private String hexString(Integer i) {\n  return Integer.toHexString(i);\n}",
      "examples": [
        {
          "snippet": "private String hexString(Object o) {\n  return Integer.toHexString((Integer) o); // Noncompliant if hexString is called with a String for example\n}",
          "isCorrect": false
        },
        {
          "snippet": "private String hexString(Integer i) {\n  return Integer.toHexString(i);\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "uuid": "331764a9-d674-489b-b43b-bbc1321e9405",
      "title": "Always Verify Server Certificates in SSL/TLS Connections",
      "rule": "Ensure that SSL/TLS certificate validation is always enabled to prevent Man-in-the-Middle (MitM) attacks.",
      "why_is_this_important": "Disabling SSL/TLS certificate validation exposes applications to Man-in-the-Middle (MitM) attacks, allowing attackers to intercept and manipulate sensitive data.",
      "severity": "Critical",
      "bad_example": "class TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {  // Noncompliant\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { // Noncompliant\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}",
      "good_example": "",
      "examples": [
        {
          "snippet": "class TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {  // Noncompliant\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { // Noncompliant\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}",
          "isCorrect": false
        }
      ],
      "language": "java",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "fb6fcc04-883e-4989-9543-578d297a8741",
      "title": "Retrieve Only Necessary Fields in SQL Queries",
      "rule": "Ensure that SQL queries specify only the necessary fields instead of using `SELECT *` to optimize database performance.",
      "why_is_this_important": "Using `SELECT *` retrieves more data than necessary, increasing database load, network traffic, and memory usage. Query only required fields to optimize performance.",
      "severity": "High",
      "bad_example": "public class OrderRepository {\n\n    public record OrderSummary(String title, String orderId, BigDecimal price) { }\n\n    public List<OrderSummary> queryOrderSummaries(Connection conn) {\n            String sql = \"SELECT * \" +                                                         // Noncompliant\n                          \"FROM Orders JOIN Customers ON Orders.customerId = Customers.id \";\n\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n\n            return convertResultToOrderSummaryList(rs);\n    }\n}",
      "good_example": "public class OrderRepository {\n\n    public record OrderSummary(String title, String orderId, BigDecimal price) { }\n\n    public List<OrderSummary> queryOrderSummaries(Connection conn) {\n            String sql = \"SELECT Customers.title, Orders.id, Orders.price \" +                   // Compliant\n                          \"FROM Orders JOIN Customers ON Orders.customerId = Customers.id \";\n\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n\n            return convertResultToOrderSummaryList(rs);\n    }\n}",
      "examples": [
        {
          "snippet": "public class OrderRepository {\n\n    public record OrderSummary(String title, String orderId, BigDecimal price) { }\n\n    public List<OrderSummary> queryOrderSummaries(Connection conn) {\n            String sql = \"SELECT * \" +                                                         // Noncompliant\n                          \"FROM Orders JOIN Customers ON Orders.customerId = Customers.id \";\n\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n\n            return convertResultToOrderSummaryList(rs);\n    }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public class OrderRepository {\n\n    public record OrderSummary(String title, String orderId, BigDecimal price) { }\n\n    public List<OrderSummary> queryOrderSummaries(Connection conn) {\n            String sql = \"SELECT Customers.title, Orders.id, Orders.price \" +                   // Compliant\n                          \"FROM Orders JOIN Customers ON Orders.customerId = Customers.id \";\n\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n\n            return convertResultToOrderSummaryList(rs);\n    }\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["database-query-performance"],
      "scope": "file"
    },
    {
      "uuid": "b1c15d7e-f072-4490-9616-7fc8620ff498",
      "title": "Keep Lambdas Concise",
      "rule": "Ensure that lambda expressions remain short and simple. If a lambda grows too complex, refactor it into a titled method.",
      "why_is_this_important": "Lambdas should remain short and simple. Large, complex lambdas reduce readability and should be refactored into titled methods for better maintainability.",
      "severity": "High",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "java",
      "buckets": ["readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "e9c957f4-064d-4e86-bd4e-bf2154e78011",
      "title": "Use Batch Processing in JDBC",
      "rule": "Ensure that batch processing is used instead of executing individual SQL statements inside loops for better database efficiency.",
      "why_is_this_important": "Executing individual SQL statements in a loop is inefficient. Using batch processing improves performance by reducing database communication overhead.",
      "severity": "High",
      "bad_example": "public void execute(Connection connection) {\n  try {\n    Statement statement = connection.createStatement();\n\n    for (int i = 0; i < 10; i++) {\n      statement.execute(\"INSERT INTO myTable (column1, column2) VALUES (\" + i + \", 'value\" + i + \"')\"); // Noncompliant\n    }\n\n    statement.close();\n    connection.close();\n  } catch (SQLException e) {\n    e.printStackTrace();\n  }\n}",
      "good_example": "public void execute(Connection connection) {\n  try {\n    Statement statement = connection.createStatement();\n\n    for (int i = 0; i < 10; i++) {\n      statement.addBatch(\"INSERT INTO myTable (column1, column2) VALUES (\" + i + \", 'value\" + i + \"')\"); // Compliant\n    }\n    statement.executeBatch();\n\n    statement.close();\n    connection.close();\n  } catch (SQLException e) {\n    e.printStackTrace();\n  }\n}",
      "examples": [
        {
          "snippet": "public void execute(Connection connection) {\n  try {\n    Statement statement = connection.createStatement();\n\n    for (int i = 0; i < 10; i++) {\n      statement.execute(\"INSERT INTO myTable (column1, column2) VALUES (\" + i + \", 'value\" + i + \"')\"); // Noncompliant\n    }\n\n    statement.close();\n    connection.close();\n  } catch (SQLException e) {\n    e.printStackTrace();\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public void execute(Connection connection) {\n  try {\n    Statement statement = connection.createStatement();\n\n    for (int i = 0; i < 10; i++) {\n      statement.addBatch(\"INSERT INTO myTable (column1, column2) VALUES (\" + i + \", 'value\" + i + \"')\"); // Compliant\n    }\n    statement.executeBatch();\n\n    statement.close();\n    connection.close();\n  } catch (SQLException e) {\n    e.printStackTrace();\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["database-query-performance"],
      "scope": "file"
    },
    {
      "uuid": "03ee9442-1afd-46c2-836a-82ac3d102275",
      "title": "Use Object Types for Optional REST Parameters",
      "rule": "Ensure that optional REST parameters use object types or `Optional<T>` instead of primitive types to avoid runtime errors.",
      "why_is_this_important": "Using primitive types for optional REST parameters can lead to runtime errors when the parameter is absent. Use object types or `Optional<T>` instead.",
      "severity": "High",
      "bad_example": "@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) int articleId) { // Noncompliant, null cannot be mapped to int\n   //...\n}",
      "good_example": "@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) Integer articleId) { // Compliant\n   //...\n}",
      "examples": [
        {
          "snippet": "@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) int articleId) { // Noncompliant, null cannot be mapped to int\n   //...\n}",
          "isCorrect": false
        },
        {
          "snippet": "@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) Integer articleId) { // Compliant\n   //...\n}",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["api-conventions", "error-handling"],
      "scope": "file"
    },
    {
      "uuid": "682eb9c9-2213-4d4c-ba25-59d1113d2c2f",
      "title": "Prefer Constructor Injection for Spring Components",
      "rule": "Ensure that constructor injection is used instead of field injection (`@Autowired` on fields) in Spring components for better testability.",
      "why_is_this_important": "Using field injection (`@Autowired` on fields) in Spring components increases coupling and testability issues. Constructor injection is more reliable and preferred.",
      "severity": "High",
      "bad_example": "@Controller\npublic class HelloWorld {\n\n  @Autowired\n  private String title = null; // Noncompliant\n\n}",
      "good_example": "",
      "examples": [
        {
          "snippet": "@Controller\npublic class HelloWorld {\n\n  @Autowired\n  private String title = null; // Noncompliant\n\n}",
          "isCorrect": false
        }
      ],
      "language": "java",
      "buckets": ["module-architecture"],
      "scope": "file"
    },
    {
      "uuid": "269039f7-387f-4a40-8792-ccc6d2e37e76",
      "title": "Avoid Brain Methods (Methods Doing Too Many Tasks)",
      "rule": "Ensure that methods perform a single, well-defined task. Large methods should be refactored into smaller, focused methods.",
      "why_is_this_important": "A method that performs too many operations becomes difficult to understand, maintain, and reuse. Large methods should be broken down into smaller, focused methods.",
      "severity": "Medium",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "java",
      "buckets": ["duplication-complexity", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "5e75dc52-6308-43c1-8c5e-dfdd11f51143",
      "title": "Avoid Monster Classes (Excessive Dependencies)",
      "rule": "Ensure that large classes with multiple responsibilities are refactored into smaller, more manageable classes.",
      "why_is_this_important": "Classes with too many responsibilities become difficult to maintain and violate the Single Responsibility Principle. Refactor to separate concerns into smaller, independent classes.",
      "severity": "Medium",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "java",
      "buckets": ["module-architecture", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "85f5905d-688e-47da-b347-c7d45e99b629",
      "title": "Use Java Records for Immutable Data Structures",
      "rule": "Ensure that Java records are used for immutable data structures instead of manually implementing immutable classes.",
      "why_is_this_important": "Java records provide built-in immutability, reducing the risk of accidental modifications. Avoid manually creating immutable classes when records can be used.",
      "severity": "High",
      "bad_example": "final class Person { // Noncompliant\n  private final String title;\n  private final int age;\n\n  public Person(String title, int age) {\n    this.title = title;\n    this.age = age;\n  }\n\n  public String getName() {...}\n\n  public int getAge() {...}\n\n  @Override\n  public boolean equals(Object o) {...}\n\n  @Override\n  public int hashCode() {...}\n\n  @Override\n  public String toString() {...}\n}",
      "good_example": "record Person(String title, int age) { }",
      "examples": [
        {
          "snippet": "final class Person { // Noncompliant\n  private final String title;\n  private final int age;\n\n  public Person(String title, int age) {\n    this.title = title;\n    this.age = age;\n  }\n\n  public String getName() {...}\n\n  public int getAge() {...}\n\n  @Override\n  public boolean equals(Object o) {...}\n\n  @Override\n  public int hashCode() {...}\n\n  @Override\n  public String toString() {...}\n}",
          "isCorrect": false
        },
        {
          "snippet": "record Person(String title, int age) { }",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "71b8ab33-91a8-488f-8ff4-64363a5ace6b",
      "title": "Avoid Redundant Null Checks with `instanceof`",
      "rule": "Ensure that explicit null checks are not used with `instanceof`, as `null` is never an instance of any class.",
      "why_is_this_important": "`null` is never an instance of any class, making explicit null checks redundant when using `instanceof`. This check should be removed.",
      "severity": "",
      "bad_example": "if (x != null && x instanceof MyClass) { ... }  // Noncompliant\n\nif (x == null || ! x instanceof MyClass) { ... } // Noncompliant",
      "good_example": "if (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }",
      "examples": [
        {
          "snippet": "if (x != null && x instanceof MyClass) { ... }  // Noncompliant\n\nif (x == null || ! x instanceof MyClass) { ... } // Noncompliant",
          "isCorrect": false
        },
        {
          "snippet": "if (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }",
          "isCorrect": true
        }
      ],
      "language": "java",
      "buckets": ["duplication-complexity"],
      "scope": "file"
    },
    {
      "uuid": "a7d8419b-b62c-489d-87ae-005b90257a61",
      "title": "Use `var` Wisely",
      "rule": "Check if `var` is used only when the variable type is clear and enhances readability. Avoid using `var` when the type is not obvious.",
      "why_is_this_important": "Overusing `var` can make code harder to read, especially when the variable type isn't obvious. Use it only when it enhances readability.",
      "severity": "Medium",
      "bad_example": "var x = 42; // Type is unclear.",
      "good_example": "int x = 42; // Explicit type improves readability.",
      "examples": [
        {
          "snippet": "var x = 42; // Type is unclear.",
          "isCorrect": false
        },
        {
          "snippet": "int x = 42; // Explicit type improves readability.",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "ca089fa7-0c0d-4cfd-9458-aac4c6480669",
      "title": "Prefer Named Classes Over Tuples",
      "rule": "Ensure that titled classes are used instead of untitled tuples for complex data structures. Tuples should only be used when their purpose is immediately clear.",
      "why_is_this_important": "Tuples without descriptive titles can make code difficult to understand and maintain. Named classes provide clarity and improve code readability.",
      "severity": "Medium",
      "bad_example": "Tuple<int, string> result = new Tuple<int, string>(1, \"Hello\");",
      "good_example": "public class Result\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\nvar result = new Result { Id = 1, Name = \"Hello\" };\n",
      "examples": [
        {
          "snippet": "Tuple<int, string> result = new Tuple<int, string>(1, \"Hello\");",
          "isCorrect": false
        },
        {
          "snippet": "public class Result\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\nvar result = new Result { Id = 1, Name = \"Hello\" };\n",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "fb748486-8d16-42a5-a274-06cab01cede4",
      "title": "Remove Items Safely During Iteration",
      "rule": "Verify that collections are not modified directly during iteration. Instead, ensure safe removal techniques such as iterating over a copy or using `ToList()`.",
      "why_is_this_important": "Removing items directly from a collection while iterating can cause runtime exceptions. Use safe removal techniques such as `ToList()`.",
      "severity": "High",
      "bad_example": "foreach (var item in someList)\n{\n    if (item.Condition)\n        someList.Remove(item);\n}\n",
      "good_example": "someList.RemoveAll(item => item.Condition);\n",
      "examples": [
        {
          "snippet": "foreach (var item in someList)\n{\n    if (item.Condition)\n        someList.Remove(item);\n}\n",
          "isCorrect": false
        },
        {
          "snippet": "someList.RemoveAll(item => item.Condition);\n",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "uuid": "82707830-f308-44aa-8b7e-380222f42711",
      "title": "Avoid Excessively Deep Namespaces",
      "rule": "Ensure that titlespace structures are not overly deep. Favor a flat, organized structure to enhance readability and navigation.",
      "why_is_this_important": "Deeply nested titlespaces increase code complexity, making navigation and maintenance more difficult.",
      "severity": "Medium",
      "bad_example": "titlespace Company.Project.Module.Component.Subcomponent.Feature {}",
      "good_example": "titlespace Company.Feature {}\n",
      "examples": [
        {
          "snippet": "titlespace Company.Project.Module.Component.Subcomponent.Feature {}",
          "isCorrect": false
        },
        {
          "snippet": "titlespace Company.Feature {}\n",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["module-architecture", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "0395d142-3656-4ccd-b90d-f7d87a486535",
      "title": "Organize Class Members by Accessibility",
      "rule": "Check if class members are grouped by accessibility (`public`, `protected`, `private`) to improve code readability and maintainability.",
      "why_is_this_important": "Poorly organized class members make code harder to navigate and maintain. Grouping members by accessibility improves readability.",
      "severity": "Low",
      "bad_example": "private int _value;\npublic void DoSomething() {}\npublic int Value { get; set; }",
      "good_example": "public int Value { get; set; }\npublic void DoSomething() {}\nprivate int _value;",
      "examples": [
        {
          "snippet": "private int _value;\npublic void DoSomething() {}\npublic int Value { get; set; }",
          "isCorrect": false
        },
        {
          "snippet": "public int Value { get; set; }\npublic void DoSomething() {}\nprivate int _value;",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "cc0b3dd2-c2fe-4abe-b2c4-5f035ba3787e",
      "title": "Use `readonly` or `const` for Immutable Data",
      "rule": "Ensure that immutable instance fields are marked as `readonly`, and compile-time constants are marked as `const`.",
      "why_is_this_important": "Mutable fields can lead to unintended modifications. Use `readonly` for instance fields and `const` for compile-time constants.",
      "severity": "High",
      "bad_example": "public int MaxValue = 100;\n",
      "good_example": "public const int MaxValue = 100;\n",
      "examples": [
        {
          "snippet": "public int MaxValue = 100;\n",
          "isCorrect": false
        },
        {
          "snippet": "public const int MaxValue = 100;\n",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "b4b7cde1-c916-4d03-ba78-ffe862bc2c45",
      "title": "Limit Lengthy LINQ Chains",
      "rule": "Verify that LINQ queries are not excessively long. Break complex queries into smaller, more understandable expressions.",
      "why_is_this_important": "Overly long LINQ queries reduce readability and make debugging difficult. Break them into smaller, more understandable expressions.",
      "severity": "High",
      "bad_example": "var result = someList.Where(x => x.IsValid).OrderBy(x => x.Name).Select(x => x.Value).ToList();",
      "good_example": "var validItems = someList.Where(x => x.IsValid);\nvar orderedItems = validItems.OrderBy(x => x.Name);\nvar result = orderedItems.Select(x => x.Value).ToList();\n",
      "examples": [
        {
          "snippet": "var result = someList.Where(x => x.IsValid).OrderBy(x => x.Name).Select(x => x.Value).ToList();",
          "isCorrect": false
        },
        {
          "snippet": "var validItems = someList.Where(x => x.IsValid);\nvar orderedItems = validItems.OrderBy(x => x.Name);\nvar result = orderedItems.Select(x => x.Value).ToList();\n",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["duplication-complexity", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "0239cb0c-8390-44ff-9886-3911e4a3be5a",
      "title": "Ensure Consistent Attribute Placement",
      "rule": "Check if attributes are consistently placed in the code, maintaining uniform formatting across the project.",
      "why_is_this_important": "Inconsistent placement of attributes can cause confusion and make code harder to read and modify.",
      "severity": "Medium",
      "bad_example": "[Obsolete]\npublic class OldClass {}\n\n[Obsolete(\"Use NewMethod instead\")] public void OldMethod() {}",
      "good_example": "[Obsolete]\npublic class OldClass {}\n\n[Obsolete(\"Use NewMethod instead\")]\npublic void OldMethod() {}\n",
      "examples": [
        {
          "snippet": "[Obsolete]\npublic class OldClass {}\n\n[Obsolete(\"Use NewMethod instead\")] public void OldMethod() {}",
          "isCorrect": false
        },
        {
          "snippet": "[Obsolete]\npublic class OldClass {}\n\n[Obsolete(\"Use NewMethod instead\")]\npublic void OldMethod() {}\n",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "1c933de6-5df7-4ff9-8b6a-3d7dbc76de45",
      "title": "Use Expression-Bodied Members Where Appropriate",
      "rule": "Ensure that simple methods and properties use expression-bodied syntax to improve code conciseness and readability.",
      "why_is_this_important": "Expression-bodied members improve code conciseness and readability for simple properties and methods.",
      "severity": "Low",
      "bad_example": "public int Property\n{\n    get { return _property; }\n}",
      "good_example": "public int Property => _property;\n",
      "examples": [
        {
          "snippet": "public int Property\n{\n    get { return _property; }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public int Property => _property;\n",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "3c417b64-1173-46ac-a936-46e426c30432",
      "title": "Ensure Parameter Names Match Base Methods",
      "rule": "Verify that method parameters in overrides and interface implementations match the base method’s parameter titles to maintain consistency.",
      "why_is_this_important": "Changing parameter titles when implementing an interface or overriding a base method reduces readability and can confuse developers.",
      "severity": "High",
      "bad_example": "interface IBankAccount\n{\n  void AddMoney(int money);\n}\n\nclass BankAccount : IBankAccount\n{\n  void AddMoney(int amount) // Noncompliant: parameter's title differs from base\n  {\n    // ...\n  }\n}",
      "good_example": "interface IBankAccount\n{\n  void AddMoney(int money);\n}\n\nclass BankAccount : IBankAccount\n{\n  void AddMoney(int money) // Compliant: parameter's title match base title\n  {\n    // ...\n  }\n}",
      "examples": [
        {
          "snippet": "interface IBankAccount\n{\n  void AddMoney(int money);\n}\n\nclass BankAccount : IBankAccount\n{\n  void AddMoney(int amount) // Noncompliant: parameter's title differs from base\n  {\n    // ...\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "interface IBankAccount\n{\n  void AddMoney(int money);\n}\n\nclass BankAccount : IBankAccount\n{\n  void AddMoney(int money) // Compliant: parameter's title match base title\n  {\n    // ...\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "79a737a5-333a-45b1-bd98-e2b69ca47d3b",
      "title": "Avoid Using `goto`",
      "rule": "Check if `goto` statements are avoided. Ensure that structured control flow statements (`if`, `for`, `while`) are used instead.",
      "why_is_this_important": "`goto` leads to unstructured, difficult-to-maintain code. Use structured control flow statements (`if`, `for`, `while`, etc.) instead.",
      "severity": "High",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "csharp",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "ce580c6e-9485-4858-82f7-61e03714c19f",
      "title": "Use `First`/`Single` Instead of `FirstOrDefault`/`SingleOrDefault` for Non-Empty Collections",
      "rule": "Ensure `First()` or `Single()` is used instead of `FirstOrDefault()` or `SingleOrDefault()` when collections are guaranteed to have elements.",
      "why_is_this_important": "`FirstOrDefault` and `SingleOrDefault` imply that a collection might be empty, leading to unnecessary null checks and potential bugs.",
      "severity": "High",
      "bad_example": "var items = new List<int> { 1, 2, 3 };\n\nint firstItem = items.FirstOrDefault(); // Noncompliant, this implies the collection might be empty, when we know it is not",
      "good_example": "var items = new List<int> { 1, 2, 3 };\n\nint firstItem = items.First(); // Compliant",
      "examples": [
        {
          "snippet": "var items = new List<int> { 1, 2, 3 };\n\nint firstItem = items.FirstOrDefault(); // Noncompliant, this implies the collection might be empty, when we know it is not",
          "isCorrect": false
        },
        {
          "snippet": "var items = new List<int> { 1, 2, 3 };\n\nint firstItem = items.First(); // Compliant",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "uuid": "a3c4e913-d4a9-4d54-bd95-74d8597707ab",
      "title": "API Controllers Should Inherit from `ControllerBase`",
      "rule": "Verify that API controllers inherit from `ControllerBase` instead of `Controller` unless views are explicitly required.",
      "why_is_this_important": "`ControllerBase` is the proper base class for API controllers, avoiding unnecessary dependencies on view-related functionality.",
      "severity": "High",
      "bad_example": "[ApiController]\npublic class MyController : Controller // Noncompliant: Inherit from ControllerBase instead of Controller.\n//                          ^^^^^^^^^^\n{\n    // ..\n}",
      "good_example": "[ApiController]\npublic class MyController : ControllerBase\n{\n    // ..\n}",
      "examples": [
        {
          "snippet": "[ApiController]\npublic class MyController : Controller // Noncompliant: Inherit from ControllerBase instead of Controller.\n//                          ^^^^^^^^^^\n{\n    // ..\n}",
          "isCorrect": false
        },
        {
          "snippet": "[ApiController]\npublic class MyController : ControllerBase\n{\n    // ..\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["api-conventions", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "98c8581b-5cbb-46fa-baa9-16b7eb464a36",
      "title": "Mark Unchanged Variables as `const`",
      "rule": "Ensure that variables that never change are marked as `const` to prevent accidental modification and enhance code clarity.",
      "why_is_this_important": "Variables that never change should be marked as `const` to prevent accidental modification and improve code clarity.",
      "severity": "High",
      "bad_example": "public bool Seek(int[] input)\n{\n  var target = 32;  // Noncompliant\n  foreach (int i in input)\n  {\n    if (i == target)\n    {\n      return true;\n    }\n  }\n  return false;\n}",
      "good_example": "public bool Seek(int[] input)\n{\n  const int target = 32;\n  foreach (int i in input)\n  {\n    if (i == target)\n    {\n      return true;\n    }\n  }\n  return false;\n}",
      "examples": [
        {
          "snippet": "public bool Seek(int[] input)\n{\n  var target = 32;  // Noncompliant\n  foreach (int i in input)\n  {\n    if (i == target)\n    {\n      return true;\n    }\n  }\n  return false;\n}",
          "isCorrect": false
        },
        {
          "snippet": "public bool Seek(int[] input)\n{\n  const int target = 32;\n  foreach (int i in input)\n  {\n    if (i == target)\n    {\n      return true;\n    }\n  }\n  return false;\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "2e5ce6d4-0309-4e0d-89bb-8f6209299866",
      "title": "Avoid Empty Finalizers",
      "rule": "Check that finalizers are not left empty. If cleanup is needed, ensure proper resource disposal is implemented instead.",
      "why_is_this_important": "Empty finalizers introduce unnecessary performance overhead. If cleanup is needed, implement proper resource disposal instead.",
      "severity": "High",
      "bad_example": "public class Foo\n{\n    ~Foo() // Noncompliant\n    {\n    }\n}",
      "good_example": "",
      "examples": [
        {
          "snippet": "public class Foo\n{\n    ~Foo() // Noncompliant\n    {\n    }\n}",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "buckets": ["maintainability"],
      "scope": "file"
    },
    {
      "uuid": "15beb1a7-d383-4e4f-b53e-ae2f67899e37",
      "title": "Value Types Should Implement `IEquatable<T>`",
      "rule": "Ensure that value types (structs) implement `IEquatable<T>` for efficient equality comparisons, avoiding boxing and reflection.",
      "why_is_this_important": "Structs without `IEquatable<T>` use boxing and reflection for equality checks, reducing performance.",
      "severity": "High",
      "bad_example": "struct MyStruct  // Noncompliant\n{\n    public int Value { get; set; }\n}",
      "good_example": "struct MyStruct : IEquatable<MyStruct>\n{\n    public int Value { get; set; }\n\n    public bool Equals(MyStruct other)\n    {\n        // ...\n    }\n}",
      "examples": [
        {
          "snippet": "struct MyStruct  // Noncompliant\n{\n    public int Value { get; set; }\n}",
          "isCorrect": false
        },
        {
          "snippet": "struct MyStruct : IEquatable<MyStruct>\n{\n    public int Value { get; set; }\n\n    public bool Equals(MyStruct other)\n    {\n        // ...\n    }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "9b7b9ad1-c5f8-4775-b5c2-a699f3400d91",
      "title": "Use Start Index Instead of `Substring`",
      "rule": "Verify that when extracting substrings, a start index is specified to avoid unnecessary memory allocations.",
      "why_is_this_important": "Searching for characters within a substring without a start index can lead to inefficiency and unnecessary memory usage.",
      "severity": "Critical",
      "bad_example": "if (str.SubString(startIndex).IndexOf(char1) == -1) // Noncompliant: a new string is going to be created by \"Substring\"\n{\n   // ...\n}",
      "good_example": "if (str.IndexOf(char1, startIndex) == -1)           // Compliant: no new instance of string is created\n{\n   // ...\n}",
      "examples": [
        {
          "snippet": "if (str.SubString(startIndex).IndexOf(char1) == -1) // Noncompliant: a new string is going to be created by \"Substring\"\n{\n   // ...\n}",
          "isCorrect": false
        },
        {
          "snippet": "if (str.IndexOf(char1, startIndex) == -1)           // Compliant: no new instance of string is created\n{\n   // ...\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "efc20e28-a153-45be-825c-e63854899ee0",
      "title": "Ensure `StringBuilder` Data Is Used",
      "rule": "Ensure that `StringBuilder` instances are converted to strings using `ToString()` before use to prevent memory wastage.",
      "why_is_this_important": "Creating a `StringBuilder` without calling `ToString()` results in unused objects, wasting memory and reducing performance.",
      "severity": "High",
      "bad_example": "public void DoSomething(List<string> strings) {\n  var sb = new StringBuilder();  // Noncompliant\n  sb.Append(\"Got: \");\n  foreach(var str in strings) {\n    sb.Append(str).Append(\", \");\n    // ...\n  }\n}",
      "good_example": "public void DoSomething(List<string> strings) {\n  foreach(var str in strings) {\n    // ...\n  }\n}",
      "examples": [
        {
          "snippet": "public void DoSomething(List<string> strings) {\n  var sb = new StringBuilder();  // Noncompliant\n  sb.Append(\"Got: \");\n  foreach(var str in strings) {\n    sb.Append(str).Append(\", \");\n    // ...\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public void DoSomething(List<string> strings) {\n  foreach(var str in strings) {\n    // ...\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["maintainability", "performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "462eeb30-508b-492c-ab12-bcc365b07f5a",
      "title": "Mark Non-Derived Private Classes as `sealed`",
      "rule": "Check if private or `file`-scoped classes that are never inherited are explicitly marked as `sealed` to indicate they are final.",
      "why_is_this_important": "Private or `file`-scoped classes that are never inherited should be explicitly marked as `sealed` to indicate they are final.",
      "severity": "Low",
      "bad_example": "private class MyClass  // Noncompliant\n{\n  // ...\n}\n\nprivate record MyRecord  // Noncompliant\n{\n  // ...\n}",
      "good_example": "private sealed class MyClass\n{\n  // ...\n}\n\nprivate sealed record MyRecord\n{\n  // ...\n}",
      "examples": [
        {
          "snippet": "private class MyClass  // Noncompliant\n{\n  // ...\n}\n\nprivate record MyRecord  // Noncompliant\n{\n  // ...\n}",
          "isCorrect": false
        },
        {
          "snippet": "private sealed class MyClass\n{\n  // ...\n}\n\nprivate sealed record MyRecord\n{\n  // ...\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["module-architecture", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "424a6105-5bd0-4f58-83f8-350536f0fa66",
      "title": "Avoid Blocking Calls to Async Methods",
      "rule": "Blocking async methods with `.Result` or `.Wait()` can cause deadlocks and prevent efficient asynchronous execution. Use `await` instead for proper async behavior.",
      "why_is_this_important": "Blocking async methods with `.Result` or `.Wait()` can cause deadlocks and prevent efficient asynchronous execution. Use `await` instead for proper async behavior.",
      "severity": "Critical",
      "bad_example": "public static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    // This method causes a deadlock when called in a GUI or ASP.NET context.\n    public static void Test()\n    {\n        // Start the delay.\n        var delayTask = DelayAsync();\n        // Wait for the delay to complete.\n        delayTask.Wait(); // Noncompliant\n    }\n}",
      "good_example": "public static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    public static async Task TestAsync()\n    {\n        // Start the delay.\n        var delayTask = DelayAsync();\n        // Wait for the delay to complete.\n        await delayTask;\n    }\n}",
      "examples": [
        {
          "snippet": "public static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    // This method causes a deadlock when called in a GUI or ASP.NET context.\n    public static void Test()\n    {\n        // Start the delay.\n        var delayTask = DelayAsync();\n        // Wait for the delay to complete.\n        delayTask.Wait(); // Noncompliant\n    }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    public static async Task TestAsync()\n    {\n        // Start the delay.\n        var delayTask = DelayAsync();\n        // Wait for the delay to complete.\n        await delayTask;\n    }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["concurrency-safety", "performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "38bd4144-c918-4eda-a67b-b74534be6e37",
      "title": "Secure Connection Strings from Injection",
      "rule": "Allowing user input in connection strings can lead to injection attacks. Always validate and sanitize inputs before constructing connection strings.",
      "why_is_this_important": "Allowing user input in connection strings can lead to injection attacks. Always validate and sanitize inputs before constructing connection strings.",
      "severity": "Critical",
      "bad_example": "public string ConnectionString { get; set; } = \"Server=10.0.0.101;Database=CustomerData\";\n\npublic SqlConnection ConnectToDatabase(HttpRequest request)\n{\n    string connectionString = string.Format(\"{0};User ID={1};Password={2}\",\n        ConnectionString,\n        request.Form[\"usertitle\"],\n        request.Form[\"password\"]);\n\n    SqlConnection connection = new SqlConnection();\n    connection.ConnectionString = connectionString; // Noncompliant\n    connection.Open();\n    return connection;\n}",
      "good_example": "public string ConnectionString { get; set; } = \"Server=10.0.0.101;Database=CustomerData\";\n\npublic SqlConnection ConnectToDatabase(HttpRequest request)\n{\n    SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(ConnectionString);\n    builder.UserID = request.Form[\"usertitle\"];\n    builder.Password = request.Form[\"password\"];\n\n    SqlConnection connection = new SqlConnection();\n    connection.ConnectionString = builder.ConnectionString;\n    connection.Open();\n    return connection;\n}",
      "examples": [
        {
          "snippet": "public string ConnectionString { get; set; } = \"Server=10.0.0.101;Database=CustomerData\";\n\npublic SqlConnection ConnectToDatabase(HttpRequest request)\n{\n    string connectionString = string.Format(\"{0};User ID={1};Password={2}\",\n        ConnectionString,\n        request.Form[\"usertitle\"],\n        request.Form[\"password\"]);\n\n    SqlConnection connection = new SqlConnection();\n    connection.ConnectionString = connectionString; // Noncompliant\n    connection.Open();\n    return connection;\n}",
          "isCorrect": false
        },
        {
          "snippet": "public string ConnectionString { get; set; } = \"Server=10.0.0.101;Database=CustomerData\";\n\npublic SqlConnection ConnectToDatabase(HttpRequest request)\n{\n    SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(ConnectionString);\n    builder.UserID = request.Form[\"usertitle\"];\n    builder.Password = request.Form[\"password\"];\n\n    SqlConnection connection = new SqlConnection();\n    connection.ConnectionString = builder.ConnectionString;\n    connection.Open();\n    return connection;\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "8fe21ae4-4037-4afd-bfe2-00364cc4f3a2",
      "title": "Prevent Deserialization Injection",
      "rule": "Deserializing untrusted data can allow attackers to execute arbitrary code. Always validate and sanitize serialized inputs before processing.",
      "why_is_this_important": "Deserializing untrusted data can allow attackers to execute arbitrary code. Always validate and sanitize serialized inputs before processing.",
      "severity": "Critical",
      "bad_example": "public class Example : Controller\n{\n    [HttpPost]\n    public ActionResult Deserialize(HttpPostedFileBase inputFile)\n    {\n        ExpectedType expectedObject = null;\n        var formatter               = new BinaryFormatter();\n        expectedObject              = (ExpectedType)formatter.Deserialize(inputFile.InputStream);\n    }\n}",
      "good_example": "public class Example : Controller\n{\n    [HttpPost]\n    public ActionResult Deserialize(HttpPostedFileBase inputFile)\n    {\n        ExpectedType expectedObject = null;\n        JsonSerializer serializer   = new JsonSerializer(typeof(expectedObject));\n        expectedObject              = (ExpectedType)serializer.Deserialize(inputFile.InputStream);\n    }\n}",
      "examples": [
        {
          "snippet": "public class Example : Controller\n{\n    [HttpPost]\n    public ActionResult Deserialize(HttpPostedFileBase inputFile)\n    {\n        ExpectedType expectedObject = null;\n        var formatter               = new BinaryFormatter();\n        expectedObject              = (ExpectedType)formatter.Deserialize(inputFile.InputStream);\n    }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public class Example : Controller\n{\n    [HttpPost]\n    public ActionResult Deserialize(HttpPostedFileBase inputFile)\n    {\n        ExpectedType expectedObject = null;\n        JsonSerializer serializer   = new JsonSerializer(typeof(expectedObject));\n        expectedObject              = (ExpectedType)serializer.Deserialize(inputFile.InputStream);\n    }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "d16cc083-653c-4275-af24-5370328eaed5",
      "title": "Prevent SQL Injection in Queries",
      "rule": "Using unsanitized user input in SQL queries can lead to SQL injection attacks. Use parameterized queries to protect against malicious inputs.",
      "why_is_this_important": "Using unsanitized user input in SQL queries can lead to SQL injection attacks. Use parameterized queries to protect against malicious inputs.",
      "severity": "Critical",
      "bad_example": "public class ExampleController : Controller\n{\n    private readonly UserAccountContext Context;\n\n    public IActionResult Authenticate(string user, string pass)\n    {\n        var query = \"SELECT * FROM users WHERE user = '\" + user + \"' AND pass = '\" + pass + \"'\";\n\n        var queryResults = Context\n            .Database\n            .FromSqlRaw(query);\n\n        if (queryResults == 0)\n        {\n            return Unauthorized();\n        }\n\n        return Ok();\n    }\n}",
      "good_example": "public class ExampleController : Controller\n{\n    private readonly UserAccountContext Context;\n\n    public IActionResult Authenticate(string user, string pass)\n    {\n        var query = \"SELECT * FROM users WHERE user = {0} AND pass = {1}\";\n\n        var queryResults = Context\n            .Database\n            .FromSqlRaw(query, user, pass);\n\n        if (queryResults == 0)\n        {\n            return Unauthorized();\n        }\n\n        return Ok();\n    }\n}",
      "examples": [
        {
          "snippet": "public class ExampleController : Controller\n{\n    private readonly UserAccountContext Context;\n\n    public IActionResult Authenticate(string user, string pass)\n    {\n        var query = \"SELECT * FROM users WHERE user = '\" + user + \"' AND pass = '\" + pass + \"'\";\n\n        var queryResults = Context\n            .Database\n            .FromSqlRaw(query);\n\n        if (queryResults == 0)\n        {\n            return Unauthorized();\n        }\n\n        return Ok();\n    }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public class ExampleController : Controller\n{\n    private readonly UserAccountContext Context;\n\n    public IActionResult Authenticate(string user, string pass)\n    {\n        var query = \"SELECT * FROM users WHERE user = {0} AND pass = {1}\";\n\n        var queryResults = Context\n            .Database\n            .FromSqlRaw(query, user, pass);\n\n        if (queryResults == 0)\n        {\n            return Unauthorized();\n        }\n\n        return Ok();\n    }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "2e54e74d-8ea6-4633-b2d2-1e4d3cd8dbd5",
      "title": "Prevent Numeric Overflow in Calculations",
      "rule": "Numeric overflows occur when values exceed the data type limits, leading to incorrect calculations. Use checked arithmetic where necessary.",
      "why_is_this_important": "Numeric overflows occur when values exceed the data type limits, leading to incorrect calculations. Use checked arithmetic where necessary.",
      "severity": "High",
      "bad_example": "public int Transform(int value)\n{\n    if (value <= 0)\n    {\n        return value;\n    }\n    int number = int.MaxValue;\n    return number + value;  // Noncompliant\n}",
      "good_example": "public long Transform(int value)\n{\n    if (value <= 0)\n    {\n        return value;\n    }\n    long number = int.MaxValue;\n    return number + value;\n}",
      "examples": [
        {
          "snippet": "public int Transform(int value)\n{\n    if (value <= 0)\n    {\n        return value;\n    }\n    int number = int.MaxValue;\n    return number + value;  // Noncompliant\n}",
          "isCorrect": false
        },
        {
          "snippet": "public long Transform(int value)\n{\n    if (value <= 0)\n    {\n        return value;\n    }\n    long number = int.MaxValue;\n    return number + value;\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "uuid": "7f7601ec-dfa7-47e5-a04f-584fdd17e996",
      "title": "Use PascalCase for Methods and Properties",
      "rule": "Consistent naming conventions improve readability and maintainability. Method and property titles should follow PascalCase.",
      "why_is_this_important": "Consistent naming conventions improve readability and maintainability. Method and property titles should follow PascalCase.",
      "severity": "Low",
      "bad_example": "public int doSomething() {...} // Noncompliant",
      "good_example": "public int DoSomething() {...}",
      "examples": [
        {
          "snippet": "public int doSomething() {...} // Noncompliant",
          "isCorrect": false
        },
        {
          "snippet": "public int DoSomething() {...}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "4bcc03ff-7efb-4373-bd80-f14195938b70",
      "title": "Use PascalCase for Type Names",
      "rule": "Following PascalCase for type titles ensures consistency and readability across the codebase.",
      "why_is_this_important": "Following PascalCase for type titles ensures consistency and readability across the codebase.",
      "severity": "Low",
      "bad_example": "class my_class {...}\nclass SOMEName42 {...}",
      "good_example": "class MyClass {...}\nclass SomeName42 {...}",
      "examples": [
        {
          "snippet": "class my_class {...}\nclass SOMEName42 {...}",
          "isCorrect": false
        },
        {
          "snippet": "class MyClass {...}\nclass SomeName42 {...}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "4dfcedf8-3fc0-4dbc-993f-ba51ceaaadbc",
      "title": "Avoid Private-Only Constructors",
      "rule": "Classes with only private constructors cannot be instantiated outside their own scope, potentially making them dead code.",
      "why_is_this_important": "Classes with only private constructors cannot be instantiated outside their own scope, potentially making them dead code.",
      "severity": "High",
      "bad_example": "public class MyClass // Noncompliant: the class contains only private constructors\n{\n  private MyClass() { ... }\n}",
      "good_example": "public class MyClass // Compliant: the class contains at least one non-private constructor\n{\n  public MyClass() { ... }\n}",
      "examples": [
        {
          "snippet": "public class MyClass // Noncompliant: the class contains only private constructors\n{\n  private MyClass() { ... }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public class MyClass // Compliant: the class contains at least one non-private constructor\n{\n  public MyClass() { ... }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["maintainability"],
      "scope": "file"
    },
    {
      "uuid": "b942be7f-a8cf-4e37-afcf-225000be1488",
      "title": "Avoid Returning Unused Values",
      "rule": "Methods returning values that are never used introduce unnecessary complexity. Remove such return values to improve clarity.",
      "why_is_this_important": "Methods returning values that are never used introduce unnecessary complexity. Remove such return values to improve clarity.",
      "severity": "Low",
      "bad_example": "class SomeClass\n{\n     private int PrivateMethod() => 42;\n\n     public void PublicMethod()\n     {\n          PrivateMethod(); // Noncompliant: the result of PrivateMethod is not used\n     }\n}",
      "good_example": "",
      "examples": [
        {
          "snippet": "class SomeClass\n{\n     private int PrivateMethod() => 42;\n\n     public void PublicMethod()\n     {\n          PrivateMethod(); // Noncompliant: the result of PrivateMethod is not used\n     }\n}",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "buckets": ["maintainability"],
      "scope": "file"
    },
    {
      "uuid": "ec25cda7-b984-4818-a339-dc7ccb7ad278",
      "title": "Verify Server Certificates in SSL/TLS",
      "rule": "Disabling SSL/TLS certificate validation exposes applications to Man-in-the-Middle (MitM) attacks, compromising security.",
      "why_is_this_important": "Disabling SSL/TLS certificate validation exposes applications to Man-in-the-Middle (MitM) attacks, compromising security.",
      "severity": "Critical",
      "bad_example": "using System.Net;\nusing System.Net.Http;\n\npublic static void connect()\n{\n    ServicePointManager.ServerCertificateValidationCallback +=\n\t (sender, certificate, chain, errors) => {\n\t     return true; // Noncompliant\n    };\n\n    HttpClient httpClient = new HttpClient();\n    HttpResponseMessage response = httpClient.GetAsync(\"https://example.com\").Result;\n}",
      "good_example": "",
      "examples": [
        {
          "snippet": "using System.Net;\nusing System.Net.Http;\n\npublic static void connect()\n{\n    ServicePointManager.ServerCertificateValidationCallback +=\n\t (sender, certificate, chain, errors) => {\n\t     return true; // Noncompliant\n    };\n\n    HttpClient httpClient = new HttpClient();\n    HttpResponseMessage response = httpClient.GetAsync(\"https://example.com\").Result;\n}",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "fbf50a5b-d84f-4ada-98ed-b86140f33044",
      "title": "Avoid `new Guid()` When Not Needed",
      "rule": "Using `new Guid()` instead of `Guid.Empty` or `Guid.NewGuid()` can be misleading and lead to unintended behavior.",
      "why_is_this_important": "Using `new Guid()` instead of `Guid.Empty` or `Guid.NewGuid()` can be misleading and lead to unintended behavior.",
      "severity": "High",
      "bad_example": "public void Foo()\n{\n    var g1 = new Guid();    // Noncompliant - what's the intent?\n    Guid g2 = new();        // Noncompliant\n    var g3 = default(Guid); // Noncompliant\n    Guid g4 = default;      // Noncompliant\n}",
      "good_example": "public void Foo(byte[] bytes)\n{\n    var g1 = Guid.Empty;\n    var g2 = Guid.NewGuid();\n    var g3 = new Guid(bytes);\n}",
      "examples": [
        {
          "snippet": "public void Foo()\n{\n    var g1 = new Guid();    // Noncompliant - what's the intent?\n    Guid g2 = new();        // Noncompliant\n    var g3 = default(Guid); // Noncompliant\n    Guid g4 = default;      // Noncompliant\n}",
          "isCorrect": false
        },
        {
          "snippet": "public void Foo(byte[] bytes)\n{\n    var g1 = Guid.Empty;\n    var g2 = Guid.NewGuid();\n    var g3 = new Guid(bytes);\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "fec79496-7c18-45b9-a5b8-dbabe53db7ab",
      "title": "Verify SSL/TLS Server Certificates",
      "rule": "Skipping certificate validation enables attackers to impersonate trusted entities and intercept secure communications.",
      "why_is_this_important": "Skipping certificate validation enables attackers to impersonate trusted entities and intercept secure communications.",
      "severity": "Critical",
      "bad_example": "using System.Net;\nusing System.Net.Http;\n\npublic static void connect()\n{\n    ServicePointManager.ServerCertificateValidationCallback +=\n\t (sender, certificate, chain, errors) => {\n\t     return true; // Noncompliant\n    };\n\n    HttpClient httpClient = new HttpClient();\n    HttpResponseMessage response = httpClient.GetAsync(\"https://example.com\").Result;\n}",
      "good_example": "",
      "examples": [
        {
          "snippet": "using System.Net;\nusing System.Net.Http;\n\npublic static void connect()\n{\n    ServicePointManager.ServerCertificateValidationCallback +=\n\t (sender, certificate, chain, errors) => {\n\t     return true; // Noncompliant\n    };\n\n    HttpClient httpClient = new HttpClient();\n    HttpResponseMessage response = httpClient.GetAsync(\"https://example.com\").Result;\n}",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "a4efb52f-c8b3-42ea-afeb-32ebf4f707d9",
      "title": "Avoid Constructing System Commands from User Input",
      "rule": "Passing user input directly into system commands can lead to command injection vulnerabilities. Always sanitize inputs before execution.",
      "why_is_this_important": "Passing user input directly into system commands can lead to command injection vulnerabilities. Always sanitize inputs before execution.",
      "severity": "High",
      "bad_example": "using System.Diagnostics;\nProcess p = new Process();\np.StartInfo.FileName = \"/usr/bin/find\";\np.StartInfo.ArgumentList.Add(input); // Sensitive",
      "good_example": "using System.Diagnostics;\nProcess p = new Process();\np.StartInfo.FileName = \"/usr/bin/find\";\nif (allowed.Contains(input)) {\n  p.StartInfo.ArgumentList.Add(input);\n}",
      "examples": [
        {
          "snippet": "using System.Diagnostics;\nProcess p = new Process();\np.StartInfo.FileName = \"/usr/bin/find\";\np.StartInfo.ArgumentList.Add(input); // Sensitive",
          "isCorrect": false
        },
        {
          "snippet": "using System.Diagnostics;\nProcess p = new Process();\np.StartInfo.FileName = \"/usr/bin/find\";\nif (allowed.Contains(input)) {\n  p.StartInfo.ArgumentList.Add(input);\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "7fe1e683-e80a-4cf8-b39e-77eee2da0455",
      "title": "Use `string.IsNullOrEmpty()` for String Checks",
      "rule": "`string.Equals()` for checking empty strings is inefficient. Use `string.IsNullOrEmpty()` instead for clarity and performance.",
      "why_is_this_important": "`string.Equals()` for checking empty strings is inefficient. Use `string.IsNullOrEmpty()` instead for clarity and performance.",
      "severity": "Low",
      "bad_example": "\"\".Equals(title); // Noncompliant\n!title.Equals(\"\"); // Noncompliant\ntitle.Equals(string.Empty); // Noncompliant",
      "good_example": "title != null && title.Length > 0 // Compliant but more error prone\n!string.IsNullOrEmpty(title)\nstring.IsNullOrEmpty(title)",
      "examples": [
        {
          "snippet": "\"\".Equals(title); // Noncompliant\n!title.Equals(\"\"); // Noncompliant\ntitle.Equals(string.Empty); // Noncompliant",
          "isCorrect": false
        },
        {
          "snippet": "title != null && title.Length > 0 // Compliant but more error prone\n!string.IsNullOrEmpty(title)\nstring.IsNullOrEmpty(title)",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "8e5347c4-486d-4be4-8a2e-4ce875fd5658",
      "title": "Avoid `DateTime.Now` for Timing Operations",
      "rule": "`DateTime.Now` is affected by daylight savings and system clock adjustments. Use `Stopwatch` for more accurate timing.",
      "why_is_this_important": "`DateTime.Now` is affected by daylight savings and system clock adjustments. Use `Stopwatch` for more accurate timing.",
      "severity": "High",
      "bad_example": "var start = DateTime.Now; // First call, on March 26th 2:59 am\nMethodToBeBenchmarked();\n\nConsole.WriteLine($\"{(DateTime.Now - start).TotalMilliseconds} ms\"); // Second call happens 2 minutes later but `Now` is March 26th, 4:01 am as there's a shift to summer time",
      "good_example": "var stopWatch = Stopwatch.StartNew(); // Compliant\nMethodToBeBenchmarked();\nstopWatch.Stop();\n\nConsole.WriteLine($\"{stopWatch.ElapsedMilliseconds} ms\");",
      "examples": [
        {
          "snippet": "var start = DateTime.Now; // First call, on March 26th 2:59 am\nMethodToBeBenchmarked();\n\nConsole.WriteLine($\"{(DateTime.Now - start).TotalMilliseconds} ms\"); // Second call happens 2 minutes later but `Now` is March 26th, 4:01 am as there's a shift to summer time",
          "isCorrect": false
        },
        {
          "snippet": "var stopWatch = Stopwatch.StartNew(); // Compliant\nMethodToBeBenchmarked();\nstopWatch.Stop();\n\nConsole.WriteLine($\"{stopWatch.ElapsedMilliseconds} ms\");",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "145d7956-5208-4426-ad77-63257ff706c1",
      "title": "Annotate REST API Actions with HTTP Verb Attributes",
      "rule": "Without explicit HTTP method attributes, API behavior can be unclear, leading to route conflicts and unexpected results.",
      "why_is_this_important": "Without explicit HTTP method attributes, API behavior can be unclear, leading to route conflicts and unexpected results.",
      "severity": "High",
      "bad_example": "[Route(\"Customer\")]                                                        // This route conflicts with GetCustomers action route\npublic async Task<IResult> ChangeCustomer([FromBody] CustomerData data)   // Noncompliant\n{\n    // ...\n    return Results.Ok();\n}\n\n[Route(\"Customer\")]                         // This route conflicts with ChangeCustomer action route\npublic async Task<string> GetCustomers()    // Noncompliant\n{\n    return _customerRepository.GetAll();\n}",
      "good_example": "[Route(\"Customer\")]\n[HttpPost]\npublic async Task<IResult> ChangeCustomer([FromBody] CustomerData data)    // Compliant\n{\n    // ...\n    return Results.Ok();\n}\n\n[HttpGet(\"Customer\")]\npublic async Task<string> GetCustomers()    // Compliant\n{\n    return _customerRepository.GetAll();\n}",
      "examples": [
        {
          "snippet": "[Route(\"Customer\")]                                                        // This route conflicts with GetCustomers action route\npublic async Task<IResult> ChangeCustomer([FromBody] CustomerData data)   // Noncompliant\n{\n    // ...\n    return Results.Ok();\n}\n\n[Route(\"Customer\")]                         // This route conflicts with ChangeCustomer action route\npublic async Task<string> GetCustomers()    // Noncompliant\n{\n    return _customerRepository.GetAll();\n}",
          "isCorrect": false
        },
        {
          "snippet": "[Route(\"Customer\")]\n[HttpPost]\npublic async Task<IResult> ChangeCustomer([FromBody] CustomerData data)    // Compliant\n{\n    // ...\n    return Results.Ok();\n}\n\n[HttpGet(\"Customer\")]\npublic async Task<string> GetCustomers()    // Compliant\n{\n    return _customerRepository.GetAll();\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["api-conventions"],
      "scope": "file"
    },
    {
      "uuid": "3c6a4031-525c-48c3-8615-e001555b901c",
      "title": "Ensure Controllers Follow Single Responsibility Principle",
      "rule": "Controllers handling multiple concerns become harder to maintain and test. Split responsibilities into separate controllers.",
      "why_is_this_important": "Controllers handling multiple concerns become harder to maintain and test. Split responsibilities into separate controllers.",
      "severity": "High",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "csharp",
      "buckets": ["module-architecture"],
      "scope": "file"
    },
    {
      "uuid": "5a0fd2b0-9ff1-41b3-b942-ad8cbebf067e",
      "title": "Always Validate `ModelState.IsValid` in Controllers",
      "rule": "Failing to check `ModelState.IsValid` before processing user input can result in invalid or unverified data being accepted.",
      "why_is_this_important": "Failing to check `ModelState.IsValid` before processing user input can result in invalid or unverified data being accepted.",
      "severity": "High",
      "bad_example": "public async Task<IActionResult> Create(Movie movie) // Noncompliant: model validity check is missing\n{\n    _context.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n\n    return RedirectToAction(titleof(Index));\n}",
      "good_example": "public async Task<IActionResult> Create(Movie movie)\n{\n    if (!ModelState.IsValid)\n    {\n        return View(movie);\n    }\n\n    _context.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n\n    return RedirectToAction(titleof(Index));\n}",
      "examples": [
        {
          "snippet": "public async Task<IActionResult> Create(Movie movie) // Noncompliant: model validity check is missing\n{\n    _context.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n\n    return RedirectToAction(titleof(Index));\n}",
          "isCorrect": false
        },
        {
          "snippet": "public async Task<IActionResult> Create(Movie movie)\n{\n    if (!ModelState.IsValid)\n    {\n        return View(movie);\n    }\n\n    _context.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n\n    return RedirectToAction(titleof(Index));\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "e387d811-dad2-4d10-ace7-20c7b2d5d9c3",
      "title": "Enforce Authentication for LDAP Connections",
      "rule": "Allowing anonymous LDAP connections exposes directory data to unauthorized users. Always require authentication.",
      "why_is_this_important": "Allowing anonymous LDAP connections exposes directory data to unauthorized users. Always require authentication.",
      "severity": "High",
      "bad_example": "DirectoryEntry myDirectoryEntry = new DirectoryEntry(adPath);\nmyDirectoryEntry.AuthenticationType = AuthenticationTypes.None; // Noncompliant\n\nDirectoryEntry myDirectoryEntry = new DirectoryEntry(adPath, \"u\", \"p\", AuthenticationTypes.None); // Noncompliant",
      "good_example": "DirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath); // Compliant; default DirectoryEntry.AuthenticationType property value is \"Secure\" since .NET Framework 2.0\n\nDirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath, \"u\", \"p\", AuthenticationTypes.Secure);",
      "examples": [
        {
          "snippet": "DirectoryEntry myDirectoryEntry = new DirectoryEntry(adPath);\nmyDirectoryEntry.AuthenticationType = AuthenticationTypes.None; // Noncompliant\n\nDirectoryEntry myDirectoryEntry = new DirectoryEntry(adPath, \"u\", \"p\", AuthenticationTypes.None); // Noncompliant",
          "isCorrect": false
        },
        {
          "snippet": "DirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath); // Compliant; default DirectoryEntry.AuthenticationType property value is \"Secure\" since .NET Framework 2.0\n\nDirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath, \"u\", \"p\", AuthenticationTypes.Secure);",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "f2a25bd4-ce19-4f16-a640-25c5e6b4d659",
      "title": "Prevent Reflection Injection Attacks",
      "rule": "Reflection methods that process untrusted input can be exploited for remote code execution. Always validate and sanitize external input before using reflection.",
      "why_is_this_important": "Reflection methods that process untrusted input can be exploited for remote code execution. Always validate and sanitize external input before using reflection.",
      "severity": "High",
      "bad_example": "public class ExampleController : Controller\n{\n    public IActionResult Apply(string EffectName)\n    {\n        var EffectInstance  = Activator.CreateInstance(null, EffectName); // Noncompliant\n        object EffectPlugin = EffectInstance.Unwrap();\n\n        if ( ((IEffect)EffectPlugin).ApplyFilter() )\n        {\n            return Ok();\n        }\n        else\n        {\n            return Problem();\n        }\n    }\n}\n\npublic interface IEffect\n{\n    bool ApplyFilter();\n}",
      "good_example": "public class ExampleController : Controller\n{\n    private static readonly string[] EFFECT_ALLOW_LIST = {\n        \"SepiaEffect\",\n        \"BlackAndWhiteEffect\",\n        \"WaterColorEffect\",\n        \"OilPaintingEffect\"\n    };\n\n    public IActionResult Apply(string EffectName)\n    {\n        if (!EFFECT_ALLOW_LIST.Contains(EffectName))\n        {\n            return BadRequest(\"Invalid effect title. The effect is not allowed.\");\n        }\n\n        var EffectInstance  = Activator.CreateInstance(null, EffectName);\n        object EffectPlugin = EffectInstance.Unwrap();\n\n        if ( ((IEffect)EffectPlugin).ApplyFilter() )\n        {\n            return Ok();\n        }\n        else\n        {\n            return Problem();\n        }\n    }\n}\n\npublic interface IEffect\n{\n    bool ApplyFilter();\n}",
      "examples": [
        {
          "snippet": "public class ExampleController : Controller\n{\n    public IActionResult Apply(string EffectName)\n    {\n        var EffectInstance  = Activator.CreateInstance(null, EffectName); // Noncompliant\n        object EffectPlugin = EffectInstance.Unwrap();\n\n        if ( ((IEffect)EffectPlugin).ApplyFilter() )\n        {\n            return Ok();\n        }\n        else\n        {\n            return Problem();\n        }\n    }\n}\n\npublic interface IEffect\n{\n    bool ApplyFilter();\n}",
          "isCorrect": false
        },
        {
          "snippet": "public class ExampleController : Controller\n{\n    private static readonly string[] EFFECT_ALLOW_LIST = {\n        \"SepiaEffect\",\n        \"BlackAndWhiteEffect\",\n        \"WaterColorEffect\",\n        \"OilPaintingEffect\"\n    };\n\n    public IActionResult Apply(string EffectName)\n    {\n        if (!EFFECT_ALLOW_LIST.Contains(EffectName))\n        {\n            return BadRequest(\"Invalid effect title. The effect is not allowed.\");\n        }\n\n        var EffectInstance  = Activator.CreateInstance(null, EffectName);\n        object EffectPlugin = EffectInstance.Unwrap();\n\n        if ( ((IEffect)EffectPlugin).ApplyFilter() )\n        {\n            return Ok();\n        }\n        else\n        {\n            return Problem();\n        }\n    }\n}\n\npublic interface IEffect\n{\n    bool ApplyFilter();\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "5735059c-ec5b-401c-bc6a-58cb13e14a17",
      "title": "Prevent Code Injection in Dynamic Execution",
      "rule": "Allowing untrusted data to be executed dynamically can lead to arbitrary code execution and security vulnerabilities. Always validate input before execution.",
      "why_is_this_important": "Allowing untrusted data to be executed dynamically can lead to arbitrary code execution and security vulnerabilities. Always validate input before execution.",
      "severity": "Critical",
      "bad_example": "using System.CodeDom.Compiler;\n\npublic class ExampleController : Controller\n{\n    public void Run(string message)\n    {\n        const string code = @\"\n            using System;\n            public class MyClass\n            {\n                public void MyMethod()\n                {\n                    Console.WriteLine(\"\"\" + message + @\"\"\");\n                }\n            }\n        \";\n\n        var provider = CodeDomProvider.CreateProvider(\"CSharp\");\n        var compilerParameters = new CompilerParameters { ReferencedAssemblies = { \"System.dll\", \"System.Runtime.dll\" } };\n        var compilerResults = provider.CompileAssemblyFromSource(compilerParameters, code); // Noncompliant\n\n        object myInstance = compilerResults.CompiledAssembly.CreateInstance(\"MyClass\");\n        myInstance.GetType().GetMethod(\"MyMethod\").Invoke(myInstance, new object[0]);\n    }\n}",
      "good_example": "using System.CodeDom.Compiler;\n\npublic class ExampleController : Controller\n{\n    public void Run(string message)\n    {\n        const string code = @\"\n            using System;\n            public class MyClass\n            {\n                public void MyMethod(string input)\n                {\n                    Console.WriteLine(input);\n                }\n            }\n        \";\n\n        var provider = CodeDomProvider.CreateProvider(\"CSharp\");\n        var compilerParameters = new CompilerParameters { ReferencedAssemblies = { \"System.dll\", \"System.Runtime.dll\" } };\n        var compilerResults = provider.CompileAssemblyFromSource(compilerParameters, code);\n        object myInstance = compilerResults.CompiledAssembly.CreateInstance(\"MyClass\");\n        myInstance.GetType().GetMethod(\"MyMethod\").Invoke(myInstance, new object[]{ message }); // Pass message to dynamic method\n    }\n}",
      "examples": [
        {
          "snippet": "using System.CodeDom.Compiler;\n\npublic class ExampleController : Controller\n{\n    public void Run(string message)\n    {\n        const string code = @\"\n            using System;\n            public class MyClass\n            {\n                public void MyMethod()\n                {\n                    Console.WriteLine(\"\"\" + message + @\"\"\");\n                }\n            }\n        \";\n\n        var provider = CodeDomProvider.CreateProvider(\"CSharp\");\n        var compilerParameters = new CompilerParameters { ReferencedAssemblies = { \"System.dll\", \"System.Runtime.dll\" } };\n        var compilerResults = provider.CompileAssemblyFromSource(compilerParameters, code); // Noncompliant\n\n        object myInstance = compilerResults.CompiledAssembly.CreateInstance(\"MyClass\");\n        myInstance.GetType().GetMethod(\"MyMethod\").Invoke(myInstance, new object[0]);\n    }\n}",
          "isCorrect": false
        },
        {
          "snippet": "using System.CodeDom.Compiler;\n\npublic class ExampleController : Controller\n{\n    public void Run(string message)\n    {\n        const string code = @\"\n            using System;\n            public class MyClass\n            {\n                public void MyMethod(string input)\n                {\n                    Console.WriteLine(input);\n                }\n            }\n        \";\n\n        var provider = CodeDomProvider.CreateProvider(\"CSharp\");\n        var compilerParameters = new CompilerParameters { ReferencedAssemblies = { \"System.dll\", \"System.Runtime.dll\" } };\n        var compilerResults = provider.CompileAssemblyFromSource(compilerParameters, code);\n        object myInstance = compilerResults.CompiledAssembly.CreateInstance(\"MyClass\");\n        myInstance.GetType().GetMethod(\"MyMethod\").Invoke(myInstance, new object[]{ message }); // Pass message to dynamic method\n    }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "fa56c6b0-ee83-4076-b852-879cb6ee77e2",
      "title": "Secure OS Command Arguments",
      "rule": "If user input is used in OS command arguments, it can be manipulated to expand access or execute unintended commands. Ensure proper sanitization to prevent injection.",
      "why_is_this_important": "If user input is used in OS command arguments, it can be manipulated to expand access or execute unintended commands. Ensure proper sanitization to prevent injection.",
      "severity": "Low",
      "bad_example": "public class ExampleController : Controller\n{\n    public void Run(string args)\n    {\n        Process p             = new Process();\n        p.StartInfo.FileName  = \"/usr/bin/find\";\n        p.StartInfo.Arguments = \"/some/folder -ititle \" + args;\n        p.Start();\n    }\n}",
      "good_example": "public class ExampleController : Controller\n{\n    public void Run(string args)\n    {\n        Process p            = new Process();\n        p.StartInfo.FileName = \"/usr/bin/find\";\n        p.StartInfo.ArgumentList.Add(\"/some/folder\");\n        p.StartInfo.ArgumentList.Add(\"-ititle\");\n        p.StartInfo.ArgumentList.Add(args);\n        p.Start();\n    }\n}",
      "examples": [
        {
          "snippet": "public class ExampleController : Controller\n{\n    public void Run(string args)\n    {\n        Process p             = new Process();\n        p.StartInfo.FileName  = \"/usr/bin/find\";\n        p.StartInfo.Arguments = \"/some/folder -ititle \" + args;\n        p.Start();\n    }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public class ExampleController : Controller\n{\n    public void Run(string args)\n    {\n        Process p            = new Process();\n        p.StartInfo.FileName = \"/usr/bin/find\";\n        p.StartInfo.ArgumentList.Add(\"/some/folder\");\n        p.StartInfo.ArgumentList.Add(\"-ititle\");\n        p.StartInfo.ArgumentList.Add(args);\n        p.Start();\n    }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "f0c429c0-da21-4f46-822c-9da170e54f08",
      "title": "CSRF Protection Should Always Be Enabled",
      "rule": "Disabling CSRF protection allows attackers to trick users into performing unintended actions, such as modifying account details or making unauthorized transactions.",
      "why_is_this_important": "Disabling CSRF protection allows attackers to trick users into performing unintended actions, such as modifying account details or making unauthorized transactions.",
      "severity": "Critical",
      "bad_example": "public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options => options.Filters.Add(new IgnoreAntiforgeryTokenAttribute())); // Sensitive\n    // ...\n}",
      "good_example": "public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options => options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute()));\n    // or\n    services.AddControllersWithViews(options => options.Filters.Add(new ValidateAntiForgeryTokenAttribute()));\n    // ...\n}",
      "examples": [
        {
          "snippet": "public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options => options.Filters.Add(new IgnoreAntiforgeryTokenAttribute())); // Sensitive\n    // ...\n}",
          "isCorrect": false
        },
        {
          "snippet": "public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options => options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute()));\n    // or\n    services.AddControllersWithViews(options => options.Filters.Add(new ValidateAntiForgeryTokenAttribute()));\n    // ...\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "9c96e8e1-6db4-4726-bc94-60c0c7097e43",
      "title": "Use ProducesResponseTypeAttribute for API Actions",
      "rule": "Without ProducesResponseTypeAttribute, Swagger cannot infer the response type of an action returning IActionResult, making API documentation unclear and unreliable.",
      "why_is_this_important": "Without ProducesResponseTypeAttribute, Swagger cannot infer the response type of an action returning IActionResult, making API documentation unclear and unreliable.",
      "severity": "High",
      "bad_example": "[HttpGet(\"foo\")]\n// Noncompliant: Use the ProducesResponseType overload containing the return type for succesful responses.\n[ProducesResponseType(StatusCodes.Status200OK)]\npublic IActionResult MagicNumber() => Ok(42);",
      "good_example": "[HttpGet(\"foo\")]\n[ProducesResponseType<int>(StatusCodes.Status200OK)]\npublic IActionResult MagicNumber() => Ok(42);",
      "examples": [
        {
          "snippet": "[HttpGet(\"foo\")]\n// Noncompliant: Use the ProducesResponseType overload containing the return type for succesful responses.\n[ProducesResponseType(StatusCodes.Status200OK)]\npublic IActionResult MagicNumber() => Ok(42);",
          "isCorrect": false
        },
        {
          "snippet": "[HttpGet(\"foo\")]\n[ProducesResponseType<int>(StatusCodes.Status200OK)]\npublic IActionResult MagicNumber() => Ok(42);",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["api-conventions", "docs-adrs"],
      "scope": "file"
    },
    {
      "uuid": "dd873ee1-49b1-4bbf-a268-3f1aa44be20a",
      "title": "Prevent NoSQL Injection Attacks",
      "rule": "Unsanitized user input in NoSQL queries can allow attackers to manipulate database queries, leading to data leaks or unauthorized modifications.",
      "why_is_this_important": "Unsanitized user input in NoSQL queries can allow attackers to manipulate database queries, leading to data leaks or unauthorized modifications.",
      "severity": "Critical",
      "bad_example": "using MongoDB.Driver;\nusing MongoDB.Bson;\n\n[ApiController]\n[Route(\"Example\")]\npublic class ExampleController: ControllerBase\n{\n    private string connectionString;\n\n    [Route(\"Example\")]\n    public async Task<string> Example()\n    {\n        var client     = new MongoClient(connectionString);\n        var database   = client.GetDatabase(\"example\");\n        var collection = database.GetCollection<Message>(\"messages\");\n\n        var filterDefinition = Request.Query[\"filterDefinition\"];\n\n        await collection.FindAsync(filter)\n    }\n}",
      "good_example": "using MongoDB.Driver;\nusing MongoDB.Bson;\n\n[ApiController]\n[Route(\"Example\")]\npublic class ExampleController: ControllerBase\n{\n    private string connectionString;\n\n    [Route(\"Example\")]\n    public async Task<string> Example()\n    {\n        var client     = new MongoClient(connectionString);\n        var database   = client.GetDatabase(\"example\");\n        var collection = database.GetCollection<Message>(\"messages\");\n\n        var filterDefinition = Builders<BsonDocument>.Filter.Eq(\"Usertitle\", \"Example\");\n\n        await collection.FindAsync(filter)\n    }\n}",
      "examples": [
        {
          "snippet": "using MongoDB.Driver;\nusing MongoDB.Bson;\n\n[ApiController]\n[Route(\"Example\")]\npublic class ExampleController: ControllerBase\n{\n    private string connectionString;\n\n    [Route(\"Example\")]\n    public async Task<string> Example()\n    {\n        var client     = new MongoClient(connectionString);\n        var database   = client.GetDatabase(\"example\");\n        var collection = database.GetCollection<Message>(\"messages\");\n\n        var filterDefinition = Request.Query[\"filterDefinition\"];\n\n        await collection.FindAsync(filter)\n    }\n}",
          "isCorrect": false
        },
        {
          "snippet": "using MongoDB.Driver;\nusing MongoDB.Bson;\n\n[ApiController]\n[Route(\"Example\")]\npublic class ExampleController: ControllerBase\n{\n    private string connectionString;\n\n    [Route(\"Example\")]\n    public async Task<string> Example()\n    {\n        var client     = new MongoClient(connectionString);\n        var database   = client.GetDatabase(\"example\");\n        var collection = database.GetCollection<Message>(\"messages\");\n\n        var filterDefinition = Builders<BsonDocument>.Filter.Eq(\"Usertitle\", \"Example\");\n\n        await collection.FindAsync(filter)\n    }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "d85801c4-f4ef-4be6-951f-2e3bb0f6af2c",
      "title": "Avoid Returning Null in Non-Async Task Methods",
      "rule": "Returning null from a Task or Task<T> method causes a NullReferenceException if awaited. Use Task.CompletedTask or Task.FromResult<T>(null) instead.",
      "why_is_this_important": "Returning null from a Task or Task<T> method causes a NullReferenceException if awaited. Use Task.CompletedTask or Task.FromResult<T>(null) instead.",
      "severity": "Critical",
      "bad_example": "public Task DoFooAsync()\n{\n    return null;               // Noncompliant: Causes a NullReferenceException if awaited.\n}",
      "good_example": "public Task DoFooAsync()\n{\n    return Task.CompletedTask; // Compliant: Method can be awaited.\n}",
      "examples": [
        {
          "snippet": "public Task DoFooAsync()\n{\n    return null;               // Noncompliant: Causes a NullReferenceException if awaited.\n}",
          "isCorrect": false
        },
        {
          "snippet": "public Task DoFooAsync()\n{\n    return Task.CompletedTask; // Compliant: Method can be awaited.\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["error-handling", "readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "6e05a980-0a37-4774-b83e-04527b0a5867",
      "title": "Specify Timeout for Regular Expressions",
      "rule": "Without a timeout, regex processing on untrusted input can be exploited for Denial-of-Service (DoS) attacks. Always define a timeout when using regex.",
      "why_is_this_important": "Without a timeout, regex processing on untrusted input can be exploited for Denial-of-Service (DoS) attacks. Always define a timeout when using regex.",
      "severity": "High",
      "bad_example": "public void RegexPattern(string input)\n{\n    var emailPattern = new Regex(\".+@.+\", RegexOptions.None);\n    var isNumber = Regex.IsMatch(input, \"[0-9]+\");\n    var isLetterA = Regex.IsMatch(input, \"(a+)+\");\n}",
      "good_example": "public void RegexPattern(string input)\n{\n    var emailPattern = new Regex(\".+@.+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isNumber = Regex.IsMatch(input, \"[0-9]+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isLetterA = Regex.IsMatch(input, \"(a+)+\", RegexOptions.NonBacktracking); // .Net 7 and above\n    AppDomain.CurrentDomain.SetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\", TimeSpan.FromMilliseconds(100)); // process-wide setting\n}",
      "examples": [
        {
          "snippet": "public void RegexPattern(string input)\n{\n    var emailPattern = new Regex(\".+@.+\", RegexOptions.None);\n    var isNumber = Regex.IsMatch(input, \"[0-9]+\");\n    var isLetterA = Regex.IsMatch(input, \"(a+)+\");\n}",
          "isCorrect": false
        },
        {
          "snippet": "public void RegexPattern(string input)\n{\n    var emailPattern = new Regex(\".+@.+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isNumber = Regex.IsMatch(input, \"[0-9]+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isLetterA = Regex.IsMatch(input, \"(a+)+\", RegexOptions.NonBacktracking); // .Net 7 and above\n    AppDomain.CurrentDomain.SetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\", TimeSpan.FromMilliseconds(100)); // process-wide setting\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "b4cc475e-7cf8-4db2-a65a-cd7d17bbe1e2",
      "title": "Do Not Start Route Templates with '/' in ASP.NET",
      "rule": "Starting a route template with '/' in ASP.NET makes it absolute, ignoring controller-level routes and potentially breaking expected routing behavior.",
      "why_is_this_important": "Starting a route template with '/' in ASP.NET makes it absolute, ignoring controller-level routes and potentially breaking expected routing behavior.",
      "severity": "High",
      "bad_example": "[Route(\"[controller]\")]  // This route is ignored\npublic class ReviewsController : Controller // Noncompliant\n{\n    // Route is /reviews\n    [HttpGet(\"/reviews\")]\n    public ActionResult Index() { /* ... */ }\n\n    // Route is /reviews/{reviewId}\n    [Route(\"/reviews/{reviewId}\")]\n    public ActionResult Show(int reviewId)() { /* ... */ }\n}",
      "good_example": "[Route(\"/\")] // Turns on attribute routing\npublic class ReviewsController : Controller\n{\n    // Route is /reviews\n    [HttpGet(\"reviews\")]\n    public ActionResult Index() { /* ... */ }\n\n    // Route is /reviews/{reviewId}\n    [Route(\"reviews/{reviewId}\")]\n    public ActionResult Show(int reviewId)() { /* ... */ }\n}",
      "examples": [
        {
          "snippet": "[Route(\"[controller]\")]  // This route is ignored\npublic class ReviewsController : Controller // Noncompliant\n{\n    // Route is /reviews\n    [HttpGet(\"/reviews\")]\n    public ActionResult Index() { /* ... */ }\n\n    // Route is /reviews/{reviewId}\n    [Route(\"/reviews/{reviewId}\")]\n    public ActionResult Show(int reviewId)() { /* ... */ }\n}",
          "isCorrect": false
        },
        {
          "snippet": "[Route(\"/\")] // Turns on attribute routing\npublic class ReviewsController : Controller\n{\n    // Route is /reviews\n    [HttpGet(\"reviews\")]\n    public ActionResult Index() { /* ... */ }\n\n    // Route is /reviews/{reviewId}\n    [Route(\"reviews/{reviewId}\")]\n    public ActionResult Show(int reviewId)() { /* ... */ }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["api-conventions", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "bae4c695-9b8b-4354-b33d-abd37121058e",
      "title": "Utility Classes Should Not Have Public Constructors",
      "rule": "Utility classes are not meant to be instantiated. Mark them as static or provide a private constructor to prevent unintended instantiation.",
      "why_is_this_important": "Utility classes are not meant to be instantiated. Mark them as static or provide a private constructor to prevent unintended instantiation.",
      "severity": "Medium",
      "bad_example": "public class StringUtils // Noncompliant: implicit public constructor\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}",
      "good_example": "public static class StringUtils // Compliant: the class is static\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n\n\npublic class StringUtils // Compliant: the constructor is not public\n{\n  private StringUtils()\n  {\n  }\n\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}",
      "examples": [
        {
          "snippet": "public class StringUtils // Noncompliant: implicit public constructor\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "public static class StringUtils // Compliant: the class is static\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n\n\npublic class StringUtils // Compliant: the constructor is not public\n{\n  private StringUtils()\n  {\n  }\n\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "3eb90b4d-1c7d-44bd-acc4-e3105798a894",
      "title": "Use Awaitable Methods in Async Code",
      "rule": "Calling synchronous methods inside async code can block execution and reduce performance. Use awaitable methods to ensure proper async execution.",
      "why_is_this_important": "Calling synchronous methods inside async code can block execution and reduce performance. Use awaitable methods to ensure proper async execution.",
      "severity": "High",
      "bad_example": "public async Task Examples(Stream stream, DbSet<Person> dbSet)\n{\n    stream.Read(array, 0, 1024);            // Noncompliant\n    File.ReadAllLines(\"path\");              // Noncompliant\n    dbSet.ToList();                         // Noncompliant in Entity Framework Core queries\n    dbSet.FirstOrDefault(x => x.Age >= 18); // Noncompliant in Entity Framework Core queries\n}",
      "good_example": "public async Task Examples(Stream stream, DbSet<Person> dbSet)\n{\n    await stream.ReadAsync(array, 0, 1024);\n    await File.ReadAllLinesAsync(\"path\");\n    await dbSet.ToListAsync();\n    await dbSet.FirstOrDefaultAsync(x => x.Age >= 18);\n}",
      "examples": [
        {
          "snippet": "public async Task Examples(Stream stream, DbSet<Person> dbSet)\n{\n    stream.Read(array, 0, 1024);            // Noncompliant\n    File.ReadAllLines(\"path\");              // Noncompliant\n    dbSet.ToList();                         // Noncompliant in Entity Framework Core queries\n    dbSet.FirstOrDefault(x => x.Age >= 18); // Noncompliant in Entity Framework Core queries\n}",
          "isCorrect": false
        },
        {
          "snippet": "public async Task Examples(Stream stream, DbSet<Person> dbSet)\n{\n    await stream.ReadAsync(array, 0, 1024);\n    await File.ReadAllLinesAsync(\"path\");\n    await dbSet.ToListAsync();\n    await dbSet.FirstOrDefaultAsync(x => x.Age >= 18);\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["performance-efficiency", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "61789334-c695-4e31-933a-0226c5c4b6cf",
      "title": "Ensure Getters and Setters Access the Correct Fields",
      "rule": "Copy-pasting code can lead to errors where getters or setters access the wrong fields. Always verify that properties interact with the expected fields.",
      "why_is_this_important": "Copy-pasting code can lead to errors where getters or setters access the wrong fields. Always verify that properties interact with the expected fields.",
      "severity": "High",
      "bad_example": "class A\n{\n    private int x;\n    private int y;\n\n    public int X\n    {\n        get { return x; }\n        set { x = value; }\n    }\n\n    public int Y\n    {\n        get { return x; }  // Noncompliant: field 'y' is not used in the return value\n        set { x = value; } // Noncompliant: field 'y' is not updated\n    }\n}",
      "good_example": "class A\n{\n    private int x;\n    private int y;\n\n    public int X\n    {\n        get { return x; }\n        set { x = value; }\n    }\n\n    public int Y\n    {\n        get { return y; }\n        set { y = value; }\n    }\n}",
      "examples": [
        {
          "snippet": "class A\n{\n    private int x;\n    private int y;\n\n    public int X\n    {\n        get { return x; }\n        set { x = value; }\n    }\n\n    public int Y\n    {\n        get { return x; }  // Noncompliant: field 'y' is not used in the return value\n        set { x = value; } // Noncompliant: field 'y' is not updated\n    }\n}",
          "isCorrect": false
        },
        {
          "snippet": "class A\n{\n    private int x;\n    private int y;\n\n    public int X\n    {\n        get { return x; }\n        set { x = value; }\n    }\n\n    public int Y\n    {\n        get { return y; }\n        set { y = value; }\n    }\n}",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "buckets": ["duplication-complexity", "maintainability"],
      "scope": "file"
    },
    {
      "uuid": "9c7da2a9-bf5c-4db1-9390-e89c76910ca6",
      "title": "Ensure `case` Statements Have an `else` Clause",
      "rule": "Check if every `case` statement includes an `else` clause. If an `else` clause is missing, ensure that a comment explicitly states why it is unnecessary.",
      "why_is_this_important": "A `case` statement without an `else` clause may not handle all possible cases, leading to unexpected behavior. Always include an `else` clause or explicitly document why it is unnecessary.",
      "severity": "Critical",
      "bad_example": "case param\n  when 1\n    do_something()\n  when 2\n    do_something_else()\nend",
      "good_example": "case param\n  when 1\n    do_something()\n  when 2\n    do_something_else()\n  else\n    handle_error('error_message')\nend",
      "examples": [
        {
          "snippet": "case param\n  when 1\n    do_something()\n  when 2\n    do_something_else()\nend",
          "isCorrect": false
        },
        {
          "snippet": "case param\n  when 1\n    do_something()\n  when 2\n    do_something_else()\n  else\n    handle_error('error_message')\nend",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["error-handling", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "27926977-7fd0-44f9-abbe-a9bcb5a1d939",
      "title": "Ensure `if...elsif` Constructs End with an `else` Clause",
      "rule": "Verify that all `if...elsif` constructs include a final `else` clause. If `else` is missing, ensure there is a comment explaining why all cases are covered.",
      "why_is_this_important": "When an `if` statement has multiple `elsif` branches, it should always end with an `else` clause. This ensures all possible cases are handled, preventing unintended behavior.",
      "severity": "Critical",
      "bad_example": "if x == 0\n  doSomething\nelsif x == 1\n  doSomethingElse\nend",
      "good_example": "if x == 0\n  doSomething\nelsif x == 1\n  doSomethingElse\nelse\n  raise 'An error has occured'\nend",
      "examples": [
        {
          "snippet": "if x == 0\n  doSomething\nelsif x == 1\n  doSomethingElse\nend",
          "isCorrect": false
        },
        {
          "snippet": "if x == 0\n  doSomething\nelsif x == 1\n  doSomethingElse\nelse\n  raise 'An error has occured'\nend",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["error-handling", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "d4c6bc9b-997e-4512-8ede-ed642cb95eb5",
      "title": "Place Statements on Separate Lines",
      "rule": "Ensure that multiple statements are not written on the same line. Each statement should be placed on a new line to improve readability.",
      "why_is_this_important": "Writing multiple statements on a single line reduces readability and makes debugging harder. Separate statements should be placed on different lines for clarity.",
      "severity": "Medium",
      "bad_example": "if someCondition; puts \"hello\"; end # Noncompliant\n",
      "good_example": "if someCondition\n  puts \"hello\"\nend",
      "examples": [
        {
          "snippet": "if someCondition; puts \"hello\"; end # Noncompliant\n",
          "isCorrect": false
        },
        {
          "snippet": "if someCondition\n  puts \"hello\"\nend",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "cf9c167a-69ae-46cb-9ac1-20f0536c8788",
      "title": "Avoid Empty Methods",
      "rule": "Detect methods that have an empty body. If a method is empty, ensure that a comment is present explaining why it remains unimplemented.",
      "why_is_this_important": "Empty methods can be misleading, making it unclear whether they are unfinished, redundant, or intentionally blank. If an empty method is necessary, include a comment explaining why.",
      "severity": "Critical",
      "bad_example": "def shouldNotBeEmpty()  # Noncompliant - method is empty\nend\n\ndef notImplemented()  # Noncompliant - method is empty\nend\n\ndef emptyOnPurpose()  # Noncompliant - method is empty\nend",
      "good_example": "def shouldNotBeEmpty()\n  doSomething()\nend\n\ndef notImplemented()\n  raise NotImplementedError, 'notImplemented() cannot be performed because ...'\nend\n\ndef emptyOnPurpose()\n  # comment explaining why the method is empty\nend",
      "examples": [
        {
          "snippet": "def shouldNotBeEmpty()  # Noncompliant - method is empty\nend\n\ndef notImplemented()  # Noncompliant - method is empty\nend\n\ndef emptyOnPurpose()  # Noncompliant - method is empty\nend",
          "isCorrect": false
        },
        {
          "snippet": "def shouldNotBeEmpty()\n  doSomething()\nend\n\ndef notImplemented()\n  raise NotImplementedError, 'notImplemented() cannot be performed because ...'\nend\n\ndef emptyOnPurpose()\n  # comment explaining why the method is empty\nend",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["maintainability", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "0c72dff5-a39a-4dd1-981c-5aff6b518cf7",
      "title": "Remove Unused Function Parameters",
      "rule": "Identify function parameters that are declared but never used within the function body. Remove them to improve clarity and maintainability.",
      "why_is_this_important": "Declaring parameters that are never used in a function leads to confusion and unnecessary complexity. Remove unused parameters to improve code clarity and maintainability.",
      "severity": "High",
      "bad_example": "",
      "good_example": "",
      "examples": [],
      "language": "ruby",
      "buckets": ["maintainability", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "f36175e8-93e3-4918-8f6a-bccd330f220a",
      "title": "Do Not Leave Empty Code Blocks",
      "rule": "Check for empty code blocks (such as `if` or `loop` structures) that do not contain any statements. If an empty block is present, ensure it includes a comment explaining its purpose.",
      "why_is_this_important": "Empty code blocks make it unclear whether they are placeholders for future logic or mistakenly left blank. Always remove them or add a comment explaining their purpose.",
      "severity": "High",
      "bad_example": "",
      "good_example": "def compute(a, b)\n  sum = a + b\n  if  sum > 0 # Noncompliant: is the block empty on purpose, or is code missing?\n  end\n  puts \"Result: #{sum}\"\nend",
      "examples": [
        {
          "snippet": "def compute(a, b)\n  sum = a + b\n  if  sum > 0 # Noncompliant: is the block empty on purpose, or is code missing?\n  end\n  puts \"Result: #{sum}\"\nend",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["maintainability", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "a0a4d9fd-5293-498f-abaf-1da1be711068",
      "title": "Avoid Using Semicolons to Terminate Statements",
      "rule": "Detect unnecessary semicolons at the end of statements. Ruby does not require semicolons, so they should be removed unless multiple statements exist on the same line.",
      "why_is_this_important": "Ruby does not require semicolons at the end of statements. Using them unnecessarily reduces readability and goes against standard Ruby conventions.",
      "severity": "Low",
      "bad_example": "puts 'Hello, world!'; # unnecessary semicolo\n",
      "good_example": "puts 'Hello, world!'\n",
      "examples": [
        {
          "snippet": "puts 'Hello, world!'; # unnecessary semicolo\n",
          "isCorrect": false
        },
        {
          "snippet": "puts 'Hello, world!'\n",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "5314121d-63de-4aad-9968-21af35032753",
      "title": "Use Spaces Around Operators",
      "rule": "Ensure that arithmetic and logical operators have spaces around them for better readability (e.g., `x + y` instead of `x+y`).",
      "why_is_this_important": "Omitting spaces around operators (`+`, `-`, `*`, etc.) reduces code readability. Proper spacing makes expressions easier to read and understand.",
      "severity": "Low",
      "bad_example": "sum=1+2",
      "good_example": "sum = 1 + 2",
      "examples": [
        {
          "snippet": "sum=1+2",
          "isCorrect": false
        },
        {
          "snippet": "sum = 1 + 2",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "4cd295ac-e0f6-4d05-8080-003129e800f5",
      "title": "Limit Line Length to 120 Characters",
      "rule": "Detect lines exceeding 120 characters and suggest breaking them into multiple lines for better readability.",
      "why_is_this_important": "Keeping lines under 120 characters improves readability, especially on smaller screens or in side-by-side code comparisons.",
      "severity": "Medium",
      "bad_example": "def example\n  long_line = \"This is an example of a line that is way too long and exceeds the recommended limit of 120 characters.\"\nend",
      "good_example": "def example\n  long_line = \"This is an example of a line that is way too long and \" \\\n              \"exceeds the recommended limit of 120 characters.\"\nend\n",
      "examples": [
        {
          "snippet": "def example\n  long_line = \"This is an example of a line that is way too long and exceeds the recommended limit of 120 characters.\"\nend",
          "isCorrect": false
        },
        {
          "snippet": "def example\n  long_line = \"This is an example of a line that is way too long and \" \\\n              \"exceeds the recommended limit of 120 characters.\"\nend\n",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "fc914787-6b44-42f7-9197-13d58fe1d7be",
      "title": "Follow `snake_case` for Method and Variable Names",
      "rule": "Verify that method and variable titles follow `snake_case` conventions, avoiding camelCase or PascalCase.",
      "why_is_this_important": "Ruby conventionally uses `snake_case` for method and variable titles. This improves consistency and makes code easier to read and maintain.",
      "severity": "Medium",
      "bad_example": "def calculateTotal\n  finalValue = 0\nend",
      "good_example": "def calculate_total\n  final_value = 0\nend",
      "examples": [
        {
          "snippet": "def calculateTotal\n  finalValue = 0\nend",
          "isCorrect": false
        },
        {
          "snippet": "def calculate_total\n  final_value = 0\nend",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "00afb6fa-e1e6-4fce-be10-c10fcce05e72",
      "title": "Use `CamelCase` for Class and Module Names",
      "rule": "Check if class and module titles use `CamelCase`. If not, suggest renaming them for consistency.",
      "why_is_this_important": "Classes and modules in Ruby should follow `CamelCase` naming conventions, making them easily distinguishable and improving code organization.",
      "severity": "Medium",
      "bad_example": "class myclass\nend",
      "good_example": "class MyClass\nend",
      "examples": [
        {
          "snippet": "class myclass\nend",
          "isCorrect": false
        },
        {
          "snippet": "class MyClass\nend",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "6060439e-3c52-4e21-9a21-7fe5b7ea9120",
      "title": "Avoid Unnecessary Defensive Programming",
      "rule": "Identify overly defensive code that checks for unrealistic conditions, such as excessive `nil?` checks or redundant type verifications.",
      "why_is_this_important": "Overly defensive programming that handles unrealistic scenarios increases code complexity. Focus on handling real-world edge cases instead.",
      "severity": "Medium",
      "bad_example": "def process(input)\n  if input.nil? || !input.is_a?(String) || input.empty?\n    return \"Invalid input\"\n  end\n\n  input.strip.upcase\nend\n",
      "good_example": "def process(input)\n  return unless input.is_a?(String) && !input.empty?\n\n  input.strip.upcase\nend\n",
      "examples": [
        {
          "snippet": "def process(input)\n  if input.nil? || !input.is_a?(String) || input.empty?\n    return \"Invalid input\"\n  end\n\n  input.strip.upcase\nend\n",
          "isCorrect": false
        },
        {
          "snippet": "def process(input)\n  return unless input.is_a?(String) && !input.empty?\n\n  input.strip.upcase\nend\n",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["duplication-complexity", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "ca03ae44-7b0f-4a24-9503-531871ff0545",
      "title": "Prefer Guard Clauses Over Nested Conditionals",
      "rule": "Detect deeply nested conditionals and suggest using guard clauses (`return unless condition`) instead to improve readability.",
      "why_is_this_important": "Deeply nested conditionals make code hard to follow. Using guard clauses (`return` early) improves clarity and reduces indentation depth.",
      "severity": "High",
      "bad_example": "def process(input)\n  if input.is_a?(String)\n    if !input.empty?\n      return input.strip.upcase\n    end\n  end\n  nil\nend",
      "good_example": "def process(input)\n  return unless input.is_a?(String)\n  return if input.empty?\n\n  input.strip.upcase\nend\n",
      "examples": [
        {
          "snippet": "def process(input)\n  if input.is_a?(String)\n    if !input.empty?\n      return input.strip.upcase\n    end\n  end\n  nil\nend",
          "isCorrect": false
        },
        {
          "snippet": "def process(input)\n  return unless input.is_a?(String)\n  return if input.empty?\n\n  input.strip.upcase\nend\n",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["duplication-complexity", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "3f1b589f-0d5c-42cf-88f5-8694a4222829",
      "title": "Avoid Using Global Variables",
      "rule": "Check for global variable usage (e.g., variables prefixed with `$`). Suggest using instance variables, constants, or dependency injection instead.",
      "why_is_this_important": "Global variables create hidden dependencies, making code harder to debug, maintain, and test. Use instance variables or constants instead.",
      "severity": "High",
      "bad_example": "$counter = 0\n\ndef increment\n  $counter += 1\nend",
      "good_example": "class Counter\n  def initialize\n    @counter = 0\n  end\n\n  def increment\n    @counter += 1\n  end\nend\n",
      "examples": [
        {
          "snippet": "$counter = 0\n\ndef increment\n  $counter += 1\nend",
          "isCorrect": false
        },
        {
          "snippet": "class Counter\n  def initialize\n    @counter = 0\n  end\n\n  def increment\n    @counter += 1\n  end\nend\n",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["maintainability", "module-architecture"],
      "scope": "file"
    },
    {
      "uuid": "4309f625-ebaf-4024-8cad-f2ae4ae20e59",
      "title": "Use Descriptive Exception Variable Names",
      "rule": "Ensure that exception variables in `rescue` blocks use meaningful titles instead of generic ones like `e`.",
      "why_is_this_important": "Naming exception variables generically (`e`) makes debugging harder. Use meaningful titles that describe the type or context of the error.",
      "severity": "Medium",
      "bad_example": "begin\n  risky_operation\nrescue => e\n  puts e.message\nend",
      "good_example": "",
      "examples": [
        {
          "snippet": "begin\n  risky_operation\nrescue => e\n  puts e.message\nend",
          "isCorrect": false
        }
      ],
      "language": "ruby",
      "buckets": ["error-handling", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "d2a078cd-0ee3-4a0b-bf51-16dcf259efe8",
      "title": "Provide Meaningful Default Values for Hash Keys",
      "rule": "Check for hash key lookups without default values. If a missing key is accessed, suggest using `fetch` with a default value.",
      "why_is_this_important": "Using meaningful default values prevents errors caused by uninitialized keys, improving code robustness and reducing unexpected `nil` values.",
      "severity": "Medium",
      "bad_example": "options = {}\nputs options[:timeout] || 5",
      "good_example": "options = { timeout: 5 }\nputs options.fetch(:timeout)",
      "examples": [
        {
          "snippet": "options = {}\nputs options[:timeout] || 5",
          "isCorrect": false
        },
        {
          "snippet": "options = { timeout: 5 }\nputs options.fetch(:timeout)",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["error-handling", "resilience-retries-idempotency"],
      "scope": "file"
    },
    {
      "uuid": "84d2d06e-cff0-43d1-9a6c-3c78bfdcb581",
      "title": "Avoid Rescuing the `Exception` Class",
      "rule": "Identify `rescue Exception` statements and suggest replacing them with `rescue StandardError` to avoid catching critical system exceptions.",
      "why_is_this_important": "Rescuing `Exception` captures critical system-level errors like `NoMemoryError`, preventing proper application termination and potentially masking serious issues.",
      "severity": "Medium",
      "bad_example": "begin\n  risky_operation\nrescue Exception\n  puts \"An error occurred\"\nend",
      "good_example": "begin\n  risky_operation\nrescue StandardError => error\n  puts \"An error occurred: #{error.message}\"\nend",
      "examples": [
        {
          "snippet": "begin\n  risky_operation\nrescue Exception\n  puts \"An error occurred\"\nend",
          "isCorrect": false
        },
        {
          "snippet": "begin\n  risky_operation\nrescue StandardError => error\n  puts \"An error occurred: #{error.message}\"\nend",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "buckets": ["error-handling", "security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "e4fb820f-287e-4cba-b3ea-f7a699ba2834",
      "title": "Use `const` for Literal Constructor Parameters in `@immutable` Classes",
      "rule": "Ensure that all literal values passed to constructors of `@immutable` classes are marked as `const` to prevent unnecessary object creation.",
      "why_is_this_important": "`@immutable` classes should have only `final` fields, and constructor parameters that are literals should be `const` to prevent accidental modifications.",
      "severity": "High",
      "bad_example": "import 'package:meta/meta.dart';\n\n@immutable\nclass MultiDimensionalPoint {\n  final List<int> coordinates;\n  MultiDimensionalPoint(this.coordinates);\n}\n\nvoid main() {\n  final p1 = MultiDimensionalPoint([1, 2, 3]); // Non compliant\n}",
      "good_example": "import 'package:meta/meta.dart';\n\n@immutable\nclass MultiDimensionalPoint {\n  final List<int> coordinates;\n  MultiDimensionalPoint(this.coordinates);\n}\n\nvoid main() {\n  final p1 = MultiDimensionalPoint(const [1, 2, 3]);\n}",
      "examples": [
        {
          "snippet": "import 'package:meta/meta.dart';\n\n@immutable\nclass MultiDimensionalPoint {\n  final List<int> coordinates;\n  MultiDimensionalPoint(this.coordinates);\n}\n\nvoid main() {\n  final p1 = MultiDimensionalPoint([1, 2, 3]); // Non compliant\n}",
          "isCorrect": false
        },
        {
          "snippet": "import 'package:meta/meta.dart';\n\n@immutable\nclass MultiDimensionalPoint {\n  final List<int> coordinates;\n  MultiDimensionalPoint(this.coordinates);\n}\n\nvoid main() {\n  final p1 = MultiDimensionalPoint(const [1, 2, 3]);\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["performance-efficiency", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "afb72af5-dda3-44c2-a872-8efea9e913de",
      "title": "`@immutable` Classes Should Only Have `const` Constructors",
      "rule": "Define constructors for `@immutable` classes as `const` to ensure that instances are created efficiently and cannot be modified.",
      "why_is_this_important": "An `@immutable` class should only have `const` constructors to enforce immutability and improve performance.",
      "severity": "High",
      "bad_example": "import 'package:meta/meta.dart';\n\n@immutable\nclass Point {\n  final int x;\n  final int y;\n  Point(this.x, this.y); // Non compliant\n}",
      "good_example": "import 'package:meta/meta.dart';\n\n@immutable\nclass Point {\n  final int x;\n  final int y;\n  const Point(this.x, this.y);\n}",
      "examples": [
        {
          "snippet": "import 'package:meta/meta.dart';\n\n@immutable\nclass Point {\n  final int x;\n  final int y;\n  Point(this.x, this.y); // Non compliant\n}",
          "isCorrect": false
        },
        {
          "snippet": "import 'package:meta/meta.dart';\n\n@immutable\nclass Point {\n  final int x;\n  final int y;\n  const Point(this.x, this.y);\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["performance-efficiency", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "936f5320-85d2-40e9-8eb9-90da58bbe26e",
      "title": "Avoid Unnecessary `toList()` with Spread Operator",
      "rule": "Remove unnecessary calls to `.toList()` when using the spread operator (`...`) as it is already designed to work with iterable collections.",
      "why_is_this_important": "The spread operators (`...` and `...?`) can flatten collections directly, making `toList()` redundant and less efficient.",
      "severity": "High",
      "bad_example": "final list = [\n    1,\n    2,\n    ...anIterable.toList(), // Noncompliant\n    3,\n    4\n];",
      "good_example": "final list = [\n    1,\n    2,\n    ...anIterable,\n    3,\n    4\n];",
      "examples": [
        {
          "snippet": "final list = [\n    1,\n    2,\n    ...anIterable.toList(), // Noncompliant\n    3,\n    4\n];",
          "isCorrect": false
        },
        {
          "snippet": "final list = [\n    1,\n    2,\n    ...anIterable,\n    3,\n    4\n];",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": [
        "duplication-complexity",
        "performance-efficiency",
        "stack-flutter"
      ],
      "scope": "file"
    },
    {
      "uuid": "ee3bcaee-3fab-4ce3-91e4-7131031eace5",
      "title": "Prefer `for` Elements Over `Map.fromIterable`",
      "rule": "Use `for` elements inside map literals instead of `Map.fromIterable` to improve readability and allow better compiler optimizations.",
      "why_is_this_important": "Using `for` elements instead of `Map.fromIterable` improves readability and allows for compiler optimizations, making the code more performant.",
      "severity": "High",
      "bad_example": "Map<String, int>.fromIterable(\n  [1, 2, 3],\n  key: (v) => 'The value is $v',\n  value: (v) => v,\n);",
      "good_example": "{\n    for (final v in [1, 2, 3])\n        'The value is $v': v\n}",
      "examples": [
        {
          "snippet": "Map<String, int>.fromIterable(\n  [1, 2, 3],\n  key: (v) => 'The value is $v',\n  value: (v) => v,\n);",
          "isCorrect": false
        },
        {
          "snippet": "{\n    for (final v in [1, 2, 3])\n        'The value is $v': v\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": [
        "performance-efficiency",
        "readability-refactor",
        "stack-flutter"
      ],
      "scope": "file"
    },
    {
      "uuid": "ef556cf6-7fbe-43a8-bbcb-3030d1cf273e",
      "title": "Use `const` Instead of `static final` Where Possible",
      "rule": "Replace `static final` with `const` where applicable to enable compile-time evaluation and optimize performance.",
      "why_is_this_important": "`const` values are computed at compile-time, improving performance compared to `final`, which is computed at runtime.",
      "severity": "Low",
      "bad_example": "final i = 1000; // Noncompliant\nfinal ints = const [1, 2, 3]; // Noncompliant\n\nclass MyClass {\n  static final title = \"NAME\"; // Noncompliant\n}",
      "good_example": "const i = 1000;\nconst ints = [1, 2, 3]; // const after assignment can be omitted\n\nclass MyClass {\n  static const title = \"NAME\";\n}",
      "examples": [
        {
          "snippet": "final i = 1000; // Noncompliant\nfinal ints = const [1, 2, 3]; // Noncompliant\n\nclass MyClass {\n  static final title = \"NAME\"; // Noncompliant\n}",
          "isCorrect": false
        },
        {
          "snippet": "const i = 1000;\nconst ints = [1, 2, 3]; // const after assignment can be omitted\n\nclass MyClass {\n  static const title = \"NAME\";\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["performance-efficiency", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "b93c6f88-f1d6-48eb-bf39-e77016fdd325",
      "title": "Avoid Duplicating String Literals",
      "rule": "Store repeated string literals in constants or variables to improve maintainability and reduce redundancy.",
      "why_is_this_important": "Duplicated string literals make refactoring harder and increase the risk of inconsistencies in the codebase.",
      "severity": "Critical",
      "bad_example": "class A {\n  void run() {\n    prepare('string literal');    // Noncompliant - \"string literal\" is duplicated 3 times\n    execute('string literal');\n    release('string literal');\n  }\n}",
      "good_example": "class A {\n  static const _const = 'string literal';\n\n  void run() {\n    prepare(_const);    // Compliant\n    execute(_const);\n    release(_const);\n  }\n}",
      "examples": [
        {
          "snippet": "class A {\n  void run() {\n    prepare('string literal');    // Noncompliant - \"string literal\" is duplicated 3 times\n    execute('string literal');\n    release('string literal');\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "class A {\n  static const _const = 'string literal';\n\n  void run() {\n    prepare(_const);    // Compliant\n    execute(_const);\n    release(_const);\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["duplication-complexity", "maintainability"],
      "scope": "file"
    },
    {
      "uuid": "beeca29b-fd90-4bee-b164-6c31d545cc02",
      "title": "Utility Classes Should Not Have Public Constructors",
      "rule": "Make utility classes non-instantiable by providing a private constructor or marking them as `abstract`.",
      "why_is_this_important": "Utility classes contain only static members and should not be instantiated. Mark them as `abstract` or provide a private constructor.",
      "severity": "High",
      "bad_example": "class StringUtils { // Noncompliant\n\n  static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}",
      "good_example": "class StringUtils { // Compliant\n\n  StringUtils._() {\n    throw Exception('Utility class');\n  }\n\n  static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}",
      "examples": [
        {
          "snippet": "class StringUtils { // Noncompliant\n\n  static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}",
          "isCorrect": false
        },
        {
          "snippet": "class StringUtils { // Compliant\n\n  StringUtils._() {\n    throw Exception('Utility class');\n  }\n\n  static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["maintainability", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "748bae62-2d80-40db-96df-18c38bd0e25a",
      "title": "Avoid Using Constant Patterns with Type Literals",
      "rule": "Do not use constant patterns with type literals as it can lead to unexpected behavior. Prefer direct type checking instead.",
      "why_is_this_important": "Using constant patterns with type literals can lead to incorrect assumptions and unintended behavior.",
      "severity": "High",
      "bad_example": "bool isANumber(Object? o) {\n  if (o case num) {\n    return true;\n  }\n  return false;\n}",
      "good_example": "bool isANumber(Object? o) {\n  if (o case num _) {\n    return true;\n  }\n  return false;\n}",
      "examples": [
        {
          "snippet": "bool isANumber(Object? o) {\n  if (o case num) {\n    return true;\n  }\n  return false;\n}",
          "isCorrect": false
        },
        {
          "snippet": "bool isANumber(Object? o) {\n  if (o case num _) {\n    return true;\n  }\n  return false;\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["error-handling", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "b13c96e3-2a22-4bbd-9970-a64a379fc37f",
      "title": "Always Use Curly Braces in Control Structures",
      "rule": "Use curly braces `{}` around all control structures (`if`, `for`, `while`, `do`-`while`) to improve readability and prevent logic errors.",
      "why_is_this_important": "Omitting curly braces in control structures can lead to errors when modifying the code. Always use `{}` for clarity.",
      "severity": "High",
      "bad_example": "if (condition)  // Noncompliant\n  executeSomething();\n  checkSomething();",
      "good_example": "if (condition) {\n  executeSomething();\n  checkSomething();\n}",
      "examples": [
        {
          "snippet": "if (condition)  // Noncompliant\n  executeSomething();\n  checkSomething();",
          "isCorrect": false
        },
        {
          "snippet": "if (condition) {\n  executeSomething();\n  checkSomething();\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["readability-refactor", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "6d596229-9e3c-4941-bba7-4225468049a7",
      "title": "Do Not Ignore Exceptions",
      "rule": "Always handle or log caught exceptions instead of silently ignoring them to improve debugging and maintain application stability.",
      "why_is_this_important": "Ignoring exceptions can hide potential bugs. Handle them properly or log them for debugging purposes.",
      "severity": "Medium",
      "bad_example": "void save() {\n  try {\n    saveDocument();\n  } catch (exception) {\n  }\n}",
      "good_example": "void save() {\n  try {\n    saveDocument();\n  } catch (exception) {\n    log(exception);\n  }\n}",
      "examples": [
        {
          "snippet": "void save() {\n  try {\n    saveDocument();\n  } catch (exception) {\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "void save() {\n  try {\n    saveDocument();\n  } catch (exception) {\n    log(exception);\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["error-handling", "observability-logging"],
      "scope": "file"
    },
    {
      "uuid": "d01e82c2-b913-472b-8e37-3853e3ee4028",
      "title": "Avoid `return`, `break`, or `continue` in `finally` Blocks",
      "rule": "Do not use `return`, `break`, or `continue` inside `finally` blocks as they can suppress exceptions and lead to unintended behavior.",
      "why_is_this_important": "Using control flow statements inside `finally` blocks suppresses exceptions and can lead to unexpected behavior.",
      "severity": "High",
      "bad_example": "class ReturnInFinally {\n  int nonCompliantMethod(int n) {\n    for (int i = 0; i < n; ++i) {\n      try {\n        functionThrowingException(i);\n      } catch (e) {\n        print(e);\n      } finally {\n        return 1; // Noncompliant\n      }\n    }\n    return 0;\n  }\n}",
      "good_example": "class Ok {\n  int nonCompliantMethod(int n) {\n    for (int i = 0; i < n; ++i) {\n      try {\n        functionThrowingException(i);\n      } catch (e) {\n        print(e);\n        return 1;\n      }\n    }\n    return 0;\n  }\n}",
      "examples": [
        {
          "snippet": "class ReturnInFinally {\n  int nonCompliantMethod(int n) {\n    for (int i = 0; i < n; ++i) {\n      try {\n        functionThrowingException(i);\n      } catch (e) {\n        print(e);\n      } finally {\n        return 1; // Noncompliant\n      }\n    }\n    return 0;\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "class Ok {\n  int nonCompliantMethod(int n) {\n    for (int i = 0; i < n; ++i) {\n      try {\n        functionThrowingException(i);\n      } catch (e) {\n        print(e);\n        return 1;\n      }\n    }\n    return 0;\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["error-handling", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "7c030279-b22f-4121-aa64-35a23233bcc6",
      "title": "Remove Unused Assignments",
      "rule": "Eliminate assignments to variables that are never used or overwritten immediately to improve code efficiency and readability.",
      "why_is_this_important": "Assignments to variables that are never used waste computation and clutter the code. Remove them to improve clarity.",
      "severity": "Medium",
      "bad_example": "int foo(int y) {\n  int x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}",
      "good_example": "int foo(int y) {\n  int x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}",
      "examples": [
        {
          "snippet": "int foo(int y) {\n  int x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}",
          "isCorrect": false
        },
        {
          "snippet": "int foo(int y) {\n  int x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["maintainability", "readability-refactor"],
      "scope": "file"
    },
    {
      "uuid": "6e9490a1-4912-4183-90c2-ceb0d1f9b19e",
      "title": "Prefer `SizedBox` Over `Container` for Spacing",
      "rule": "Use `SizedBox` instead of `Container` when adding spacing in layouts to improve performance and avoid unnecessary rendering overhead.",
      "why_is_this_important": "`SizedBox` is a lightweight alternative to `Container` when only spacing is needed, reducing unnecessary widget complexity.",
      "severity": "High",
      "bad_example": "List<Widget> widgets(){\n  return [\n    Container(width: 4, height: 5),\n    Container(key: Key(\"MyWidget\"), child: MyWidget(), height: 5)\n  ];\n}",
      "good_example": "List<Widget> widgets(){\n  return [\n    SizedBox(width: 4, height: 5),\n    SizedBox(key: Key(\"MyWidget\"), child: MyWidget(), height: 5)\n  ];\n}",
      "examples": [
        {
          "snippet": "List<Widget> widgets(){\n  return [\n    Container(width: 4, height: 5),\n    Container(key: Key(\"MyWidget\"), child: MyWidget(), height: 5)\n  ];\n}",
          "isCorrect": false
        },
        {
          "snippet": "List<Widget> widgets(){\n  return [\n    SizedBox(width: 4, height: 5),\n    SizedBox(key: Key(\"MyWidget\"), child: MyWidget(), height: 5)\n  ];\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["performance-efficiency", "stack-flutter"],
      "scope": "file"
    },
    {
      "uuid": "d42d2547-f8d9-45c1-ad36-ddac85fba3e0",
      "title": "Check `mounted` Before Using `BuildContext` After an Async Operation",
      "rule": "Verify if a widget is still mounted before using `BuildContext` inside an asynchronous operation to prevent accessing invalid states.",
      "why_is_this_important": "`BuildContext` may become invalid if the widget is unmounted during an async operation. Always check `mounted` before using it.",
      "severity": "High",
      "bad_example": "@override\nWidget build(BuildContext context) => OutlinedButton(\n    onPressed: () async {\n        await Future<void>.delayed(const Duration(seconds: 1));\n        Navigator.of(context).pop(); // Non compliant\n    },\n    child: const Text('Delayed pop'),\n  );",
      "good_example": "@override\nWidget build(BuildContext context) => OutlinedButton(\n    onPressed: () async {\n        await Future<void>.delayed(const Duration(seconds: 1));\n        if (context.mounted) {\n          // The context is mounted, so it's safe to use it\n          Navigator.of(context).pop();\n        }\n    },\n    child: const Text('Delayed pop'),\n  );",
      "examples": [
        {
          "snippet": "@override\nWidget build(BuildContext context) => OutlinedButton(\n    onPressed: () async {\n        await Future<void>.delayed(const Duration(seconds: 1));\n        Navigator.of(context).pop(); // Non compliant\n    },\n    child: const Text('Delayed pop'),\n  );",
          "isCorrect": false
        },
        {
          "snippet": "@override\nWidget build(BuildContext context) => OutlinedButton(\n    onPressed: () async {\n        await Future<void>.delayed(const Duration(seconds: 1));\n        if (context.mounted) {\n          // The context is mounted, so it's safe to use it\n          Navigator.of(context).pop();\n        }\n    },\n    child: const Text('Delayed pop'),\n  );",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["error-handling", "stack-flutter", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "098b7cf8-8c00-4b29-9588-70d4be0370c3",
      "title": "Use Web-Only Libraries Only in Flutter Web Plugins",
      "rule": "Ensure `dart:html`, `dart:js`, and `dart:js_util` are only used in Flutter web plugins to prevent runtime errors in non-web environments.",
      "why_is_this_important": "`dart:html`, `dart:js`, and `dart:js_util` are only supported in web contexts. Using them outside of Flutter web plugins leads to runtime errors.",
      "severity": "High",
      "bad_example": "import 'dart:html';    // Non compliant\nimport 'dart:js';      // Non compliant\nimport 'dart:js_util'; // Non compliant\nimport 'package:other_package/other_library.dart';",
      "good_example": "import 'package:other_package/other_library.dart';",
      "examples": [
        {
          "snippet": "import 'dart:html';    // Non compliant\nimport 'dart:js';      // Non compliant\nimport 'dart:js_util'; // Non compliant\nimport 'package:other_package/other_library.dart';",
          "isCorrect": false
        },
        {
          "snippet": "import 'package:other_package/other_library.dart';",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["module-architecture", "stack-flutter"],
      "scope": "file"
    },
    {
      "uuid": "e790035d-a88c-4772-a0ff-0c151fce1a1d",
      "title": "Do Not Assign Values to `void` Variables",
      "rule": "Avoid assigning values to `void` variables as `void` is not a compatible type and doing so results in runtime errors.",
      "why_is_this_important": "In Dart, `void` is a type that does not hold values. Assigning a value to a `void` variable is a logical error.",
      "severity": "High",
      "bad_example": "void x;\nx = 3; // Non compliant",
      "good_example": "dynamic x; // type of x not known\nx = 3;",
      "examples": [
        {
          "snippet": "void x;\nx = 3; // Non compliant",
          "isCorrect": false
        },
        {
          "snippet": "dynamic x; // type of x not known\nx = 3;",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["error-handling", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "e46cf6ae-dd38-4676-a7c3-1dac9923510f",
      "title": "Avoid Unnecessary `toList()` with Spread Operator",
      "rule": "Remove unnecessary `.toList()` calls when using the spread operator (`...`) to avoid redundant operations.",
      "why_is_this_important": "The spread operator (`...` and `...?`) flattens collections directly, making `toList()` redundant and inefficient.",
      "severity": "High",
      "bad_example": "final list = [\n    1,\n    2,\n    ...anIterable.toList(), // Noncompliant\n    3,\n    4\n];",
      "good_example": "final list = [\n    1,\n    2,\n    ...anIterable,\n    3,\n    4\n];",
      "examples": [
        {
          "snippet": "final list = [\n    1,\n    2,\n    ...anIterable.toList(), // Noncompliant\n    3,\n    4\n];",
          "isCorrect": false
        },
        {
          "snippet": "final list = [\n    1,\n    2,\n    ...anIterable,\n    3,\n    4\n];",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": [
        "duplication-complexity",
        "performance-efficiency",
        "stack-flutter"
      ],
      "scope": "file"
    },
    {
      "uuid": "127b121d-80e5-47e0-9f5c-f341c576c2b0",
      "title": "Prefer `is!` Over `!is` for Type Checks",
      "rule": "Use `is!` instead of `!is` for type checking to prevent confusion and ensure consistent behavior.",
      "why_is_this_important": "Using `is!` instead of `!is` avoids confusion with null assertion syntax and improves code clarity.",
      "severity": "High",
      "bad_example": "void main(dynamic s) {\n\n  if (s !is String) { // Noncompliant\n    print('s is not a String!');\n  }\n\n}",
      "good_example": "void main(dynamic s) {\n\n  if (s is! String) {\n    print('s is not a String!');\n  }\n\n}",
      "examples": [
        {
          "snippet": "void main(dynamic s) {\n\n  if (s !is String) { // Noncompliant\n    print('s is not a String!');\n  }\n\n}",
          "isCorrect": false
        },
        {
          "snippet": "void main(dynamic s) {\n\n  if (s is! String) {\n    print('s is not a String!');\n  }\n\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["readability-refactor", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "e09250c2-a042-45c5-8a36-2703327d8feb",
      "title": "Avoid Using `!` to Null Check Nullable Type Parameters",
      "rule": "Do not use `!` to check nullable type parameters, as this can lead to runtime exceptions if the type itself is nullable.",
      "why_is_this_important": "If a type parameter itself is nullable, using `!` for null checking can cause runtime exceptions. Use explicit checks instead.",
      "severity": "High",
      "bad_example": "void main() {\n  getOrDefaultIf<int?>(() => 42, false);\n}\n\nT getOrDefaultIf<T>(T retriever(), bool condition) {\n  T? result;\n  final retrieveIfCondition = () {\n    if (condition) {\n        result = retriever();\n    }\n  };\n\n  retrieveIfCondition();\n  return result!; // Noncompliant\n}",
      "good_example": "void main() {\n  getOrDefaultIf<int?>(() => 42, false);\n}\n\nT getOrDefaultIf<T>(T retriever(), bool condition) {\n  T? result;\n  final retrieveIfCondition = () {\n    if (condition) {\n        result = retriever();\n    }\n  };\n\n  retrieveIfCondition();\n  return result as T;\n}",
      "examples": [
        {
          "snippet": "void main() {\n  getOrDefaultIf<int?>(() => 42, false);\n}\n\nT getOrDefaultIf<T>(T retriever(), bool condition) {\n  T? result;\n  final retrieveIfCondition = () {\n    if (condition) {\n        result = retriever();\n    }\n  };\n\n  retrieveIfCondition();\n  return result!; // Noncompliant\n}",
          "isCorrect": false
        },
        {
          "snippet": "void main() {\n  getOrDefaultIf<int?>(() => 42, false);\n}\n\nT getOrDefaultIf<T>(T retriever(), bool condition) {\n  T? result;\n  final retrieveIfCondition = () {\n    if (condition) {\n        result = retriever();\n    }\n  };\n\n  retrieveIfCondition();\n  return result as T;\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["error-handling", "stack-flutter"],
      "scope": "file"
    },
    {
      "uuid": "fca3f7d8-e250-4836-8f1e-a6b44a804277",
      "title": "Do Not Use Block Comments for Documentation",
      "rule": "Use `///` for documentation instead of block comments to improve tooling support and ensure better formatting in generated docs.",
      "why_is_this_important": "Block comments do not generate proper Dart documentation. Use `///` for documentation comments instead.",
      "severity": "Low",
      "bad_example": "void greet(String title) {\n  /* Assume we have a valid title. */\n  print('Hi, $title!');\n}",
      "good_example": "void greet(String title) {\n  // Assume we have a valid title.\n  print('Hi, $title!');\n}",
      "examples": [
        {
          "snippet": "void greet(String title) {\n  /* Assume we have a valid title. */\n  print('Hi, $title!');\n}",
          "isCorrect": false
        },
        {
          "snippet": "void greet(String title) {\n  // Assume we have a valid title.\n  print('Hi, $title!');\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["docs-adrs", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "c962f34f-5455-4d36-8fbe-105d842f34bb",
      "title": "Use `///` Doc Comments for Members and Types",
      "rule": "Use `///` instead of regular comments to properly document Dart classes, methods, and properties for automatic documentation generation.",
      "why_is_this_important": "`///` comments allow tools like dartdoc to generate documentation, improving maintainability and usability.",
      "severity": "Low",
      "bad_example": "// The number of characters in this chunk when unsplit.\nint get length => ...",
      "good_example": "int get length => ...",
      "examples": [
        {
          "snippet": "// The number of characters in this chunk when unsplit.\nint get length => ...",
          "isCorrect": false
        },
        {
          "snippet": "int get length => ...",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["docs-adrs", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "84c091f7-88dc-4ed0-be08-3504a9daa1e0",
      "title": "AVOID redundancy with the surrounding context\n",
      "rule": "Check if the method, variable, or class title contains redundant context (e.g., using 'carDrive()' when 'drive()' would suffice). Ensure the title is concise and avoids repetition of surrounding context.",
      "why_is_this_important": "Avoid redundant words in titles that repeat the surrounding context. For example, a class titled `Car` should not have a method `carDrive()`; instead, use `drive()`. Redundant naming decreases readability and clarity.",
      "severity": "Low",
      "bad_example": "class RadioButtonWidget extends Widget {\n  /// Sets the tooltip for this radio button widget to the list of strings in\n  /// [lines].\n  void tooltip(List<String> lines) {\n    ...\n  }\n}",
      "good_example": "class RadioButtonWidget extends Widget {\n  /// Sets the tooltip to [lines], which should have been word wrapped using\n  /// the current font.\n  void tooltip(List<String> lines) {\n    ...\n  }\n}",
      "examples": [
        {
          "snippet": "class RadioButtonWidget extends Widget {\n  /// Sets the tooltip for this radio button widget to the list of strings in\n  /// [lines].\n  void tooltip(List<String> lines) {\n    ...\n  }\n}",
          "isCorrect": false
        },
        {
          "snippet": "class RadioButtonWidget extends Widget {\n  /// Sets the tooltip to [lines], which should have been word wrapped using\n  /// the current font.\n  void tooltip(List<String> lines) {\n    ...\n  }\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": [
        "duplication-complexity",
        "readability-refactor",
        "stack-flutter",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "uuid": "97502612-74f2-4afc-ad36-7ec0f14a74d3",
      "title": "DO title extensions using UpperCamelCase\n",
      "rule": "Ensure that extensions use UpperCamelCase naming conventions (e.g., `MyExtension`). Avoid other casing styles that could reduce readability.",
      "why_is_this_important": "Extensions should follow Dart's naming conventions, which use UpperCamelCase. Using other casing styles reduces readability and makes it inconsistent with other identifiers.",
      "severity": "Low",
      "bad_example": "",
      "good_example": "extension MyFancyList<T> on List<T> { ... }\n\nextension SmartIterable<T> on Iterable<T> { ... }",
      "examples": [
        {
          "snippet": "extension MyFancyList<T> on List<T> { ... }\n\nextension SmartIterable<T> on Iterable<T> { ... }",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "3c6caf9b-936a-4125-adea-e71c2ed7abdc",
      "title": "DO title import prefixes using lowercase_with_underscores\n",
      "rule": "Check that import prefixes use lowercase_with_underscores (e.g., `my_library`), following Dart's style guide.",
      "why_is_this_important": "Import prefixes should use lowercase_with_underscores to improve readability and align with Dart's style guide. Using different naming conventions reduces clarity.",
      "severity": "Low",
      "bad_example": "import 'dart:math' as Math;\nimport 'package:angular_components/angular_components.dart' as angularComponents;\nimport 'package:js/js.dart' as JS;",
      "good_example": "import 'dart:math' as math;\nimport 'package:angular_components/angular_components.dart' as angular_components;\nimport 'package:js/js.dart' as js;",
      "examples": [
        {
          "snippet": "import 'dart:math' as Math;\nimport 'package:angular_components/angular_components.dart' as angularComponents;\nimport 'package:js/js.dart' as JS;",
          "isCorrect": false
        },
        {
          "snippet": "import 'dart:math' as math;\nimport 'package:angular_components/angular_components.dart' as angular_components;\nimport 'package:js/js.dart' as js;",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "3ab622a5-7b29-410a-b9c0-6d5f104acfaf",
      "title": "DO title other identifiers using lowerCamelCase",
      "rule": "Ensure that identifiers such as variables and method titles are written in lowerCamelCase (e.g., `myVariable`). Avoid using other naming conventions.",
      "why_is_this_important": "Identifiers (such as variable titles and method titles) should follow the lowerCamelCase naming convention. This improves consistency and readability.",
      "severity": "Low",
      "bad_example": "",
      "good_example": "var count = 3;\n\nHttpRequest httpRequest;\n\nvoid align(bool clearItems) {\n  // ...\n}",
      "examples": [
        {
          "snippet": "var count = 3;\n\nHttpRequest httpRequest;\n\nvoid align(bool clearItems) {\n  // ...\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "797faa11-6bfc-4bc2-8fdc-2f729c4103c9",
      "title": "PREFER using _, __, etc. for unused callback parameters",
      "rule": "Check for functions with unused parameters and ensure they are titled with `_` or `__` to indicate they are intentionally unused.",
      "why_is_this_important": "When defining a function with unused parameters, use `_` or `__` to indicate they are intentionally unused. This avoids confusion and prevents unnecessary warnings.",
      "severity": "Low",
      "bad_example": "",
      "good_example": "futureOfVoid.then((_) {\n  print('Operation complete.');\n});",
      "examples": [
        {
          "snippet": "futureOfVoid.then((_) {\n  print('Operation complete.');\n});",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["maintainability", "readability-refactor", "stack-flutter"],
      "scope": "file"
    },
    {
      "uuid": "1af0ea12-d9a8-412f-a699-fcb6e3e0b59a",
      "title": "DON'T explicitly title libraries",
      "rule": "Ensure that libraries are not explicitly titled. Dart provides automatic library titles, so avoid redundant naming of libraries in the code.",
      "why_is_this_important": "Dart's library system provides automatic library titles based on file paths. Explicitly naming libraries is unnecessary and can lead to inconsistencies.",
      "severity": "Low",
      "bad_example": "library my_library;",
      "good_example": "/// A really great test library.\n@TestOn('browser')\nlibrary;",
      "examples": [
        {
          "snippet": "library my_library;",
          "isCorrect": false
        },
        {
          "snippet": "/// A really great test library.\n@TestOn('browser')\nlibrary;",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["duplication-complexity", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "9ae0852e-eaac-4d7e-b418-b88254b832fa",
      "title": "PREFER a noun phrase for a non-boolean property or variable",
      "rule": "Ensure that non-boolean properties or variables are titled with noun phrases (e.g., `userDetails`, not `getUserDetails`). This improves readability.",
      "why_is_this_important": "Non-boolean properties and variables should be titled using noun phrases to improve clarity and readability. Using verb-like titles can cause confusion.",
      "severity": "Medium",
      "bad_example": "list.deleteItems",
      "good_example": "list.length\ncontext.lineWidth\nquest.rampagingSwampBeast",
      "examples": [
        {
          "snippet": "list.deleteItems",
          "isCorrect": false
        },
        {
          "snippet": "list.length\ncontext.lineWidth\nquest.rampagingSwampBeast",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["readability-refactor", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "d3b8a960-ae76-4be0-9a9a-eb539cfa3fe6",
      "title": "AVOID defining a class that contains only static members",
      "rule": "Ensure that classes with only static members are converted to top-level functions or extensions. Avoid unnecessary class instantiation.",
      "why_is_this_important": "If a class only contains static members, it should be converted into a top-level utility function or extension. This reduces unnecessary class instantiation and improves efficiency.",
      "severity": "Medium",
      "bad_example": "class DateUtils {\n  static DateTime mostRecent(List<DateTime> dates) {\n    return dates.reduce((a, b) => a.isAfter(b) ? a : b);\n  }\n}\n\nclass _Favorites {\n  static const mammal = 'weasel';\n}",
      "good_example": "DateTime mostRecent(List<DateTime> dates) {\n  return dates.reduce((a, b) => a.isAfter(b) ? a : b);\n}\n\nconst _favoriteMammal = 'weasel';",
      "examples": [
        {
          "snippet": "class DateUtils {\n  static DateTime mostRecent(List<DateTime> dates) {\n    return dates.reduce((a, b) => a.isAfter(b) ? a : b);\n  }\n}\n\nclass _Favorites {\n  static const mammal = 'weasel';\n}",
          "isCorrect": false
        },
        {
          "snippet": "DateTime mostRecent(List<DateTime> dates) {\n  return dates.reduce((a, b) => a.isAfter(b) ? a : b);\n}\n\nconst _favoriteMammal = 'weasel';",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["maintainability", "module-architecture", "stack-flutter"],
      "scope": "file"
    },
    {
      "uuid": "313f4c7a-1a20-4af1-8834-522de2b3f7f6",
      "title": "DO type annotate fields and top-level variables if the type isn't obvious",
      "rule": "Check that fields and top-level variables are type-annotated explicitly when the type is not obvious from the context. This avoids ambiguity.",
      "why_is_this_important": "Using explicit type annotations improves readability and prevents ambiguity, especially when the type is not obvious from the assignment.",
      "severity": "Low",
      "bad_example": "install(id, destination) => ...",
      "good_example": "Future<bool> install(PackageId id, String destination) => ...",
      "examples": [
        {
          "snippet": "install(id, destination) => ...",
          "isCorrect": false
        },
        {
          "snippet": "Future<bool> install(PackageId id, String destination) => ...",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["readability-refactor", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "1219eb38-027f-4eac-a636-89aabe17e0f5",
      "title": "DON'T make the parameter to == nullable",
      "rule": "Ensure that parameters to `==` are non-nullable. Avoid using nullable parameters as they can introduce unexpected behavior and null reference errors.",
      "why_is_this_important": "Making the parameter to `==` nullable can introduce unexpected behavior. Always use a non-nullable parameter to prevent null reference errors.",
      "severity": "Low",
      "bad_example": "class Person {\n  final String title;\n\n  // ···\n\n  bool operator ==(Object? other) =>\n      other != null && other is Person && title == other.title;\n}",
      "good_example": "class Person {\n  final String title;\n\n  // ···\n\n  bool operator ==(Object other) => other is Person && title == other.title;\n}",
      "examples": [
        {
          "snippet": "class Person {\n  final String title;\n\n  // ···\n\n  bool operator ==(Object? other) =>\n      other != null && other is Person && title == other.title;\n}",
          "isCorrect": false
        },
        {
          "snippet": "class Person {\n  final String title;\n\n  // ···\n\n  bool operator ==(Object other) => other is Person && title == other.title;\n}",
          "isCorrect": true
        }
      ],
      "language": "dart",
      "buckets": ["error-handling", "stack-flutter", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "679bb43b-164b-43f9-9624-4171eea761cb",
      "title": "Use Prepared (Parameterized) SQL Queries",
      "rule": "Do not build SQL queries by directly concatenating untrusted data. Instead, use prepared statements with parameters (for example, using PDO or MySQLi) to prevent SQL Injection.",
      "why_is_this_important": "Concatenating user input into SQL queries can allow an attacker to inject malicious commands into the database. Prepared statements ensure that data is treated as parameters, preventing unexpected SQL code execution.",
      "severity": "High",
      "bad_example": "<?php\n$nome = $_GET['nome'];\n$query = \"SELECT * FROM usuarios WHERE nome = '$nome'\";\n$result = mysqli_query($conn, $query);\n?>",
      "good_example": "<?php\n$nome = $_GET['nome'];\n$stmt = $pdo->prepare(\"SELECT * FROM usuarios WHERE nome = :nome\");\n$stmt->execute(['nome' => $nome]);\n$usuarios = $stmt->fetchAll();\n?>",
      "examples": [
        {
          "snippet": "<?php\n$nome = $_GET['nome'];\n$query = \"SELECT * FROM usuarios WHERE nome = '$nome'\";\n$result = mysqli_query($conn, $query);\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n$nome = $_GET['nome'];\n$stmt = $pdo->prepare(\"SELECT * FROM usuarios WHERE nome = :nome\");\n$stmt->execute(['nome' => $nome]);\n$usuarios = $stmt->fetchAll();\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["security-hardening", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "6ba2e5bf-2637-4241-ad17-9140ea884e4c",
      "title": "Escape Output to Prevent XSS",
      "rule": "Always escape or sanitize user‐provided content before displaying it in HTML. Use functions like htmlspecialchars() to convert special characters into HTML entities.",
      "why_is_this_important": "Without escaping output, an attacker can inject malicious JavaScript (Cross‐Site Scripting) that will execute in other users’ browsers, compromising sensitive data and application integrity.",
      "severity": "High",
      "bad_example": "<?php\necho \"<p>Name: \" . $_POST['nome'] . \"</p>\";\n?>",
      "good_example": "<?php\n$nome = htmlspecialchars($_POST['nome'], ENT_QUOTES, 'UTF-8');\necho \"<p>Name: $nome</p>\";\n?>",
      "examples": [
        {
          "snippet": "<?php\necho \"<p>Name: \" . $_POST['nome'] . \"</p>\";\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n$nome = htmlspecialchars($_POST['nome'], ENT_QUOTES, 'UTF-8');\necho \"<p>Name: $nome</p>\";\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["security-hardening", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "eac4e25f-4ff7-401c-a14c-531824443e49",
      "title": "Avoid Using eval() to Execute Code",
      "rule": "Do not use the eval() function to run dynamically generated PHP code, especially if it can include user input. Look for safe alternatives like controlled function calls or explicit decision structures.",
      "why_is_this_important": "Using eval() can lead to arbitrary code execution if malicious data is injected. It also makes code harder to debug and maintain.",
      "severity": "High",
      "bad_example": "<?php\n$code = $_GET['code'];\neval($code);\n?>",
      "good_example": "<?php\n$action = $_GET['acao'];\nif ($action === 'info') {\n    phpinfo();\n}\n?>",
      "examples": [
        {
          "snippet": "<?php\n$code = $_GET['code'];\neval($code);\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n$action = $_GET['acao'];\nif ($action === 'info') {\n    phpinfo();\n}\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["security-hardening", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "c7a2fa14-6faf-4b73-a40d-60245116ba57",
      "title": "Do Not Include Files Dynamically Without Validation",
      "rule": "Avoid passing untrusted values to include/require statements. If you need to include files based on external input, strictly validate that input (for example, using a whitelist of valid filenames).",
      "why_is_this_important": "Including files from user‐supplied paths without validation can lead to Local/Remote File Inclusion (LFI/RFI), allowing attackers to execute arbitrary code or access sensitive system files.",
      "severity": "High",
      "bad_example": "<?php\n$page = $_GET['pagina'];\ninclude \"$page.php\";\n?>",
      "good_example": "<?php\n$page = $_GET['pagina'];\n$allowed = ['home', 'about', 'contact'];\nif (in_array($page, $allowed)) {\n    include $page . '.php';\n} else {\n    include '404.php';\n}\n?>",
      "examples": [
        {
          "snippet": "<?php\n$page = $_GET['pagina'];\ninclude \"$page.php\";\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n$page = $_GET['pagina'];\n$allowed = ['home', 'about', 'contact'];\nif (in_array($page, $allowed)) {\n    include $page . '.php';\n} else {\n    include '404.php';\n}\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["security-hardening", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "9876e598-4d51-4dfe-b0d4-6306686ef8d4",
      "title": "Use Secure Password Hashing Functions",
      "rule": "Do not use weak or generic hash algorithms (like MD5 or SHA1) for storing passwords. Use built‐in functions like password_hash() (with BCRYPT or Argon2) and password_verify(), which handle salting and secure algorithms automatically.",
      "why_is_this_important": "Old hash algorithms are vulnerable to brute‐force attacks and rainbow tables, making it easier to crack passwords. Modern password‐hashing functions include salts and iteration counts, making stored passwords much harder to compromise.",
      "severity": "High",
      "bad_example": "<?php\n$password = $_POST['senha'];\n$hash = md5($password);\n// store $hash in database\n?>",
      "good_example": "<?php\n$password = $_POST['senha'];\n$hash = password_hash($password, PASSWORD_DEFAULT);\n// store $hash in database\n?>",
      "examples": [
        {
          "snippet": "<?php\n$password = $_POST['senha'];\n$hash = md5($password);\n// store $hash in database\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n$password = $_POST['senha'];\n$hash = password_hash($password, PASSWORD_DEFAULT);\n// store $hash in database\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["secrets-credentials", "security-hardening", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "359b8290-a340-4b34-9e13-4d0707b78a80",
      "title": "Do Not Expose Sensitive Credentials in Source Code",
      "rule": "Avoid hard‐coding credentials or sensitive information (like DB passwords, API tokens or secret keys) directly in your code. Use separate configuration files or environment variables to manage these values securely.",
      "why_is_this_important": "Embedded credentials can be accidentally exposed (e.g., in public repos), compromising system security. Storing them externally and referencing them securely prevents critical data leaks.",
      "severity": "High",
      "bad_example": "<?php\n$dbuser = 'admin';\n$dbpass = 'secret123';\n$conn = new PDO('mysql:host=localhost;dbname=test', $dbuser, $dbpass);\n?>",
      "good_example": "<?php\n$dbuser = getenv('DB_USER');\n$dbpass = getenv('DB_PASS');\n$conn = new PDO('mysql:host=localhost;dbname=test', $dbuser, $dbpass);\n?>",
      "examples": [
        {
          "snippet": "<?php\n$dbuser = 'admin';\n$dbpass = 'secret123';\n$conn = new PDO('mysql:host=localhost;dbname=test', $dbuser, $dbpass);\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n$dbuser = getenv('DB_USER');\n$dbpass = getenv('DB_PASS');\n$conn = new PDO('mysql:host=localhost;dbname=test', $dbuser, $dbpass);\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["secrets-credentials", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "bea7fb6e-b484-42ef-9014-10c87961b8cb",
      "title": "Protect Critical Forms with CSRF Tokens",
      "rule": "Implement anti‐CSRF tokens in forms performing sensitive actions (like state changes or deletions). Generate a unique token per session or request and validate it on the server before processing the form action.",
      "why_is_this_important": "CSRF tokens prevent malicious sites from forging form submissions on behalf of authenticated users. Without this protection, a user could unintentionally trigger unwanted actions by visiting a malicious page.",
      "severity": "High",
      "bad_example": "<?php\n// No CSRF token used\nif ($_POST['acao'] === 'delete') {\n    deleteUser($_POST['id']);\n}\n?>",
      "good_example": "<?php\n// Generate CSRF token\n$_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n?>\n<form method=\"POST\">\n  <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION['csrf_token'] ?>\">\n  <!-- other fields -->\n</form>\n<?php\n// Validate CSRF token on submit\nif (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {\n    die('Invalid CSRF token');\n}\nif ($_POST['acao'] === 'delete') {\n    deleteUser($_POST['id']);\n}\n?>",
      "examples": [
        {
          "snippet": "<?php\n// No CSRF token used\nif ($_POST['acao'] === 'delete') {\n    deleteUser($_POST['id']);\n}\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n// Generate CSRF token\n$_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n?>\n<form method=\"POST\">\n  <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION['csrf_token'] ?>\">\n  <!-- other fields -->\n</form>\n<?php\n// Validate CSRF token on submit\nif (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {\n    die('Invalid CSRF token');\n}\nif ($_POST['acao'] === 'delete') {\n    deleteUser($_POST['id']);\n}\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["security-hardening", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "971e6288-a205-4cc9-8daf-20d8087a2dfe",
      "title": "Enable Secure Flags When Setting Cookies",
      "rule": "When sending session or other sensitive cookies, always enable the HttpOnly and Secure flags (and consider SameSite). HttpOnly prevents JavaScript access, and Secure ensures the cookie is only sent over HTTPS.",
      "why_is_this_important": "Without HttpOnly, malicious scripts (e.g., via XSS) can steal cookies. Without Secure, cookies may be transmitted in plaintext over HTTP, exposing them to interception. Proper cookie flags strengthen user session security.",
      "severity": "High",
      "bad_example": "<?php\nsetcookie('session', \\$sessionId); // no HttpOnly/Secure\n?>",
      "good_example": "<?php\nsetcookie('session', \\$sessionId, ['httponly' => true, 'secure' => true, 'samesite' => 'Strict']);\n?>",
      "examples": [
        {
          "snippet": "<?php\nsetcookie('session', \\$sessionId); // no HttpOnly/Secure\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\nsetcookie('session', \\$sessionId, ['httponly' => true, 'secure' => true, 'samesite' => 'Strict']);\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["security-hardening", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "ff04646c-c803-4334-8e80-1d321c84ace7",
      "title": "Validate and Sanitize All Input Data",
      "rule": "Never trust data received from users, forms or requests. Always validate the expected format (e.g., numbers, emails) and sanitize/remove unexpected characters or content using appropriate techniques (filter_var, filter_input, etc.).",
      "why_is_this_important": "Unvalidated input may contain malicious commands or malformed content, leading to security issues like SQL injection and XSS. Validation and sanitization ensure your application only handles data in expected formats, reducing risks and errors.",
      "severity": "High",
      "bad_example": "<?php\n$age = $_GET['idade'];\nif (\\$age > 18) {\n    // proceed\n}\n?>",
      "good_example": "<?php\n$age = filter_input(INPUT_GET, 'idade', FILTER_VALIDATE_INT);\nif (\\$age === false) {\n    // handle invalid input\n} elseif (\\$age > 18) {\n    // proceed\n}\n?>",
      "examples": [
        {
          "snippet": "<?php\n$age = $_GET['idade'];\nif (\\$age > 18) {\n    // proceed\n}\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n$age = filter_input(INPUT_GET, 'idade', FILTER_VALIDATE_INT);\nif (\\$age === false) {\n    // handle invalid input\n} elseif (\\$age > 18) {\n    // proceed\n}\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["security-hardening", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "e44fe086-6c38-47dc-90c7-9a988d46e96d",
      "title": "Use Cryptographically Secure Random Generators for Tokens",
      "rule": "For security tokens (session IDs, CSRF tokens, password‐reset links), use cryptographically secure random functions like random_bytes() or openssl_random_pseudo_bytes(), instead of predictable functions like rand() or mt_rand().",
      "why_is_this_important": "Common random functions are not suitable for security because they can produce predictable values. Predictable tokens allow attackers to guess session IDs or other sensitive tokens, compromising system security. Cryptographic generators ensure strong randomness.",
      "severity": "High",
      "bad_example": "<?php\n$token = mt_rand();\n?>",
      "good_example": "<?php\n$token = bin2hex(random_bytes(16));\n?>",
      "examples": [
        {
          "snippet": "<?php\n$token = mt_rand();\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n$token = bin2hex(random_bytes(16));\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["secrets-credentials", "security-hardening", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "cf28b8b2-e4b6-47fd-90eb-f89165605840",
      "title": "Do Not Expose Error Details in Production",
      "rule": "Configure your application not to display detailed error messages (stack traces, PHP warnings) to end users in production. Instead, log errors for developers and show a generic message to users.",
      "why_is_this_important": "Detailed error messages can reveal sensitive information (directory structures, SQL queries, keys) useful to attackers. Logging errors internally and hiding details from users improves security and UX.",
      "severity": "High",
      "bad_example": "<?php\nini_set('display_errors', 1);\nerror_reporting(E_ALL);\n// showing errors in production\n?>",
      "good_example": "<?php\nini_set('display_errors', 0);\nini_set('log_errors', 1);\nerror_reporting(E_ALL);\n// in production, errors are logged but not displayed\n?>",
      "examples": [
        {
          "snippet": "<?php\nini_set('display_errors', 1);\nerror_reporting(E_ALL);\n// showing errors in production\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\nini_set('display_errors', 0);\nini_set('log_errors', 1);\nerror_reporting(E_ALL);\n// in production, errors are logged but not displayed\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": [
        "error-handling",
        "observability-logging",
        "security-hardening",
        "stack-php"
      ],
      "scope": "file"
    },
    {
      "uuid": "1ff19725-8e6e-48f9-9b02-52c12ced6cb8",
      "title": "Avoid Suppressing Errors with @",
      "rule": "Do not use the error‐suppression operator '@' before function calls or expressions. Instead, handle potential errors properly using return checks or exceptions (try/catch).",
      "why_is_this_important": "Using '@' hides errors that may indicate serious issues, making bugs hard to find and fix. It also incurs a performance cost. Explicit error handling ensures code reliability.",
      "severity": "Medium",
      "bad_example": "<?php\n$file = @file_get_contents('data.txt');\n?>",
      "good_example": "<?php\n$file = file_get_contents('data.txt');\nif (\\$file === false) {\n    error_log('Failed to read data.txt');\n}\n?>",
      "examples": [
        {
          "snippet": "<?php\n$file = @file_get_contents('data.txt');\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n$file = file_get_contents('data.txt');\nif (\\$file === false) {\n    error_log('Failed to read data.txt');\n}\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["error-handling", "observability-logging", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "7c952ce3-d859-4022-8cdb-8d9a765751d0",
      "title": "Enable strict_types Mode for Type Checking",
      "rule": "At the top of your PHP files (before any code), declare `declare(strict_types=1)`. This forces PHP to enforce the declared parameter and return types strictly, avoiding automatic type coercion.",
      "why_is_this_important": "With strict_types enabled, function calls with incorrect types throw TypeError instead of silently converting values. This helps catch type issues early in development, making code more robust and preventing unexpected behavior.",
      "severity": "Medium",
      "bad_example": "<?php\n// file without strict_types\nfunction sum(int \\$a, int \\$b): int {\n    return \\$a + \\$b;\n}\necho sum(\"5\", \"7\"); // coerces strings to ints\n?>",
      "good_example": "<?php\ndeclare(strict_types=1);\nfunction sum(int \\$a, int \\$b): int {\n    return \\$a + \\$b;\n}\necho sum(\"5\", \"7\"); // throws TypeError\n?>",
      "examples": [
        {
          "snippet": "<?php\n// file without strict_types\nfunction sum(int \\$a, int \\$b): int {\n    return \\$a + \\$b;\n}\necho sum(\"5\", \"7\");\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\ndeclare(strict_types=1);\nfunction sum(int \\$a, int \\$b): int {\n    return \\$a + \\$b;\n}\necho sum(\"5\", \"7\");\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["stack-php", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "edd6868a-b8d5-4316-acef-454f2cf33762",
      "title": "Declare Visibility on Properties and Methods",
      "rule": "Always specify access levels (public, private, protected) when declaring class properties and methods. Don’t use the old `var` keyword for properties. Explicit visibility clarifies intent and prevents unintended access.",
      "why_is_this_important": "Specifying visibility improves code readability and maintenance by clearly defining public interfaces versus internal details. It enforces encapsulation and avoids accidental misuse of internal members.",
      "severity": "Low",
      "bad_example": "<?php\nclass User {\n    var \\$name;\n    function setName(\\$name) {\n        \\$this->name = \\$name;\n    }\n}\n?>",
      "good_example": "<?php\nclass User {\n    public string \\$name;\n    public function setName(string \\$name): void {\n        \\$this->name = \\$name;\n    }\n}\n?>",
      "examples": [
        {
          "snippet": "<?php\nclass User {\n    var \\$name;\n    function setName(\\$name) {\n        \\$this->name = \\$name;\n    }\n}\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\nclass User {\n    public string \\$name;\n    public function setName(string \\$name): void {\n        \\$this->name = \\$name;\n    }\n}\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": [
        "module-architecture",
        "readability-refactor",
        "stack-php",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "uuid": "e2aad39d-d5c5-4d4c-8017-e72eff162241",
      "title": "Do Not Use goto for Control Flow",
      "rule": "Avoid using the `goto` statement for flow control. Instead, refactor code using loops (for, while) and conditional structures (if/else, switch) for clear and maintainable logic.",
      "why_is_this_important": "Using `goto` can create spaghetti code that’s hard to follow and prone to errors. Conventional control structures make code more readable and easier to debug.",
      "severity": "Low",
      "bad_example": "<?php\n// Bad goto usage\nif (!validate(\\$data)) {\n    goto error;\n}\n// ... other operations ...\nerror:\necho \"An error occurred\";\n?>",
      "good_example": "<?php\nif (!validate(\\$data)) {\n    echo \\'An error occurred';\n} else {\n    // ... other operations ...\n}\n?>",
      "examples": [
        {
          "snippet": "<?php\n// Bad goto usage\nif (!validate(\\$data)) {\n    goto error;\n}\n// ... other operations ...\nerror:\necho \"An error occurred\";\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\nif (!validate(\\$data)) {\n    echo \"An error occurred\";\n} else {\n    // ... other operations ...\n}\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["readability-refactor", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "326273aa-573e-40fe-a244-30410601ca49",
      "title": "Avoid Relying on Global Variables",
      "rule": "Do not use global variables to share data across your program. Prefer passing values as function parameters or using configuration objects. Limiting variable scope makes code more predictable and less prone to side effects.",
      "why_is_this_important": "Global variables make it hard to trace where and how data changes, leading to conflicts and unpredictable behavior. Reducing globals improves encapsulation and testability.",
      "severity": "Medium",
      "bad_example": "<?php\n// Using a global\n$config = [];\nfunction init() {\n    global \\$config;\n    \\$config['debug'] = true;\n}\ninit();\nif (\\$config['debug']) {\n    echo 'Debug on';\n}\n?>",
      "good_example": "<?php\n// Pass config or use config object\\ nfunction initConfig(array \\$config): array {\n    \\$config['debug'] = true;\n    return \\$config;\n}\n\\$config = initConfig(['debug' => false]);\nif (\\$config['debug']) {\n    echo 'Debug on';\n}\n?>",
      "examples": [
        {
          "snippet": "<?php\n// Using a global\n$config = [];\nfunction init() {\n    global \\$config;\n    \\$config['debug'] = true;\n}\ninit();\nif (\\$config['debug']) {\n    echo 'Debug on';\n}\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n// Pass config or use config object\nfunction initConfig(array \\$config): array {\n    \\$config['debug'] = true;\n    return \\$config;\n}\n\\$config = initConfig(['debug' => false]);\nif (\\$config['debug']) {\n    echo 'Debug on';\n}\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["maintainability", "module-architecture", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "4ad18981-ec2f-4faf-94de-7c3690216a82",
      "title": "Do Not Ignore Exceptions Without Handling",
      "rule": "Avoid empty catch blocks. When you catch an exception, implement meaningful handling: log the error, perform a fallback action, or rethrow after processing. Do not catch exceptions generically just to suppress them.",
      "why_is_this_important": "Silencing exceptions hides failures that may leave the system in an inconsistent state or make debugging difficult. Proper exception handling (even just logging) ensures you’re aware of issues and handle them appropriately.",
      "severity": "Medium",
      "bad_example": "<?php\ntry {\n    \\$data = file_get_contents('config.json');\n} catch (Exception \\$e) {\n    // do nothing\n}\n?>",
      "good_example": "<?php\ntry {\n    \\$data = file_get_contents('config.json');\n} catch (Exception \\$e) {\n    error_log('Failed to load config: ' . \\$e->getMessage());\n    throw \\$e; // or throw a custom exception\n}\n?>",
      "examples": [
        {
          "snippet": "<?php\ntry {\n   \\$data = file_get_contents('config.json');\n} catch (Exception \\$e) {\n    // do nothing\n}\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\ntry {\n    \\$data = file_get_contents('config.json');\n} catch (Exception \\$e) {\n    error_log('Failed to load config: ' . \\$e->getMessage());\n    throw \\$e; // or throw a custom exception\n}\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["error-handling", "observability-logging", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "f44ff314-76db-48e2-9dbe-3f3d30472cc6",
      "title": "Release External Resources After Use",
      "rule": "After using external resources (DB connections, open files, sockets), release them properly. Use fclose(), close database connections or finally blocks to ensure cleanup even if errors occur.",
      "why_is_this_important": "Each allocated resource consumes memory or system handles. Not releasing them can cause leaks or exhaustion (e.g., max DB connections). Proper cleanup ensures efficient operation and prevents resource‐related failures.",
      "severity": "Medium",
      "bad_example": "<?php\n$handle = fopen('file.txt', 'r');\n// ... read file\n// never close handle\n?>",
      "good_example": "<?php\n\\$handle = fopen('file.txt', 'r');\ntry {\n    // ... read file\n} finally {\n    if (\\$handle) {\n        fclose(\\$handle);\n    }\n}\n?>",
      "examples": [
        {
          "snippet": "<?php\n$handle = fopen('file.txt', 'r');\n// ... read file\n// never close handle\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n\\$handle = fopen('file.txt', 'r');\ntry {\n    // ... read file\n} finally {\n    if (\\$handle) {\n        fclose(\\$handle);\n    }\n}\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["error-handling", "stack-php", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "2c125018-c7e7-4a6c-8ae9-e80e9b13efdc",
      "title": "Do Not Use Deprecated or Removed Functions",
      "rule": "Avoid functions or extensions deprecated in recent PHP versions (e.g., mysql_* or preg_replace without proper delimiters). Use modern supported alternatives like PDO/MySQLi for DB or PCRE functions (preg_match, preg_replace with correct syntax).",
      "why_is_this_important": "Deprecated functions may be removed in future PHP releases and often lack security updates. Using up‐to‐date functions ensures compatibility, features, and security fixes, improving code longevity.",
      "severity": "Medium",
      "bad_example": "<?php\n// deprecated mysql_\n$link = mysql_connect('localhost','user','pass');\n?>",
      "good_example": "<?php\n// use PDO instead of mysql_\n$pdo = new PDO('mysql:host=localhost;dbname=test','user','pass');\n?>",
      "examples": [
        {
          "snippet": "<?php\n// deprecated mysql_\n$link = mysql_connect('localhost','user','pass');\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n// use PDO instead of mysql_\n$pdo = new PDO('mysql:host=localhost;dbname=test','user','pass');\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["dependency-supply-chain", "maintainability", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "63063630-fd3a-4f9c-9332-5779f5adacf9",
      "title": "Keep Functions/Methods Single-Responsibility",
      "rule": "Write functions and methods so each does one well-defined task. If a function handles distinct steps (validation, processing, saving, notifying), refactor into smaller focused functions.",
      "why_is_this_important": "Single-responsibility functions are easier to read, test, and reuse. Smaller functions tend to have fewer bugs and simplify isolating issues, while making future enhancements cleaner.",
      "severity": "Low",
      "bad_example": "<?php\nfunction processData(\\$data) {\n    // validate\n    if (!validate(\\$data)) return false;\n    // process\n    \\$result = calculate(\\$data);\n    // save\n    saveToDb(\\$result);\n    // notify\n    sendNotification(\\$result);\n    return true;\n}\n?>",
      "good_example": "<?php\nfunction validateData(\\$data): bool {\n    // validation logic\n}\nfunction calculateResult(\\$data) {\n    // processing logic\n}\nfunction saveResult(\\$res) {\n    // persistence logic\n}\nfunction notifyUser(\\$res) {\n    // notification logic\n}\n\nif (validateData(\\$input)) {\n    \\$res = calculateResult(\\$input);\n    saveResult(\\$res);\n    notifyUser(\\$res);\n}\n?>",
      "examples": [
        {
          "snippet": "<?php\nfunction processData(\\$data) {\n    // validate\n    if (!validate(\\$data)) return false;\n    // process\n    \\$result = calculate(\\$data);\n    // save\n    saveToDb(\\$result);\n    // notify\n    sendNotification(\\$result);\n    return true;\n}\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\nfunction validateData(\\$data): bool {\n    // validation logic\n}\nfunction calculateResult(\\$data) {\n    // processing logic\n}\nfunction saveResult(\\$res) {\n    // persistence logic\n}\nfunction notifyUser(\\$res) {\n    // notification logic\n}\n\nif (validateData(\\$input)) {\n    \\$res = calculateResult(\\$input);\n    saveResult(\\$res);\n    notifyUser(\\$res);\n}\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["duplication-complexity", "readability-refactor", "stack-php"],
      "scope": "file"
    },
    {
      "uuid": "4afada6a-a96c-446e-887d-34a131c97cc9",
      "title": "Avoid N+1 SQL Queries Inside Loops",
      "rule": "Do not perform multiple DB queries inside a loop for data you could fetch in one query. Instead, consolidate using IN clauses or JOINs to retrieve all needed data at once.",
      "why_is_this_important": "Looping queries (N+1 problem) causes excessive DB round-trips, degrading performance. Consolidating queries reduces load and improves response times, especially at scale.",
      "severity": "Medium",
      "bad_example": "<?php\n\\$ids = [1,2,3];\n\\$data = [];\nforeach (\\$ids as \\$id) {\n    \\$res = \\$pdo->query(\"SELECT * FROM items WHERE user_id = \\$id\");\n    \\$data[] = \\$res->fetch();\n}\n?>",
      "good_example": "<?php\n\\$ids = [1,2,3];\n\\$list = implode(',', \\$ids);\n\\$stmt = \\$pdo->query(\"SELECT * FROM items WHERE user_id IN (\\$list)\");\n\\$data = \\$stmt->fetchAll();\n?>",
      "examples": [
        {
          "snippet": "<?php\n\\$ids = [1,2,3];\n\\$data = [];\nforeach (\\$ids as \\$id) {\n    \\$res = \\$pdo->query(\"SELECT * FROM items WHERE user_id = \\$id\");\n    \\$data[] = \\$res->fetch();\n}\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n\\$ids = [1,2,3];\n\\$list = implode(',', \\$ids);\n\\$stmt = \\$pdo->query(\"SELECT * FROM items WHERE user_id IN (\\$list)\");\n\\$data = \\$stmt->fetchAll();\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": [
        "database-query-performance",
        "performance-efficiency",
        "stack-php"
      ],
      "scope": "file"
    },
    {
      "uuid": "02891516-a12b-4b40-a83a-868204043f77",
      "title": "Prefer Strict Comparisons (===) Over Loose (==)",
      "rule": "Use strict comparison operators (=== and !==) instead of loose (== and !=) in most cases. Strict comparisons check both type and value, avoiding PHP’s implicit type coercion pitfalls.",
      "why_is_this_important": "Loose comparisons can yield unexpected results due to type juggling (e.g., \"0e123\" == 0 is true). Using === ensures both type and value match, preventing subtle bugs and security issues.",
      "severity": "Medium",
      "bad_example": "<?php\n\\$hash = md5(\\$input);\nif (\\$hash == \"0e123456789abcdef\") {\n    echo \"Hash matches\";\n}\n?>",
      "good_example": "<?php\n\\$hash = md5(\\$input);\nif (\\$hash === \"0e123456789abcdef\") {\n    echo \"Hash matches\";\n}\n?>",
      "examples": [
        {
          "snippet": "<?php\n\\$hash = md5(\\$input);\nif (\\$hash == \"0e123456789abcdef\") {\n    echo \"Hash matches\";\n}\n?>",
          "isCorrect": false
        },
        {
          "snippet": "<?php\n\\$hash = md5(\\$input);\nif (\\$hash === \"0e123456789abcdef\") {\n    echo \"Hash matches\";\n}\n?>",
          "isCorrect": true
        }
      ],
      "language": "php",
      "buckets": ["readability-refactor", "stack-php", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "ca91e42f-4ba8-4885-bca5-cea6e4178704",
      "title": "Avoid Pointers to Interface Types",
      "rule": "Never use a pointer to an interface type. Pass interfaces as values, since an interface already provides reference semantics to the underlying data.",
      "why_is_this_important": "Interfaces are reference types; taking a pointer to an interface is unnecessary and can lead to confusion. It complicates function signatures without any benefit, and it doesn't change the fact that the underlying data can be a pointer.",
      "severity": "Medium",
      "bad_example": "type Fooer interface { Foo() }\n\nfunc UseFoo(f *Fooer) {\n    // ... using pointer to interface (unnecessary)\n}",
      "good_example": "type Fooer interface { Foo() }\n\nfunc UseFoo(f Fooer) {\n    // ... using interface directly\n}",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "type Fooer interface { Foo() }\n\nfunc UseFoo(f *Fooer) {\n    // ... using pointer to interface (unnecessary)\n}"
        },
        {
          "isCorrect": true,
          "snippet": "type Fooer interface { Foo() }\n\nfunc UseFoo(f Fooer) {\n    // ... using interface directly\n}"
        }
      ],
      "language": "go",
      "buckets": [
        "performance-efficiency",
        "readability-refactor",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "uuid": "d132339b-b10a-46d5-8e3e-21b0b15e67f2",
      "title": "Avoid Pointers to Slices (and Maps)",
      "rule": "Do not use pointers to slice or map types. Slices and maps are already reference types that point to underlying data, so they can be passed by value and still allow modifications to the contents.",
      "why_is_this_important": "Using a pointer to a slice or map is redundant and can make snippet harder to understand. Since slices and maps already have reference semantics, passing them directly is simpler and less error-prone.",
      "severity": "Medium",
      "bad_example": "func AddItem(list *[]string, item string) {\n    *list = append(*list, item) // using a pointer to a slice\n}",
      "good_example": "func AddItem(list []string, item string) []string {\n    return append(list, item) // pass slice by value and return the new slice\n}",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "func AddItem(list *[]string, item string) {\n    *list = append(*list, item) // using a pointer to a slice\n}"
        },
        {
          "isCorrect": true,
          "snippet": "func AddItem(list []string, item string) []string {\n    return append(list, item) // pass slice by value and return the new slice\n}"
        }
      ],
      "language": "go",
      "buckets": [
        "performance-efficiency",
        "readability-refactor",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "uuid": "90b1556c-e49b-4339-94d7-5b768c2c2fc8",
      "title": "Copy Slices and Maps at Boundaries",
      "rule": "When accepting a slice or map from external snippet or returning one, consider copying it. This prevents unintentional modifications to the original data. For example, don't store a slice argument directly if the caller might modify it later; instead, make a copy for internal use.",
      "why_is_this_important": "Slices and maps hold references to underlying data. If you keep a reference to a slice or map provided by someone else, changes in one will affect the other, potentially causing bugs or data races. Copying ensures your snippet has its own independent data, improving safety and clarity.",
      "severity": "High",
      "bad_example": "type Config struct {\n    allowed []string\n}\n\nfunc (c *Config) SetAllowed(a []string) {\n    c.allowed = a // storing reference directly\n}\n\n// ... elsewhere\ncfg := &Config{}\nlist := []string{\"val1\", \"val2\"}\ncfg.SetAllowed(list)\nlist[0] = \"changed\" // unintended: also changes cfg.allowed",
      "good_example": "func (c *Config) SetAllowed(a []string) {\n    copySlice := make([]string, len(a))\n    copy(copySlice, a)\n    c.allowed = copySlice // store a copy\n}\n\n// Now modifying the original 'list' won't affect c.allowed",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "type Config struct {\n    allowed []string\n}\n\nfunc (c *Config) SetAllowed(a []string) {\n    c.allowed = a // storing reference directly\n}\n\n// ... elsewhere\ncfg := &Config{}\nlist := []string{\"val1\", \"val2\"}\ncfg.SetAllowed(list)\nlist[0] = \"changed\" // unintended: also changes cfg.allowed"
        },
        {
          "isCorrect": true,
          "snippet": "func (c *Config) SetAllowed(a []string) {\n    copySlice := make([]string, len(a))\n    copy(copySlice, a)\n    c.allowed = copySlice // store a copy\n}\n\n// Now modifying the original 'list' won't affect c.allowed"
        }
      ],
      "language": "go",
      "buckets": ["module-architecture", "security-hardening"],
      "scope": "file"
    },
    {
      "uuid": "a8f139d3-6884-4342-a6b5-675d2d0fa745",
      "title": "Use defer to Release Resources",
      "rule": "Always use `defer` to release resources like files or locks when a function has multiple exit points. Open or lock resources and immediately defer their close/unlock to ensure they get released on every code path.",
      "why_is_this_important": "Deferring cleanup right after acquiring a resource ensures that no matter how the function exits (return or panic), the resource will be released. This prevents resource leaks and deadlocks caused by forgotten closes or unlocks.",
      "severity": "High",
      "bad_example": "func ReadConfig(path string) ([]byte, error) {\n    f, err := os.Open(path)\n    if err != nil {\n        return nil, err\n    }\n    data, err := io.ReadAll(f)\n    if err != nil {\n        f.Close() // closes file on error path\n        return nil, err\n    }\n    // Forgot to close file on success path\n    return data, nil\n}",
      "good_example": "func ReadConfig(path string) ([]byte, error) {\n    f, err := os.Open(path)\n    if err != nil {\n        return nil, err\n    }\n    defer f.Close()\n    data, err := io.ReadAll(f)\n    if err != nil {\n        return nil, err\n    }\n    return data, nil\n}",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "func ReadConfig(path string) ([]byte, error) {\n    f, err := os.Open(path)\n    if err != nil {\n        return nil, err\n    }\n    data, err := io.ReadAll(f)\n    if err != nil {\n        f.Close() // closes file on error path\n        return nil, err\n    }\n    // Forgot to close file on success path\n    return data, nil\n}"
        },
        {
          "isCorrect": true,
          "snippet": "func ReadConfig(path string) ([]byte, error) {\n    f, err := os.Open(path)\n    if err != nil {\n        return nil, err\n    }\n    defer f.Close()\n    data, err := io.ReadAll(f)\n    if err != nil {\n        return nil, err\n    }\n    return data, nil\n}"
        }
      ],
      "language": "go",
      "buckets": ["error-handling", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "58d2357b-6317-414b-8cda-09073ff1b904",
      "title": "Keep Channel Buffer Size Small (0 or 1)",
      "rule": "By default, use unbuffered channels or a buffer size of one. Only use larger buffers when necessary and carefully considered. Unbuffered channels (size 0) or a size of 1 are the most common; a large buffer can hide synchronization issues or lead to memory bloat if misused.",
      "why_is_this_important": "Channels coordinate goroutines. Unbuffered channels ensure strict handoff, and a buffer of one provides minimal queuing. Large buffers, if chosen poorly, might mask deadlocks or produce high memory usage as goroutines pile up sends, making bugs harder to detect.",
      "severity": "Medium",
      "bad_example": "jobs := make(chan Job, 100) // large buffer without clear need\n\n// Producer\nfor _, j := range jobList {\n    jobs <- j // might fill up and block if consumer is slow\n}\nclose(jobs)",
      "good_example": "jobs := make(chan Job) // unbuffered channel\n// or jobs := make(chan Job, 1) for a single-item buffer\n\nfor _, j := range jobList {\n    jobs <- j // will block if consumer is not ready, preventing overload\n}\nclose(jobs)",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "jobs := make(chan Job, 100) // large buffer without clear need\n\n// Producer\nfor _, j := range jobList {\n    jobs <- j // might fill up and block if consumer is slow\n}\nclose(jobs)"
        },
        {
          "isCorrect": true,
          "snippet": "jobs := make(chan Job) // unbuffered channel\n// or jobs := make(chan Job, 1) for a single-item buffer\n\nfor _, j := range jobList {\n    jobs <- j // will block if consumer is not ready, preventing overload\n}\nclose(jobs)"
        }
      ],
      "language": "go",
      "buckets": ["concurrency-safety", "performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "1fe99a64-5f23-4ebf-8a32-be810d1e44e8",
      "title": "Start Enums at 1, Reserve 0 for Default",
      "rule": "When using iota to create enums (constant sets), start from 1 and use 0 as a 'zero value' meaning undefined or default. This way, an uninitialized variable of that enum type will not accidentally hold a valid value.",
      "why_is_this_important": "In Go, an int's zero value is 0. If your enum uses 0 as a valid value, any variable of that enum type will default to that value even if never set, which can cause logic errors. Reserving 0 as an invalid or default state helps catch uninitialized usage.",
      "severity": "Medium",
      "bad_example": "type Role int\nconst (\n    RoleUser Role = iota // 0\n    RoleAdmin            // 1\n)\n\nvar r Role\nfmt.Println(r) // r is 0 -> interprets as RoleUser, even though we never set it",
      "good_example": "type Role int\nconst (\n    _ Role = iota // 0 is skipped/reserved\n    RoleUser      // 1\n    RoleAdmin     // 2\n)\n\nvar r Role\nfmt.Println(r) // r is 0, which we treat as an undefined default",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "type Role int\nconst (\n    RoleUser Role = iota // 0\n    RoleAdmin            // 1\n)\n\nvar r Role\nfmt.Println(r) // r is 0 -> interprets as RoleUser, even though we never set it"
        },
        {
          "isCorrect": true,
          "snippet": "type Role int\nconst (\n    _ Role = iota // 0 is skipped/reserved\n    RoleUser      // 1\n    RoleAdmin     // 2\n)\n\nvar r Role\nfmt.Println(r) // r is 0, which we treat as an undefined default"
        }
      ],
      "language": "go",
      "buckets": ["error-handling", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "568b34fc-e48f-429b-9c48-e48327cc6e96",
      "title": "Use Appropriate Time Types (time.Time, time.Duration)",
      "rule": "Use the time package's types for handling time. For example, represent instants as `time.Time` and durations or time intervals as `time.Duration` instead of raw numeric types (int, int64).",
      "why_is_this_important": "Using dedicated time types makes the code self-documenting and less error-prone. It prevents confusion over units (seconds vs milliseconds) and provides helpful methods. This leads to clearer and more correct time calculations.",
      "severity": "Medium",
      "bad_example": "func ScheduleEvent(name string, ts int64) {\n    // 'ts' is a timestamp in seconds since epoch? milliseconds? unclear\n    // ...\n}\n\ntimeout := 5000 // represents 5000 milliseconds? Or microseconds?\ntime.Sleep(time.Duration(timeout)) // bug: might sleep 5 microseconds if misinterpreted",
      "good_example": "func ScheduleEvent(name string, t time.Time) {\n    // 't' clearly represents a moment in time\n    // ...\n}\n\ntimeout := 5 * time.Second\ntime.Sleep(timeout) // clear 5 second timeout",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "func ScheduleEvent(name string, ts int64) {\n    // 'ts' is a timestamp in seconds since epoch? milliseconds? unclear\n    // ...\n}\n\ntimeout := 5000 // represents 5000 milliseconds? Or microseconds?\ntime.Sleep(time.Duration(timeout)) // bug: might sleep 5 microseconds if misinterpreted"
        },
        {
          "isCorrect": true,
          "snippet": "func ScheduleEvent(name string, t time.Time) {\n    // 't' clearly represents a moment in time\n    // ...\n}\n\ntimeout := 5 * time.Second\ntime.Sleep(timeout) // clear 5 second timeout"
        }
      ],
      "language": "go",
      "buckets": [
        "performance-efficiency",
        "readability-refactor",
        "style-conventions"
      ],
      "scope": "file"
    },
    {
      "uuid": "73f3b6ff-5644-4ae0-8c83-c3becf7e5f83",
      "title": "Handle Errors Properly (Don't Ignore or Double-Handle)",
      "rule": "Never silently ignore an error, and avoid handling an error (e.g., logging it) and then still returning it. Either handle the error fully or propagate it upward, but not both.",
      "why_is_this_important": "Ignoring errors can lead to hidden bugs that are hard to diagnose. Logging an error and also returning it can result in duplicate logs or confusion about who is responsible for handling it. Each error should be dealt with in one place to maintain clarity and avoid surprises.",
      "severity": "High",
      "bad_example": "data, err := ioutil.ReadFile(\"config.json\")\nif err != nil {\n    log.Println(\"failed to read file:\", err)\n    return err // error is both logged and returned\n}\n// ... use data",
      "good_example": "data, err := ioutil.ReadFile(\"config.json\")\nif err != nil {\n    return fmt.Errorf(\"cannot read config: %w\", err) // propagate with context (or handle fully here)\n}\n// ... use data",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "data, err := ioutil.ReadFile(\"config.json\")\nif err != nil {\n    log.Println(\"failed to read file:\", err)\n    return err // error is both logged and returned\n}\n// ... use data"
        },
        {
          "isCorrect": true,
          "snippet": "data, err := ioutil.ReadFile(\"config.json\")\nif err != nil {\n    return fmt.Errorf(\"cannot read config: %w\", err) // propagate with context (or handle fully here)\n}\n// ... use data"
        }
      ],
      "language": "go",
      "buckets": ["error-handling", "observability-logging"],
      "scope": "file"
    },
    {
      "uuid": "670037bd-b2fa-440b-9283-7d51a0c70dcc",
      "title": "Wrap Errors with Context Information",
      "rule": "When returning an error from a function, include contextual information. Use `fmt.Errorf` with `%w` (or similar error wrapping) to add a message while preserving the original error.",
      "why_is_this_important": "Providing context in errors (such as what operation failed) makes debugging easier. Wrapping errors with `%w` retains the original error for inspection (using errors.Is/As), so the root cause isn't lost. Without context, you might get a generic error with no clue of its origin.",
      "severity": "Medium",
      "bad_example": "if err != nil {\n    return errors.New(\"operation failed\") // loses original error context\n}",
      "good_example": "if err != nil {\n    return fmt.Errorf(\"operation failed: %w\", err) // wraps original error\n}",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "if err != nil {\n    return errors.New(\"operation failed\") // loses original error context\n}"
        },
        {
          "isCorrect": true,
          "snippet": "if err != nil {\n    return fmt.Errorf(\"operation failed: %w\", err) // wraps original error\n}"
        }
      ],
      "language": "go",
      "buckets": ["error-handling", "observability-logging"],
      "scope": "file"
    },
    {
      "uuid": "c1ca3150-3774-4753-873d-5e6701abf514",
      "title": "Use Consistent Error Message Style",
      "rule": "Error strings should start with a lowercase letter and not end with punctuation. They should state what went wrong in a concise, factual manner (for example, \"file not found\", not \"File not found!\").",
      "why_is_this_important": "Following Go conventions for error messages ensures that errors are consistent and can be combined in sentences. A lowercase, unpunctuated error string fits naturally when wrapped or printed, and maintains readability across the codebase.",
      "severity": "Low",
      "bad_example": "err := errors.New(\"File Not Found!\")",
      "good_example": "err := errors.New(\"file not found\")",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "err := errors.New(\"File Not Found!\")"
        },
        {
          "isCorrect": true,
          "snippet": "err := errors.New(\"file not found\")"
        }
      ],
      "language": "go",
      "buckets": ["error-handling", "style-conventions"],
      "scope": "file"
    },
    {
      "uuid": "a8c02ee7-a447-4baa-8565-0a43492279a9",
      "title": "Don't Panic on Regular Errors",
      "rule": "Reserve `panic` for unrecoverable situations (like invariant violations or truly fatal errors). For expected error conditions (file not found, invalid input, etc.), return an `error` to the caller instead of panicking.",
      "why_is_this_important": "Using panic for normal errors will crash the program and skip normal error handling logic. It makes the code less robust and harder to reuse. By returning errors, you allow the caller to decide how to handle the failure, leading to more graceful degradation and better reliability.",
      "severity": "High",
      "bad_example": "func GetConfig(path string) []byte {\n    data, err := os.ReadFile(path)\n    if err != nil {\n        panic(\"could not read config: \" + err.Error())\n    }\n    return data\n}",
      "good_example": "func GetConfig(path string) ([]byte, error) {\n    data, err := os.ReadFile(path)\n    if err != nil {\n        return nil, fmt.Errorf(\"could not read config: %w\", err)\n    }\n    return data, nil\n}",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "func GetConfig(path string) []byte {\n    data, err := os.ReadFile(path)\n    if err != nil {\n        panic(\"could not read config: \" + err.Error())\n    }\n    return data\n}"
        },
        {
          "isCorrect": true,
          "snippet": "func GetConfig(path string) ([]byte, error) {\n    data, err := os.ReadFile(path)\n    if err != nil {\n        return nil, fmt.Errorf(\"could not read config: %w\", err)\n    }\n    return data, nil\n}"
        }
      ],
      "language": "go",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "uuid": "9837b539-be63-4d5c-b95a-6769666169e4",
      "title": "Handle Type Assertion Failures",
      "rule": "Use the 'comma, ok' idiom for type assertions to safely handle cases when the assertion fails. Only use a single-value type assertion (which panics on failure) if you are absolutely sure (by prior checks or program logic) that the interface holds the correct type.",
      "why_is_this_important": "If a type assertion is wrong, it causes a run-time panic. By using the two-value form (`value, ok := iface.(Type)`), your code can gracefully handle a bad type instead of crashing. This is especially important when dealing with interfaces like `interface{}` or `json.Unmarshalled` data where the type isn't guaranteed.",
      "severity": "High",
      "bad_example": "var x interface{} = getValue()\n// Assuming x should be a string, but not checking\ns := x.(string) // will panic if x isn't a string",
      "good_example": "var x interface{} = getValue()\ns, ok := x.(string)\nif !ok {\n    return fmt.Errorf(\"unexpected type: %T\", x)\n}\n// use s safely as a string",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "var x interface{} = getValue()\n// Assuming x should be a string, but not checking\ns := x.(string) // will panic if x isn't a string"
        },
        {
          "isCorrect": true,
          "snippet": "var x interface{} = getValue()\ns, ok := x.(string)\nif !ok {\n    return fmt.Errorf(\"unexpected type: %T\", x)\n}\n// use s safely as a string"
        }
      ],
      "language": "go",
      "buckets": ["error-handling"],
      "scope": "file"
    },
    {
      "uuid": "c62eeabc-4028-4a5e-a18e-157dd157b3e0",
      "title": "Avoid Mutable Global State",
      "rule": "Do not use global (package-level) variables for mutable state whenever possible. Instead, encapsulate state in structs or pass it as parameters. If you must use a global variable (for configuration or caching), protect it with mutexes if concurrent access is possible and document its usage.",
      "why_is_this_important": "Global mutable state can be modified from anywhere, which makes the program harder to understand, test, and maintain. It can introduce hidden dependencies between components and is prone to concurrency issues. Encapsulating state helps maintain invariants and makes code more modular.",
      "severity": "Medium",
      "bad_example": "var cache = map[string]string{}\n\nfunc SetCache(key, value string) {\n    cache[key] = value // modifies global map, not thread-safe\n}",
      "good_example": "type Cache struct {\n    mu sync.Mutex\n    data map[string]string\n}\n\nfunc (c *Cache) Set(key, value string) {\n    c.mu.Lock()\n    c.data[key] = value\n    c.mu.Unlock()\n}\n\n// or pass *Cache around instead of using a global",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "var cache = map[string]string{}\n\nfunc SetCache(key, value string) {\n    cache[key] = value // modifies global map, not thread-safe\n}"
        },
        {
          "isCorrect": true,
          "snippet": "type Cache struct {\n    mu sync.Mutex\n    data map[string]string\n}\n\nfunc (c *Cache) Set(key, value string) {\n    c.mu.Lock()\n    c.data[key] = value\n    c.mu.Unlock()\n}\n\n// or pass *Cache around instead of using a global"
        }
      ],
      "language": "go",
      "buckets": ["concurrency-safety", "maintainability", "module-architecture"],
      "scope": "file"
    },
    {
      "uuid": "353be773-3c83-4d07-b019-237064728a91",
      "title": "Avoid Complex init() Functions",
      "rule": "Do not put complex logic or long-running tasks in package `init()` functions. Keep `init()` minimal (if you use it at all), such as simple registration of types or default variable initialization. Perform real setup in explicit functions (like in `main` or a setup function called by main).",
      "why_is_this_important": "`init()` runs before `main` and in an undefined order across packages, which can lead to unpredictable behavior and make testing harder. Complex init logic can slow down program start and hide dependencies. Keeping initialization explicit improves clarity and control over program startup.",
      "severity": "Medium",
      "bad_example": "var DefaultClient *Client\n\nfunc init() {\n    // Complex or external setup in init\n    cfg := loadConfigFromDisk() // reading file, etc.\n    DefaultClient = NewClient(cfg)\n}",
      "good_example": "var DefaultClient *Client\n\nfunc InitClient() error {\n    cfg, err := loadConfigFromDisk()\n    if err != nil {\n        return err\n    }\n    DefaultClient = NewClient(cfg)\n    return nil\n}\n\nfunc main() {\n    if err := InitClient(); err != nil {\n        log.Fatal(err)\n    }\n    // ... proceed with DefaultClient ready\n}",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "var DefaultClient *Client\n\nfunc init() {\n    // Complex or external setup in init\n    cfg := loadConfigFromDisk() // reading file, etc.\n    DefaultClient = NewClient(cfg)\n}"
        },
        {
          "isCorrect": true,
          "snippet": "var DefaultClient *Client\n\nfunc InitClient() error {\n    cfg, err := loadConfigFromDisk()\n    if err != nil {\n        return err\n    }\n    DefaultClient = NewClient(cfg)\n    return nil\n}\n\nfunc main() {\n    if err := InitClient(); err != nil {\n        log.Fatal(err)\n    }\n    // ... proceed with DefaultClient ready\n}"
        }
      ],
      "language": "go",
      "buckets": ["maintainability", "performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "467cb0ae-2b3c-4a1b-a5db-4b2086958a61",
      "title": "Don't Leak Goroutines (No Unbounded Fire-and-Forget)",
      "rule": "Every goroutine you start should be managed. Avoid launching \"fire-and-forget\" goroutines that run indefinitely or without any synchronization. Provide a way to stop goroutines (using a cancel context or done channel) and/or track them (e.g., with sync.WaitGroup) to prevent leaks.",
      "why_is_this_important": "Uncontrolled goroutines can continue running and leak memory or other resources if the rest of the program moves on (for example, on shutdown or test completion). By managing goroutine lifecycles, you ensure they exit when expected, preventing resource leaks and unpredictable behavior.",
      "severity": "High",
      "bad_example": "func StartWorker() {\n    go func() {\n        for {\n            doWork()\n            // no exit condition, no tracking\n        }\n    }()\n}",
      "good_example": "func StartWorker(ctx context.Context, wg *sync.WaitGroup) {\n    wg.Add(1)\n    go func() {\n        defer wg.Done()\n        for {\n            select {\n            case <-ctx.Done():\n                return // exit when signaled\n            default:\n                doWork()\n            }\n        }\n    }()\n}\n\n// Now the caller can cancel the context or wait on the WaitGroup to ensure the goroutine stops.",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "func StartWorker() {\n    go func() {\n        for {\n            doWork()\n            // no exit condition, no tracking\n        }\n    }()\n}"
        },
        {
          "isCorrect": true,
          "snippet": "func StartWorker(ctx context.Context, wg *sync.WaitGroup) {\n    wg.Add(1)\n    go func() {\n        defer wg.Done()\n        for {\n            select {\n            case <-ctx.Done():\n                return // exit when signaled\n            default:\n                doWork()\n            }\n        }\n    }()\n}\n\n// Now the caller can cancel the context or wait on the WaitGroup to ensure the goroutine stops."
        }
      ],
      "language": "go",
      "buckets": ["concurrency-safety", "ui-robustness"],
      "scope": "file"
    },
    {
      "uuid": "724fb8e2-3ada-49ad-8e5a-ddb2c86c2504",
      "title": "Use sync.WaitGroup Correctly",
      "rule": "When using a WaitGroup to synchronize goroutines, call Add() before launching each goroutine and ensure each goroutine calls Done() exactly once. Finally, call Wait() to block until all goroutines have called Done(). Misordering Add/Done or mismatched calls will cause issues.",
      "why_is_this_important": "If you forget to Add before a goroutine or call Done more times than Add, the WaitGroup counter will go negative and panic. If you don't call Done or don't Wait properly, your program may hang. Proper usage of WaitGroup ensures no goroutines are missed and no extra signals occur, preventing panics and deadlocks.",
      "severity": "High",
      "bad_example": "var wg sync.WaitGroup\n\ngo func() {\n    // forgot wg.Add(1)\n    defer wg.Done() // will panic because counter was 0\n    doWork()\n}()\nwg.Wait()",
      "good_example": "var wg sync.WaitGroup\n\nwg.Add(1)\ngo func() {\n    defer wg.Done()\n    doWork()\n}()\nwg.Wait()",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "var wg sync.WaitGroup\n\ngo func() {\n    // forgot wg.Add(1)\n    defer wg.Done() // will panic because counter was 0\n    doWork()\n}()\nwg.Wait()"
        },
        {
          "isCorrect": true,
          "snippet": "var wg sync.WaitGroup\n\nwg.Add(1)\ngo func() {\n    defer wg.Done()\n    doWork()\n}()\nwg.Wait()"
        }
      ],
      "language": "go",
      "buckets": ["concurrency-safety"],
      "scope": "file"
    },
    {
      "uuid": "7966e501-1a67-40e9-830a-f03868b8864d",
      "title": "Use Context for Cancellation and Timeouts",
      "rule": "Functions that perform external calls or long operations should accept a `context.Context` parameter and respect its cancellation. Use context timeouts or cancellation signals to stop work that is no longer needed.",
      "why_is_this_important": "Contexts allow you to avoid goroutine leaks and respond to cancellations (like user aborts or timeouts). Ignoring context means your function may continue doing work even if the result is no longer needed (e.g., user navigated away), wasting resources. It's essential for clean shutdowns and respecting deadlines.",
      "severity": "Medium",
      "bad_example": "func FetchData(url string) ([]byte, error) {\n    resp, err := http.Get(url) // no way to cancel if the caller is done\n    if err != nil {\n        return nil, err\n    }\n    return io.ReadAll(resp.Body)\n}",
      "good_example": "func FetchData(ctx context.Context, url string) ([]byte, error) {\n    req, err := http.NewRequestWithContext(ctx, \"GET\", url, nil)\n    if err != nil {\n        return nil, err\n    }\n    resp, err := http.DefaultClient.Do(req)\n    if err != nil {\n        return nil, err\n    }\n    return io.ReadAll(resp.Body)\n}",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "func FetchData(url string) ([]byte, error) {\n    resp, err := http.Get(url) // no way to cancel if the caller is done\n    if err != nil {\n        return nil, err\n    }\n    return io.ReadAll(resp.Body)\n}"
        },
        {
          "isCorrect": true,
          "snippet": "func FetchData(ctx context.Context, url string) ([]byte, error) {\n    req, err := http.NewRequestWithContext(ctx, \"GET\", url, nil)\n    if err != nil {\n        return nil, err\n    }\n    resp, err := http.DefaultClient.Do(req)\n    if err != nil {\n        return nil, err\n    }\n    return io.ReadAll(resp.Body)\n}"
        }
      ],
      "language": "go",
      "buckets": ["concurrency-safety", "resilience-retries-idempotency"],
      "scope": "file"
    },
    {
      "uuid": "d3fe5197-801f-4c98-a6b5-247baeafb69a",
      "title": "Avoid Holding Large Backing Arrays via Small Slices",
      "rule": "Be c sem areful when slicing out a small portion of a large slice or array. The resulting slice still references the entire original array. If you only need the small portion long-term, copy that data into a new slice to avoid keeping the large array in memory.",
      "why_is_this_important": "Slicing a large array without copying can cause memory leaks or high memory usage since the garbage collector cannot reclaim the big array as long as a small slice references it. Copying the needed data prevents unexpectedly holding onto large memory blocks.",
      "severity": "Medium",
      "bad_example": "bigData := make([]byte, 1000000)\nsmall := bigData[:10]\n// 'small' is tiny but still prevents GC of the 1,000,000 byte array until bigData goes out of scope",
      "good_example": "bigData := make([]byte, 1000000)\nsmallCopy := make([]byte, 10)\ncopy(smallCopy, bigData[:10])\n// 'smallCopy' now contains the data and doesn't depend on the large array",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "bigData := make([]byte, 1000000)\nsmall := bigData[:10]\n// 'small' is tiny but still prevents GC of the 1,000,000 byte array until bigData goes out of scope"
        },
        {
          "isCorrect": true,
          "snippet": "bigData := make([]byte, 1000000)\nsmallCopy := make([]byte, 10)\ncopy(smallCopy, bigData[:10])\n// 'smallCopy' now contains the data and doesn't depend on the large array"
        }
      ],
      "language": "go",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "74f767d4-f66f-44ea-8ffc-5e5c794e6629",
      "title": "Avoid Using defer in Hot Loops",
      "rule": "Don't place a defer inside a loop that iterates many times (especially if the loop is performance-critical). Defer calls won't run until the function returns and each call has a small overhead; instead, perform the operation directly in the loop when possible.",
      "why_is_this_important": "In a tight loop, deferring an operation on each iteration can lead to increased memory usage (each defer is stacked until function exit) and CPU overhead. This can slow down performance and delay resource release. It's more efficient to handle repetitive operations inline for large loops.",
      "severity": "Medium",
      "bad_example": "for _, file := range files {\n    f, _ := os.Open(file)\n    defer f.Close() // defers 1000x if len(files)=1000; files stay open until after loop\n    processFile(f)\n}",
      "good_example": "for _, file := range files {\n    f, _ := os.Open(file)\n    processFile(f)\n    f.Close() // close immediately after processing each file\n}",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "for _, file := range files {\n    f, _ := os.Open(file)\n    defer f.Close() // defers 1000x if len(files)=1000; files stay open until after loop\n    processFile(f)\n}"
        },
        {
          "isCorrect": true,
          "snippet": "for _, file := range files {\n    f, _ := os.Open(file)\n    processFile(f)\n    f.Close() // close immediately after processing each file\n}"
        }
      ],
      "language": "go",
      "buckets": ["performance-efficiency"],
      "scope": "file"
    },
    {
      "uuid": "244cc95a-f2f0-48fa-9041-2b3854271651",
      "title": "Don't Compare Addresses to nil",
      "rule": "Never compare the address of a variable to nil (e.g., `&x == nil`). To check if a pointer is nil, compare the pointer itself to nil. The address of a variable (`&x`) will always be non-nil if `x` exists.",
      "why_is_this_important": "Comparing `&x` to nil is a logical mistake; the condition will never be true (unless x is a nil pointer itself and you're taking the address of a pointer variable incorrectly). This bug can lead to code that never runs or always runs unexpectedly, since the condition is based on a false premise.",
      "severity": "High",
      "bad_example": "var ptr *int\nif &ptr != nil {\n    // This block will always execute, even if ptr is nil\n    fmt.Println(\"ptr is not nil\")\n}",
      "good_example": "var ptr *int\nif ptr != nil {\n    // This will execute only if ptr points to a value\n    fmt.Println(\"ptr is not nil\")\n}",
      "examples": [
        {
          "isCorrect": false,
          "snippet": "var ptr *int\nif &ptr != nil {\n    // This block will always execute, even if ptr is nil\n    fmt.Println(\"ptr is not nil\")\n}"
        },
        {
          "isCorrect": true,
          "snippet": "var ptr *int\nif ptr != nil {\n    // This will execute only if ptr points to a value\n    fmt.Println(\"ptr is not nil\")\n}"
        }
      ],
      "language": "go",
      "buckets": ["error-handling", "readability-refactor"],
      "scope": "file"
    },
    {
      "title": "Docstrings required for public APIs (PEP 257 style)",
      "rule": "All public modules, classes, and functions must include a docstring immediately after the definition, using PEP 257 conventions (one-line summary + optional sections like Args, Returns, Raises).",
      "why_is_this_important": "Baseline documentation improves IDE help, searchability, and onboarding.",
      "severity": "High",
      "bad_example": "def calculate(a: int, b: int) -> int:\n return a + b",
      "good_example": "def calculate(a: int, b: int) -> int:\n \"\"\"Return the sum of two integers.\n\n Args:\n a (int): First addend.\n b (int): Second addend.\n Returns:\n int: a + b.\n \"\"\"\n return a + b",
      "examples": [
        {
          "snippet": "class User:\n \"\"\"Domain user entity.\"\"\"\n ...",
          "isCorrect": true
        },
        {
          "snippet": "class User:\n pass",
          "isCorrect": false
        }
      ],
      "language": "python",
      "uuid": "b6d0a1c2-2e77-4d8c-9a3b-7a3c9c2d1b10",
      "buckets": [
        "style-conventions",
        "readability-refactor",
        "maintainability",
        "docstring"
      ],
      "scope": "file"
    },
    {
      "title": "Keep docstrings consistent with signature and behavior",
      "rule": "Docstrings must match parameter names, optional defaults, return type, and raised exceptions; update the docstring in the same PR as any signature change.",
      "why_is_this_important": "Prevents drift and misuse by readers and static tools.",
      "severity": "High",
      "bad_example": "def find(name: str, limit: int = 10) -> list[str]:\n \"\"\"Find items.\n\n Args:\n query (str): Search query.\n limit (int): Required.\n \"\"\"\n ...",
      "good_example": "def find(name: str, limit: int = 10) -> list[str]:\n \"\"\"Find items by name.\n\n Args:\n name (str): Case-insensitive filter.\n limit (int, optional): Max results. Defaults to 10.\n Returns:\n list[str]: Matching names.\n Raises:\n ValueError: If limit <= 0.\n \"\"\"\n ...",
      "examples": [
        {
          "snippet": "def foo(x: int, y: int = 0) -> int:\n \"\"\"Add x and y (default 0).\n\"\"\"\n return x + y",
          "isCorrect": true
        },
        {
          "snippet": "def foo(x: int, y: int = 0) -> int:\n \"\"\"Add a and b.\n\"\"\"\n return x + y",
          "isCorrect": false
        }
      ],
      "language": "python",
      "scope": "file",
      "uuid": "7a2f6c9e-2e9d-4a1f-9e0d-4f2b9a1e6c21",
      "buckets": ["style-conventions", "maintainability", "docstring"]
    },
    {
      "title": "JSDoc required for exported APIs",
      "rule": "All exported JS/TS functions, classes, and public members must include JSDoc with a summary and @param/@returns; include @throws when applicable.",
      "why_is_this_important": "Improves IntelliSense, cross-language usage, and code navigation.",
      "severity": "High",
      "bad_example": "export function sum(a, b) { return a + b }",
      "good_example": "/\n * Add two numbers.\n * @param {number} a First addend.\n * @param {number} b Second addend.\n * @returns {number} a + b\n /\nexport function sum(a, b) { return a + b }",
      "examples": [
        {
          "snippet": "/* Multiply two numbers. @param {number} x @param {number} y @returns {number} /\nexport const mul = (x, y) => x * y;",
          "isCorrect": true
        },
        {
          "snippet": "export const mul = (x, y) => x * y;",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "uuid": "9b3a8c77-6c9a-4a2e-bc21-2d7f3e5a1c44",
      "buckets": [
        "style-conventions",
        "readability-refactor",
        "maintainability",
        "docstring"
      ],
      "scope": "file"
    },
    {
      "title": "Document async/Promise behavior and errors",
      "rule": "For async functions or functions returning Promise, document resolve value, rejection conditions, and usage with await; include @throws or @returns {Promise<Type>}.",
      "why_is_this_important": "Clarifies error handling and correct consumption patterns.",
      "severity": "Medium",
      "bad_example": "/* Fetch user */\nexport async function getUser(id) { ... }",
      "good_example": "/\n * Get a user by ID.\n * @param {string} id External user ID.\n * @returns {Promise<User>} Resolves with user; rejects with NotFoundError.\n /\nexport async function getUser(id) { ... }",
      "examples": [
        {
          "snippet": "/* @returns {Promise<string>} /\nexport async function token(){ return 't'; }",
          "isCorrect": true
        },
        {
          "snippet": "/* @returns {string} /\nexport async function token(){ return 't'; }",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "uuid": "1e5c7d2b-3a6f-4c9d-8b1e-0a2b3c4d5e6f",
      "buckets": ["style-conventions", "readability-refactor", "docstring"],
      "scope": "file"
    },
    {
      "title": "Javadoc required for public types and methods",
      "rule": "All public classes, interfaces, and methods must include Javadoc with a summary sentence, @param for each parameter, @return when not void, and @throws where applicable.",
      "why_is_this_important": "Javadoc powers IDE help and stable API contracts.",
      "severity": "High",
      "bad_example": "public class UserService {\n public User find(String id) { ... }\n}",
      "good_example": "/* Service for user retrieval. /\npublic class UserService {\n /**\n * Find a user by ID.\n * @param id external identifier\n * @return the user\n * @throws NotFoundException if no user exists\n /\n public User find(String id) { ... }\n}",
      "examples": [
        {
          "snippet": "/ Compute sum. @param a @param b @return sum /\npublic int add(int a, int b){ return a + b; }",
          "isCorrect": true
        },
        {
          "snippet": "public int add(int a, int b){ return a + b; }",
          "isCorrect": false
        }
      ],
      "language": "java",
      "uuid": "c2f7a9d1-4b2a-4b21-9f4c-1a2d3e4f5a6b",
      "buckets": [
        "style-conventions",
        "readability-refactor",
        "maintainability",
        "docstring"
      ],
      "scope": "file"
    },
    {
      "title": "Use @since/@deprecated with guidance",
      "rule": "When introducing or deprecating public APIs, include @since for introductions and @deprecated with migration notes and links for removals.",
      "why_is_this_important": "Communicates lifecycle and migration paths to consumers.",
      "severity": "Medium",
      "bad_example": "/* Old method /\n@Deprecated\npublic void oldApi(){ }",
      "good_example": "/\n * Process payment (v2).\n * @since 3.2.0\n */\npublic void payV2(){ }\n\n/\n * @deprecated Use {@link #payV2()} — v1 will be removed in 4.0.\n /\n@Deprecated\npublic void pay(){ }",
      "examples": [
        {
          "snippet": "/ @deprecated Use newApi() /\n@Deprecated\npublic void oldApi(){ }",
          "isCorrect": true
        },
        {
          "snippet": "/* Deprecated */\npublic void oldApi(){ }",
          "isCorrect": false
        }
      ],
      "language": "java",
      "uuid": "5f1c3a2b-9d7e-4c1a-8b2f-6a7d8e9f0a1b",
      "buckets": ["maintainability", "readability-refactor", "docstring"],
      "scope": "file"
    },
    {
      "title": "XML documentation for public APIs",
      "rule": "All public types and members must have XML documentation comments with <summary>, <param>, <returns> (if non-void), and <exception> when thrown.",
      "why_is_this_important": "Enables IntelliSense and consistent API usage across assemblies.",
      "severity": "High",
      "bad_example": "public int Add(int a, int b) { return a + b; }",
      "good_example": "/\n * Add two integers.\n * @param a First addend.\n * @param b Second addend.\n * @returns Sum of a and b.\n /\npublic int Add(int a, int b) { return a + b; }",
      "examples": [
        {
          "snippet": "/\n * Find by id.\n * @param id External ID.\n /\npublic User Find(string id){ ... }",
          "isCorrect": true
        },
        {
          "snippet": "// Find by id\npublic User Find(string id){ ... }",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "uuid": "0c9a1b2c-4d5e-6f7a-8b9c-0d1e2f3a4b5c",
      "buckets": ["style-conventions", "readability-refactor", "docstring"],
      "scope": "file"
    },
    {
      "title": "Use <inheritdoc/> judiciously and document exceptions explicitly",
      "rule": "Use <inheritdoc/> to inherit docs for overrides/implementations, but explicitly add <exception> and behavior differences when applicable.",
      "why_is_this_important": "Keeps docs DRY while making runtime differences clear.",
      "severity": "Medium",
      "bad_example": "/// <inheritdoc/>\npublic override Task ExecuteAsync(){ ... }",
      "good_example": "/// <inheritdoc/>\n/// <exception cref=\\\"TimeoutException\\\">When the request exceeds the timeout.</exception>\npublic override Task ExecuteAsync(){ ... }",
      "examples": [
        {
          "snippet": "/// <inheritdoc/>\npublic override string ToString(){ ... }",
          "isCorrect": true
        },
        {
          "snippet": "public override string ToString(){ ... }",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "uuid": "ab1c2d3e-4f56-4789-90ab-12cd34ef56ab",
      "buckets": ["maintainability", "readability-refactor", "docstring"],
      "scope": "file"
    },
    {
      "title": "Doc comments for packages and exported identifiers",
      "rule": "Every package must have a package comment, and each exported identifier must have a comment starting with the identifier name and a full-sentence summary.",
      "why_is_this_important": "Required for accurate godoc output and discoverability.",
      "severity": "High",
      "bad_example": "// utils\npackage utils\n\nfunc Hash(s string) string { ... }",
      "good_example": "// Package utils provides helper functions for hashing and encoding.\npackage utils\n\n// Hash returns a SHA-256 hex digest of s.\nfunc Hash(s string) string { ... }",
      "examples": [
        {
          "snippet": "// Parse parses an ISO8601 timestamp.\nfunc Parse(s string) (time.Time, error) { ... }",
          "isCorrect": true
        },
        {
          "snippet": "// parses time\nfunc Parse(s string) (time.Time, error) { ... }",
          "isCorrect": false
        }
      ],
      "language": "go",
      "uuid": "d4e5f6a7-b8c9-4d0e-a1b2-c3d4e5f6a7b8",
      "buckets": [
        "style-conventions",
        "readability-refactor",
        "maintainability",
        "docstring"
      ],
      "scope": "file"
    },
    {
      "title": "First sentence is a clear summary; document errors",
      "rule": "The first sentence should be a standalone summary used by godoc. For functions returning error, state error conditions succinctly.",
      "why_is_this_important": "Concise summaries and error docs improve skimmability and correctness.",
      "severity": "Medium",
      "bad_example": "// Upload stuff to s3\nfunc Upload(ctx context.Context, p string) error { ... }",
      "good_example": "// Upload uploads a file at path p to S3. Returns ErrNotFound if the file is missing.\nfunc Upload(ctx context.Context, p string) error { ... }",
      "examples": [
        {
          "snippet": "// Open opens the file, returning ErrPermission when not allowed.\nfunc Open(p string) (*os.File, error) { ... }",
          "isCorrect": true
        },
        {
          "snippet": "// Open file\nfunc Open(p string) (*os.File, error) { ... }",
          "isCorrect": false
        }
      ],
      "language": "go",
      "uuid": "2a3b4c5d-6e7f-4890-a1b2-3c4d5e6f7a8b",
      "buckets": ["readability-refactor", "maintainability", "docstring"],
      "scope": "file"
    },
    {
      "title": "Use item docs (///) and module/crate docs (!//) with examples",
      "rule": "Document public items with /// and modules/crates with //!; include minimal runnable examples that pass doctests where applicable.",
      "why_is_this_important": "Rustdoc renders examples and validates them as doctests.",
      "severity": "Medium",
      "bad_example": "pub fn sum(a: i32, b: i32) -> i32 { a + b }",
      "good_example": "/// Add two integers.\n///\n/// # Examples\n/// \n/// assert_eq!(sum(2, 3), 5);\n/// \npub fn sum(a: i32, b: i32) -> i32 { a + b }",
      "examples": [
        {
          "snippet": "//! Utilities for math operations.",
          "isCorrect": true
        },
        {
          "snippet": "// Utilities for math operations.",
          "isCorrect": false
        }
      ],
      "language": "rust",
      "uuid": "8e9f0a1b-2c3d-4e5f-9a0b-1c2d3e4f5a6b",
      "buckets": ["style-conventions", "readability-refactor", "docstring"],
      "scope": "file"
    },
    {
      "title": "Document safety, panics, and errors",
      "rule": "When a function is unsafe, may panic, or returns Result, include sections # Safety, # Panics, and/or error conditions in the docs.",
      "why_is_this_important": "Explicit contracts prevent undefined behavior and misuse.",
      "severity": "High",
      "bad_example": "/// Write to ptr.\npub unsafe fn write(ptr: *mut u8, v: u8) { ... }",
      "good_example": "/// Write a value to a raw pointer.\n///\n/// # Safety\n/// Caller must ensure ptr is valid for writes.\n///\n/// # Panics\n/// Panics if alignment is incorrect.\npub unsafe fn write(ptr: *mut u8, v: u8) { ... }",
      "examples": [
        {
          "snippet": "/// # Panics\n/// Panics if index out of bounds.",
          "isCorrect": true
        },
        {
          "snippet": "/// Might panic",
          "isCorrect": false
        }
      ],
      "language": "rust",
      "uuid": "f0a1b2c3-d4e5-46f7-98a0-b1c2d3e4f5a6",
      "buckets": ["readability-refactor", "maintainability", "docstring"],
      "scope": "file"
    },
    {
      "title": "Require an ADR for any architectural or cross-team decision",
      "rule": "For changes that affect architecture, data models, external APIs, security posture, deployment topology, or cost (>10%), create an ADR in docs/adr/ using the standard template (Context, Decision, Consequences) and link the PR and issue IDs.",
      "why_is_this_important": "ADR files in docs/adr/ capture the rationale behind impactful decisions so future contributors can understand trade-offs.",
      "severity": "Critical",
      "bad_example": "# Implement gRPC\n\n// Switched REST to gRPC. No doc.",
      "good_example": "# docs/adr/0007-adopt-grpc.md\n\n## Context\nHigh p99 latency on REST.\n\n## Decision\nAdopt gRPC for internal service-to-service calls.\n\n## Consequences\nUpdate gateway; monitor egress; PR #1234; Issue PROJ-56.",
      "examples": [
        {
          "snippet": "docs/adr/0007-adopt-grpc.md",
          "isCorrect": true
        },
        {
          "snippet": "README: 'we changed to gRPC' (no ADR, no issue/PR links)",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "a6f1f1e0-3a9a-4a5e-8c8c-1b5a3c31f9b2",
      "scope": "pull-request",
      "buckets": ["docs-adrs", "module-architecture", "api-contracts-versioning"]
    },
    {
      "title": "Use canonical ADR filenames and numbering",
      "rule": "Store decision records under docs/adr/ with zero-padded incremental numbering and a kebab-case title: docs/adr/NNNN-title.md (e.g., docs/adr/0001-choose-postgresql.md).",
      "why_is_this_important": "A predictable docs/adr/ layout enables discoverability and tooling to index ADRs reliably.",
      "severity": "High",
      "bad_example": "docs/ADR/ChooseDB.MD",
      "good_example": "docs/adr/0001-choose-postgresql.md",
      "examples": [
        {
          "snippet": "docs/adr/0010-enable-circuit-breakers.md",
          "isCorrect": true
        },
        {
          "snippet": "architecture/decisions/circuitBreakers.md",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "f3a5b2a1-2e6d-4f21-9a2d-7f2fb0c6c623",
      "buckets": ["docs-adrs", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Template must include Context, Decision, Consequences, and Status",
      "rule": "Every ADR must contain the sections: Context, Decision, Consequences, Status. Allowed Status values: proposed, accepted, deprecated, superseded.",
      "why_is_this_important": "Consistent sections make ADRs scannable and allow automation to validate lifecycle.",
      "severity": "High",
      "bad_example": "# ADR: Switch to Redis\n\nWe will use Redis.",
      "good_example": "# ADR: Switch to Redis\n\n## Status\naccepted\n\n## Context\nCache stampedes on DB.\n\n## Decision\nIntroduce Redis with TTLs and locks.\n\n## Consequences\nInfra cost; add metrics; runbooks.",
      "examples": [
        {
          "snippet": "## Status\naccepted",
          "isCorrect": true
        },
        {
          "snippet": "## Notes\nWe think Redis is nice",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "d8e0a4e9-8b7f-4f8e-9d2b-2c88d0b0a89e",
      "buckets": ["docs-adrs", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Link ADRs from PR descriptions and merge commits",
      "rule": "When a PR implements or changes a decision, include 'ADR: docs/adr/NNNN-title.md' in the PR description and reference it in the merge commit body.",
      "why_is_this_important": "Cross-linking PRs and docs/adr/ records keeps code and rationale synchronized.",
      "severity": "Medium",
      "bad_example": "PR body: 'Refactor caching' (no ADR link).",
      "good_example": "PR body: Implements ADR docs/adr/0009-cache-invalidation-strategy.md; closes PROJ-92.",
      "examples": [
        {
          "snippet": "ADR: docs/adr/0009-cache-invalidation-strategy.md",
          "isCorrect": true
        },
        {
          "snippet": "Implements caching (no ADR reference)",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "b9a66b3e-7f5c-4c3d-8e3b-2d1c4e2f6a77",
      "buckets": ["docs-adrs", "pr-hygiene", "maintainability"],
      "scope": "pull-request"
    },
    {
      "title": "Supersede instead of editing history",
      "rule": "Do not rewrite accepted ADRs. When reversing or replacing a decision, create a new ADR with Status: accepted and add 'Supersedes: NNNN' while marking the old ADR as 'Status: superseded by NNNN'.",
      "why_is_this_important": "Superseding preserves decision history and enables accurate audits.",
      "severity": "High",
      "bad_example": "Edit 0003-choose-mysql.md to say 'We chose Postgres' (history lost).",
      "good_example": "# docs/adr/0012-switch-to-postgres.md\nStatus: accepted\nSupersedes: 0003\n\n# docs/adr/0003-choose-mysql.md\nStatus: superseded by 0012",
      "examples": [
        {
          "snippet": "Supersedes: 0003",
          "isCorrect": true
        },
        {
          "snippet": "Edited prior ADR content to new decision",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "c5d5d6c7-1a2b-4e5f-8a9b-0c1d2e3f4a5b",
      "buckets": ["docs-adrs", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Reference external standards and benchmarks",
      "rule": "Where relevant, include links to RFCs, regulatory guidance, or benchmarks in the ADR (e.g., RFC 9110 for HTTP, PCI DSS sections), under a 'References' section.",
      "why_is_this_important": "Grounding decisions in standards improves rigor and onboarding.",
      "severity": "Medium",
      "bad_example": "Decision: 'Use 409 for conflicts' (no reference).",
      "good_example": "Decision: Use 409 for conflict per RFC 9110 §15.5.10.\n\nReferences:\n- https://www.rfc-editor.org/rfc/rfc9110",
      "examples": [
        {
          "snippet": "## References\n- RFC 9110 §15.5.10",
          "isCorrect": true
        },
        {
          "snippet": "No references provided for protocol choice",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "ee0f7b2c-2d6f-4f7b-bb6a-3f2a4d6c9e11",
      "buckets": ["docs-adrs", "api-conventions", "compliance-soc2-essentials"],
      "scope": "pull-request"
    },
    {
      "title": "Document measurable acceptance criteria",
      "rule": "Include clear, testable success metrics or SLOs in ADRs (e.g., p95 latency < 120ms, error rate < 0.1%) under a 'Measures of Success' section.",
      "why_is_this_important": "Explicit metrics connect architecture to outcomes and enable verification.",
      "severity": "Medium",
      "bad_example": "Decision: 'Make it faster' (no metric).",
      "good_example": "Measures of Success: p95 < 120ms; cache hit ratio > 80%; cost < $X/month.",
      "examples": [
        {
          "snippet": "## Measures of Success\np95 < 120ms",
          "isCorrect": true
        },
        {
          "snippet": "## Measures of Success\nTBD",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "51f2f8c1-0c7b-4f86-9b1d-8a6e9d1f2c34",
      "buckets": ["docs-adrs", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Capture security and privacy implications",
      "rule": "Add a 'Security & Privacy' section in ADRs addressing threat model impacts, secrets handling, data retention, and PII processing; link to relevant runbooks and DPA if applicable.",
      "why_is_this_important": "Documenting security/privacy consequences in ADRs reduces risk and speeds audits.",
      "severity": "High",
      "bad_example": "Decision to add analytics (no mention of PII or retention).",
      "good_example": "Security & Privacy: No raw PII logged; use KMS-managed keys; retain events 30 days; DPA clause 4.2 referenced.",
      "examples": [
        {
          "snippet": "## Security & Privacy\nPII minimized; keys via KMS",
          "isCorrect": true
        },
        {
          "snippet": "## Security & Privacy\nN/A",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "7e4d3c2b-8f9a-4a1b-b3c2-5d6e7f8a9b0c",
      "buckets": [
        "docs-adrs",
        "security-hardening",
        "privacy-pii",
        "secrets-credentials"
      ],
      "scope": "file"
    },
    {
      "title": "Declare rollout and migration plan",
      "rule": "Include a 'Rollout Plan' section with phases, feature flags, backout plan, and data migration steps; reference migration scripts and flag names.",
      "why_is_this_important": "Clear rollout details reduce production risk and align ops with design.",
      "severity": "High",
      "bad_example": "Decision: 'Migrate to v2 schema' (no plan).",
      "good_example": "Rollout Plan: enable flag feature.payment_v2 at 5% increments; run script db/migrations/2024_12_add_columns.sql; backout: revert to snapshot S-2024-12-01.",
      "examples": [
        {
          "snippet": "Feature flag: feature.payment_v2",
          "isCorrect": true
        },
        {
          "snippet": "Migration details: TBD",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "0b7b9d5a-3c6e-4f1a-b2a1-9e8f7d6c5b4a",
      "buckets": ["docs-adrs", "migrations-backward-compat"],
      "scope": "file"
    },
    {
      "title": "Record alternatives considered and trade-offs",
      "rule": "Add an 'Alternatives' section listing at least two plausible options with pros/cons and reasons for rejection.",
      "why_is_this_important": "Capturing alternatives prevents repeated debates and clarifies why the chosen path won.",
      "severity": "Medium",
      "bad_example": "We chose Kafka.",
      "good_example": "Alternatives: (1) Kafka: strong ordering, ops overhead; (2) SQS: simpler, limited ordering; Chosen: Kafka for exactly-once via transactions.",
      "examples": [
        {
          "snippet": "## Alternatives\n- Kafka\n- SQS",
          "isCorrect": true
        },
        {
          "snippet": "## Alternatives\nN/A",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "23d1b4c6-78a3-4cde-9f1a-2a3b4c5d6e7f",
      "buckets": ["docs-adrs", "duplication-complexity"],
      "scope": "file"
    },
    {
      "title": "Tie ADRs to versioning and deprecation notices",
      "rule": "For changes affecting public APIs or modules, include 'Versioning & Deprecation' with semantic version impact and deprecation timeline; link to CHANGELOG and deprecation notices.",
      "why_is_this_important": "Consumers need clear contracts; ADRs are the source of truth for version decisions.",
      "severity": "High",
      "bad_example": "Change error shape (no version bump mentioned).",
      "good_example": "Versioning & Deprecation: breaking change → major bump v3.0; deprecate v2 endpoints after 90 days; CHANGELOG #v3.0.",
      "examples": [
        {
          "snippet": "## Versioning & Deprecation\nmajor bump v3.0",
          "isCorrect": true
        },
        {
          "snippet": "## Versioning & Deprecation\nTBD",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "9c8b7a6d-5e4f-4d3c-9b2a-1a0b9c8d7e6f",
      "buckets": ["docs-adrs", "api-contracts-versioning", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Automate ADR linting in CI",
      "rule": "Add a CI job that validates docs/adr/ files: filename pattern, required sections, valid Status, presence of PR/issue links, and optional schema (YAML front matter).",
      "why_is_this_important": "CI checks keep ADR quality high and prevent drift.",
      "severity": "Medium",
      "bad_example": "Pipeline has no ADR validation.",
      "good_example": "jobs: adr-lint → validate docs/adr/.md; fail on missing 'Status' or broken links.",
      "examples": [
        {
          "snippet": "ci: adr-lint checks docs/adr/.md",
          "isCorrect": true
        },
        {
          "snippet": "No CI rule for ADRs",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "6f5e4d3c-2b1a-4a9c-8b7a-6c5d4e3f2a1b",
      "buckets": ["docs-adrs", "ci-cd-build-hygiene", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Maintain an ADR index",
      "rule": "Keep docs/adr/README.md updated with a table of ADRs (number, title, status, date). Update the index in the same PR that adds/changes an ADR.",
      "why_is_this_important": "An index provides a single entry point for newcomers and supports audits.",
      "severity": "Low",
      "bad_example": "No index; ADRs discovered by grep.",
      "good_example": "docs/adr/README.md\n| # | Title | Status | Date |\n|----|-------|--------|------|\n| 001 | choose-postgresql | accepted | 2025-03-12 |",
      "examples": [
        {
          "snippet": "docs/adr/README.md (index table)",
          "isCorrect": true
        },
        {
          "snippet": "Missing docs/adr/README.md",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "8a9b0c1d-2e3f-4a5b-9c8d-7e6f5a4b3c2d",
      "scope": "pull-request",
      "buckets": ["docs-adrs", "maintainability"]
    },
    {
      "title": "Emit tamper-evident audit logs with required fields",
      "rule": "Every security-relevant action must append to an immutable, append-only audit log with fields: timestamp (UTC ISO8601), actor.user_id, actor.role, action, resource.id, result, trace_id, ip, user_agent. Logs must be signed or stored in WORM/immutable storage and forwarded to a SIEM.",
      "why_is_this_important": "SOC 2 requires auditability and tamper evidence; consistent fields enable investigations and access reviews.",
      "severity": "High",
      "bad_example": "{ \"event\": \"changed_settings\" }",
      "good_example": "{ \"ts\":\"2025-08-28T18:30:00Z\",\"actor\":{\"user_id\":\"u_123\",\"role\":\"admin\"},\"action\":\"settings.update\",\"resource\":{\"id\":\"org_9\"},\"result\":\"success\",\"trace_id\":\"7f7c...\",\"ip\":\"203.0.113.10\",\"user_agent\":\"Chrome/139\" }",
      "examples": [
        {
          "snippet": "{\"action\":\"user.login\",\"trace_id\":\"abc\",\"result\":\"failure\"}",
          "isCorrect": true
        },
        {
          "snippet": "{\"action\":\"user.login\"}",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "0c2d3b3f-2a3f-4c1a-9f7e-9b8a6a1b2c3d",
      "buckets": ["compliance-soc2-essentials", "observability-logging"],
      "scope": "pull-request"
    },
    {
      "title": "Enforce TLS 1.2+ and HSTS on all external endpoints",
      "rule": "Public services must require TLSv1.2 or higher and set HSTS (max-age ≥ 15552000, includeSubDomains). Reject plaintext HTTP and weak ciphers; cookies must be Secure and HttpOnly with SameSite set.",
      "why_is_this_important": "Encryption in transit is a SOC 2 baseline control to protect confidentiality and integrity.",
      "severity": "Critical",
      "bad_example": "Response Header: Set-Cookie: sid=abc; HttpOnly\n(no HSTS; accepts HTTP)",
      "good_example": "Response Headers:\nStrict-Transport-Security: max-age=31536000; includeSubDomains\nSet-Cookie: sid=abc; Secure; HttpOnly; SameSite=Lax",
      "examples": [
        {
          "snippet": "Strict-Transport-Security: max-age=31536000; includeSubDomains",
          "isCorrect": true
        },
        {
          "snippet": "Strict-Transport-Security: max-age=0",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "5c1b48e9-7a3f-40f2-b2f3-3e5fbc6a4f11",
      "buckets": [
        "compliance-soc2-essentials",
        "security-hardening",
        "api-conventions"
      ],
      "scope": "file"
    },
    {
      "title": "Encrypt sensitive data at rest with KMS and rotate keys",
      "rule": "Use envelope encryption (AES-256-GCM) with cloud KMS-managed CMKs for databases, object storage, and backups. Rotate CMKs at least annually and rotate DEKs per object/file.",
      "why_is_this_important": "SOC 2 expects strong encryption at rest and periodic key rotation to reduce blast radius.",
      "severity": "Critical",
      "bad_example": "# store raw PII\ncustomer.ssn = \"123-45-6789\"",
      "good_example": "# store ciphertext with envelope encryption\ncustomer.ssn_ct = kms.encrypt(aes_gcm(generate_dek()), ssn)",
      "examples": [
        {
          "snippet": "kms.decrypt(ciphertext)",
          "isCorrect": true
        },
        {
          "snippet": "db.insert({ ssn: plain_text })",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "e2b2a6a1-5b1d-4d2b-8c7e-1f3a2b2c4d5e",
      "buckets": [
        "compliance-soc2-essentials",
        "secrets-credentials",
        "security-hardening"
      ],
      "scope": "file"
    },
    {
      "title": "Implement RBAC with least privilege and deny-by-default",
      "rule": "Authorize every request by role and resource scope. Policies must default-deny and require explicit allow; privileged roles (admin, auditor) must be rare and reviewed quarterly.",
      "why_is_this_important": "Least privilege and access reviews are core SOC 2 controls to limit unauthorized access.",
      "severity": "High",
      "bad_example": "if (user.isLoggedIn) return allow();",
      "good_example": "if (policy.allows(user.role, \"org.read\", resource_id)) return allow(); else return deny();",
      "examples": [
        {
          "snippet": "allow = policy.allows(role, \"billing.read\", org)",
          "isCorrect": true
        },
        {
          "snippet": "allow = user.authenticated",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "4a6f8d1c-6c9a-4b3b-93d8-3b7a0d1e2f33",
      "buckets": [
        "compliance-soc2-essentials",
        "security-hardening",
        "module-architecture"
      ],
      "scope": "file"
    },
    {
      "title": "Use a secrets manager and 90-day rotation policy",
      "rule": "All credentials (API keys, DB passwords, tokens) must be stored in a secrets manager with automatic rotation ≤ 90 days; forbid hardcoded or .env-committed secrets via CI checks.",
      "why_is_this_important": "SOC 2 requires secure secret handling and timely rotation to reduce exposure.",
      "severity": "Critical",
      "bad_example": "DATABASE_URL=postgres://user:plainpass@db/prod",
      "good_example": "DATABASE_URL=secrets.get(\"prod/db/url\") # rotated by policy",
      "examples": [
        {
          "snippet": "secrets.get(\"kafka/password\")",
          "isCorrect": true
        },
        {
          "snippet": "const PWD = \"SuperSecret123!\"",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "8f8b2a7e-5d9a-4d0a-8c22-1a2b3c4d5e6f",
      "buckets": [
        "compliance-soc2-essentials",
        "secrets-credentials",
        "ci-cd-build-hygiene"
      ],
      "scope": "file"
    },
    {
      "title": "Classify data and enforce retention & deletion SLAs",
      "rule": "Tag records by data_class (PII, telemetry, auth) and enforce retention (e.g., PII ≤ 365 days unless legal hold). Provide scheduled deletion jobs and audit log entries.",
      "why_is_this_important": "Data minimization and lifecycle controls support SOC 2 privacy and confidentiality criteria.",
      "severity": "High",
      "bad_example": "DELETE FROM events WHERE created_at < NOW() - INTERVAL '10 years';",
      "good_example": "DELETE FROM events WHERE data_class='telemetry' AND created_at < NOW() - INTERVAL '30 days';",
      "examples": [
        {
          "snippet": "UPDATE users SET deleted_at=NOW() WHERE id=$1",
          "isCorrect": true
        },
        {
          "snippet": "DELETE FROM users;",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "bc7a0b92-4b7e-4e86-93c7-5f0f1e9a1c2b",
      "buckets": ["compliance-soc2-essentials", "privacy-pii", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Gate production changes with tickets and approvals",
      "rule": "All production deployments must reference a change ticket ID, peer approval, and linked rollout plan; write the change_id to the audit log on deploy.",
      "why_is_this_important": "Change management with approvals is required for SOC 2 to ensure controlled releases.",
      "severity": "Medium",
      "bad_example": "# deploy.sh\nkubectl apply -f prod.yaml",
      "good_example": "# deploy.sh\nrequire CHANGE_ID\nlog_audit(action=\"deploy.start\", change_id=CHANGE_ID)\napply_release()\nlog_audit(action=\"deploy.finish\", change_id=CHANGE_ID, result=\"success\")",
      "examples": [
        {
          "snippet": "export CHANGE_ID=CHG-1021",
          "isCorrect": true
        },
        {
          "snippet": "unset CHANGE_ID && deploy",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "a1b2c3d4-5678-4a9b-8cde-0f1a2b3c4d5e",
      "buckets": ["compliance-soc2-essentials", "pr-hygiene", "docs-adrs"],
      "scope": "pull-request"
    },
    {
      "title": "Generate and verify SBOM; fail build on critical CVEs",
      "rule": "Produce an SBOM (e.g., SPDX/CycloneDX) during CI and block releases if SCA finds CVEs ≥ High severity or disallowed licenses.",
      "why_is_this_important": "Supply chain visibility and vulnerability remediation are SOC 2 expectations.",
      "severity": "High",
      "bad_example": "ci: skip dependency scan",
      "good_example": "ci: sbom > build.sbom && sca --fail-on-severity High --sbom build.sbom",
      "examples": [
        {
          "snippet": "sca --fail-on-severity High",
          "isCorrect": true
        },
        {
          "snippet": "sca --ignore-all",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "d3e5f7a9-1b2c-4d5e-8f90-1a2b3c4d5e6a",
      "buckets": [
        "compliance-soc2-essentials",
        "dependency-supply-chain",
        "ci-cd-build-hygiene"
      ],
      "scope": "file"
    },
    {
      "title": "Backups encrypted, tested, and monitored for RPO/RTO",
      "rule": "Create daily encrypted backups (KMS keys) with retention and geo-redundancy; run quarterly restore tests and record results in the audit log.",
      "why_is_this_important": "Availability and recoverability are part of SOC 2 trust criteria.",
      "severity": "High",
      "bad_example": "# no restore test documented",
      "good_example": "# restore_test.sh\nrestore db@backup_2025_08_01 && log_audit(action=\"backup.restore_test\", result=\"success\")",
      "examples": [
        {
          "snippet": "log_audit(\"backup.restore_test\",\"success\")",
          "isCorrect": true
        },
        {
          "snippet": "echo \"restores seem fine\"",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "7b8c9d0e-1f2a-4b3c-9d8e-0f1a2b3c4d6e",
      "buckets": [
        "compliance-soc2-essentials",
        "migrations-backward-compat",
        "resilience-retries-idempotency"
      ],
      "scope": "file"
    },
    {
      "title": "Mask PII and secrets in logs",
      "rule": "Before emitting logs, detect and redact PII and secret patterns (emails, tokens, keys). Replace values with consistent hashes or tokens; never log full credentials.",
      "why_is_this_important": "Logs often leave systems; SOC 2 requires confidentiality of sensitive data.",
      "severity": "High",
      "bad_example": "{ \"email\":\"alice@example.com\",\"token\":\"Bearer eyJ...\" }",
      "good_example": "{ \"email_hash\":\"sha256:ab12..\",\"token\":\"REDACTED\" }",
      "examples": [
        {
          "snippet": "log.info({ email_hash: hash(email) })",
          "isCorrect": true
        },
        {
          "snippet": "log.info({ email })",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "f1e2d3c4-b5a6-4c7d-8e9f-0123456789ab",
      "buckets": [
        "compliance-soc2-essentials",
        "privacy-pii",
        "observability-logging"
      ],
      "scope": "file"
    },
    {
      "title": "Harden session management with idle and absolute timeouts",
      "rule": "Set session idle timeout ≤ 15 minutes and absolute timeout ≤ 12 hours; cookies must be Secure, HttpOnly, and SameSite=Lax or Strict; revoke sessions on password change.",
      "why_is_this_important": "Strong session controls reduce unauthorized access and meet SOC 2 security criteria.",
      "severity": "High",
      "bad_example": "Set-Cookie: sid=abc",
      "good_example": "Set-Cookie: sid=abc; Secure; HttpOnly; SameSite=Strict",
      "examples": [
        {
          "snippet": "session.setIdleTimeout(15 * MINUTE)",
          "isCorrect": true
        },
        {
          "snippet": "session.setIdleTimeout(0)",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "11223344-5566-4777-8899-aabbccddeeff",
      "buckets": [
        "compliance-soc2-essentials",
        "security-hardening",
        "api-conventions"
      ],
      "scope": "file"
    },
    {
      "title": "Require step-up MFA for privileged operations",
      "rule": "Actions like role changes, key rotations, and exports of PII require MFA re-authentication within the last 5 minutes; record mfa_verified_at in the audit log.",
      "why_is_this_important": "Step-up auth reduces risk of session hijack and meets SOC 2 access control expectations.",
      "severity": "High",
      "bad_example": "if (user.role==\"admin\") perform_export();",
      "good_example": "if (mfa.isFresh(user, 300)) perform_export(); else prompt_mfa();",
      "examples": [
        {
          "snippet": "requireFreshMFA(300)",
          "isCorrect": true
        },
        {
          "snippet": "if (isAdmin) allow()",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "aa98b07b-6e84-4b1a-9f3e-0c7a2f9b1d2c",
      "buckets": ["compliance-soc2-essentials", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Standardize incident response workflow and postmortems",
      "rule": "On Sev1/Sev2 incidents, capture timeline, root cause, remediation, and owner in a postmortem within 5 business days; link incident_id in all related commits and changes.",
      "why_is_this_important": "Consistent IR improves resilience and evidences SOC 2 operational controls.",
      "severity": "Medium",
      "bad_example": "# incident resolved, no record",
      "good_example": "{ \"incident_id\":\"INC-2042\",\"severity\":\"Sev1\",\"owner\":\"oncall\",\"rca\":\"misconfig\",\"fix\":\"reverted\",\"lessons\":[\"add config check\"] }",
      "examples": [
        {
          "snippet": "git commit -m \"INC-2042: add config check\"",
          "isCorrect": true
        },
        {
          "snippet": "git commit -m \"quick fix\"",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "9f3d2c1b-7a6e-4d5c-8b9a-0e1f2a3b4c5d",
      "buckets": ["compliance-soc2-essentials", "docs-adrs", "maintainability"],
      "scope": "pull-request"
    },
    {
      "title": "Enforce JIT access for production with break-glass logging",
      "rule": "Grant production access just-in-time via approved requests with scoped durations; break-glass access must trigger alerts and expanded audit logging.",
      "why_is_this_important": "Reduces standing privileges and provides evidence for access reviews in SOC 2.",
      "severity": "High",
      "bad_example": "prod_admins = [\"alice\",\"bob\"] # permanent",
      "good_example": "grant_access(user,\"prod.read\", duration=3600); log_audit(action=\"access.grant\",scope=\"prod.read\")",
      "examples": [
        {
          "snippet": "grant_access(u, \"prod.write\", 1800)",
          "isCorrect": true
        },
        {
          "snippet": "grant_access(u, \"prod.write\", 0)",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "6a5b4c3d-2e1f-4a6b-9c8d-7e6f5a4b3c2d",
      "buckets": ["compliance-soc2-essentials", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Version and deprecate APIs with logged contract changes",
      "rule": "Expose explicit API versions (e.g., v1, v2). Breaking changes require a deprecation window and a CHANGELOG entry; log api_version in requests for traceability.",
      "why_is_this_important": "Controlled change and traceability support SOC 2 availability and integrity.",
      "severity": "Medium",
      "bad_example": "POST /users # silently changed schema",
      "good_example": "POST /v2/users # v2 with contract change; v1 remains until 2026-01-01",
      "examples": [
        {
          "snippet": "req.log({ api_version: \"v1\" })",
          "isCorrect": true
        },
        {
          "snippet": "req.log({})",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "c1d2e3f4-5a6b-4c7d-8e9f-0a1b2c3d4e5f",
      "buckets": ["compliance-soc2-essentials", "api-contracts-versioning"],
      "scope": "file"
    },
    {
      "title": "Define data export controls and watermarking",
      "rule": "All bulk exports of PII require approval, step-up MFA, rate limits, and watermarking of files with requestor and timestamp; record export_id in the audit log.",
      "why_is_this_important": "Controls on data exfiltration are expected for SOC 2 confidentiality.",
      "severity": "High",
      "bad_example": "GET /export/users.csv # no auth, no logging",
      "good_example": "POST /v1/exports/users # approval + MFA; file includes footer: 'Requested by u_123 @ 2025-08-28'",
      "examples": [
        {
          "snippet": "log_audit({ action:\"export.create\", export_id })",
          "isCorrect": true
        },
        {
          "snippet": "download(\"users.csv\")",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "efab1234-5678-4321-9abc-def012345678",
      "buckets": [
        "compliance-soc2-essentials",
        "privacy-pii",
        "security-hardening"
      ],
      "scope": "file"
    },
    {
      "title": "Define change freezes and emergency override protocol",
      "rule": "Establish maintenance windows and freeze periods; emergency overrides require incident_id, approver, and post-facto review logged in the audit trail.",
      "why_is_this_important": "Controlled changes maintain availability and provide SOC 2 evidence.",
      "severity": "Medium",
      "bad_example": "hotfix deployed during peak without record",
      "good_example": "override(change_id, incident_id, approver) && log_audit(\"change.override\", incident_id)",
      "examples": [
        {
          "snippet": "log_audit(\"change.override\",\"INC-9\")",
          "isCorrect": true
        },
        {
          "snippet": "override()",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "1a3c5e7g-9h2i-4j6k-8l0m-1n2o3p4q5r6s",
      "buckets": ["compliance-soc2-essentials", "ci-cd-build-hygiene"],
      "scope": "file"
    },
    {
      "title": "Enforce HSTS and secure cookies in Express",
      "rule": "Use helmet to set HSTS and configure cookies with Secure, HttpOnly, and SameSite. Reject HTTP by redirecting to HTTPS.",
      "why_is_this_important": "TLS and secure session cookies meet SOC 2 encryption-in-transit expectations.",
      "severity": "High",
      "bad_example": "app.use((req,res,next)=>next()); // no headers",
      "good_example": "app.use(require('helmet')({ hsts: { maxAge: 31536000, includeSubDomains: true } }));\nres.cookie('sid', v, { secure:true, httpOnly:true, sameSite:'lax' });",
      "examples": [
        {
          "snippet": "app.use(helmet())",
          "isCorrect": true
        },
        {
          "snippet": "res.cookie('sid', v)",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "uuid": "ab12cd34-ef56-47a8-9b01-23456789abcd",
      "buckets": [
        "compliance-soc2-essentials",
        "security-hardening",
        "api-conventions"
      ],
      "scope": "file"
    },
    {
      "title": "Structured audit log middleware with trace IDs",
      "rule": "Attach a trace_id (e.g., from request header or generated UUID) and emit structured JSON logs for login, role change, and data export routes.",
      "why_is_this_important": "Traceable actions enable SOC 2 audits and forensic investigations.",
      "severity": "High",
      "bad_example": "console.log('user logged in')",
      "good_example": "logger.info({ ts:new Date().toISOString(), action:'auth.login', user_id:req.user.id, trace_id:req.id })",
      "examples": [
        {
          "snippet": "logger.info({ action:'role.change', trace_id })",
          "isCorrect": true
        },
        {
          "snippet": "console.log('role changed')",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "uuid": "0de1f2a3-b4c5-46d7-98e9-0f1a2b3c4d6e",
      "buckets": ["compliance-soc2-essentials", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Require TLSv1.2+ and secure cookies",
      "rule": "Configure http.Server with tls.Config{MinVersion: tls.VersionTLS12} and set cookies with Secure, HttpOnly, SameSite.",
      "why_is_this_important": "Strong TLS and session protections align with SOC 2 encryption controls.",
      "severity": "High",
      "bad_example": "srv := &http.Server{Addr:\":443\"} // default TLS",
      "good_example": "srv := &http.Server{TLSConfig: &tls.Config{MinVersion: tls.VersionTLS12}};\nhttp.SetCookie(w, &http.Cookie{Name:\"sid\", Secure:true, HttpOnly:true, SameSite:http.SameSiteLaxMode})",
      "examples": [
        {
          "snippet": "cfg := &tls.Config{MinVersion: tls.VersionTLS12}",
          "isCorrect": true
        },
        {
          "snippet": "cfg := &tls.Config{MinVersion: 0}",
          "isCorrect": false
        }
      ],
      "language": "go",
      "uuid": "7a6b5c4d-3e2f-41a0-9b8c-7d6e5f4a3b2c",
      "buckets": ["compliance-soc2-essentials", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Redact PII with log wrappers",
      "rule": "Wrap logger to filter emails and tokens using regex before logging; include trace_id in every entry.",
      "why_is_this_important": "Prevents leakage of sensitive data and improves audit quality for SOC 2.",
      "severity": "Medium",
      "bad_example": "log.Printf(\"login %s token=%s\", email, token)",
      "good_example": "logger.Info(\"auth.login\", zap.String(\"email_hash\", hash(email)), zap.String(\"trace_id\", tid))",
      "examples": [
        {
          "snippet": "logger.Info(\"export\", zap.String(\"trace_id\", tid))",
          "isCorrect": true
        },
        {
          "snippet": "log.Println(email)",
          "isCorrect": false
        }
      ],
      "language": "go",
      "uuid": "39f1a0d2-6c7b-4a9e-8f0a-1b2c3d4e5f60",
      "buckets": [
        "compliance-soc2-essentials",
        "privacy-pii",
        "observability-logging"
      ],
      "scope": "file"
    },
    {
      "title": "Enforce HTTPS, HSTS, and secure sessions",
      "rule": "Force HTTPS via middleware, set HSTS, and configure session cookies with secure=true, http_only=true, same_site=lax or strict in config/session.php.",
      "why_is_this_important": "Meets SOC 2 encryption-in-transit and session hardening requirements.",
      "severity": "High",
      "bad_example": "$response->header('Set-Cookie','sid=1');",
      "good_example": "config(['session.secure'=>true,'session.http_only'=>true,'session.same_site'=>'lax']);",
      "examples": [
        {
          "snippet": "URL::forceScheme('https')",
          "isCorrect": true
        },
        {
          "snippet": "config(['session.secure'=>false])",
          "isCorrect": false
        }
      ],
      "language": "php",
      "uuid": "f0e1d2c3-b4a5-46c7-98d9-0a1b2c3d4e5f",
      "buckets": [
        "compliance-soc2-essentials",
        "security-hardening",
        "api-conventions"
      ],
      "scope": "file"
    },
    {
      "title": "Filter sensitive parameters from logs",
      "rule": "Use $dontFlash in app/Http/Middleware/TrimStrings.php or logging processors to redact 'password', 'token', 'ssn', and emails.",
      "why_is_this_important": "Controls leakage of PII/secrets in logs for SOC 2 confidentiality.",
      "severity": "Medium",
      "bad_example": "Log::info('login', ['email'=>$email,'password'=>$pwd]);",
      "good_example": "protected $dontFlash = ['password','password_confirmation','token','email'];",
      "examples": [
        {
          "snippet": "Log::info('role.change', ['user_id'=>$id])",
          "isCorrect": true
        },
        {
          "snippet": "Log::info('login', ['email'=>$email])",
          "isCorrect": false
        }
      ],
      "language": "php",
      "uuid": "1b2a3c4d-5e6f-4789-9a0b-c1d2e3f4a5b6",
      "buckets": [
        "compliance-soc2-essentials",
        "privacy-pii",
        "observability-logging"
      ],
      "scope": "file"
    },
    {
      "title": "force_ssl and parameter filtering",
      "rule": "Enable config.force_ssl = true; add filter_parameters to redact PII and secrets; use secure_same_site for cookies.",
      "why_is_this_important": "Meets SOC 2 transport security and log hygiene expectations.",
      "severity": "High",
      "bad_example": "Rails.logger.info(\"token=#{token}\")",
      "good_example": "Rails.application.config.filter_parameters += [:password,:token,:email]",
      "examples": [
        {
          "snippet": "Rails.application.config.force_ssl = true",
          "isCorrect": true
        },
        {
          "snippet": "Rails.application.config.force_ssl = false",
          "isCorrect": false
        }
      ],
      "language": "ruby",
      "uuid": "b6a5c4d3-e2f1-40a9-8b7c-6d5e4f3a2b1c",
      "buckets": [
        "compliance-soc2-essentials",
        "security-hardening",
        "privacy-pii"
      ],
      "scope": "file"
    },
    {
      "title": "Structured audit events",
      "rule": "Emit JSON audit events via ActiveSupport::Notifications with user_id, action, resource_id, and request_id.",
      "why_is_this_important": "Structured events improve SOC 2 auditability and incident response.",
      "severity": "Medium",
      "bad_example": "Rails.logger.info('user updated')",
      "good_example": "ActiveSupport::Notifications.instrument('audit', {user_id:u.id, action:'user.update', resource_id:u.id, request_id:req.request_id})",
      "examples": [
        {
          "snippet": "ActiveSupport::Notifications.instrument('audit', {action:'login'})",
          "isCorrect": true
        },
        {
          "snippet": "Rails.logger.info('login')",
          "isCorrect": false
        }
      ],
      "language": "ruby",
      "uuid": "c7d8e9f0-a1b2-43c4-95d6-e7f8a9b0c1d2",
      "buckets": ["compliance-soc2-essentials", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Enforce HTTPS, HSTS, and session policy",
      "rule": "Use Spring Security to require HTTPS, enable HSTS, set session fixation protection, and configure SameSite, Secure, HttpOnly cookies.",
      "why_is_this_important": "Aligns with SOC 2 encryption and session security.",
      "severity": "High",
      "bad_example": "@Bean SecurityFilterChain f(HttpSecurity http) throws Exception { return http.build(); }",
      "good_example": "@Bean SecurityFilterChain f(HttpSecurity http) throws Exception { http.requiresChannel(c->c.anyRequest().requiresSecure()).headers(h->h.httpStrictTransportSecurity().includeSubDomains(true).maxAgeInSeconds(31536000)); return http.build(); }",
      "examples": [
        {
          "snippet": "http.requiresChannel(c->c.anyRequest().requiresSecure())",
          "isCorrect": true
        },
        {
          "snippet": "http.requiresChannel(c->c.anyRequest().requiresInsecure())",
          "isCorrect": false
        }
      ],
      "language": "java",
      "uuid": "de3c2b1a-9f8e-4d7c-b6a5-4c3b2a1f0e9d",
      "buckets": ["compliance-soc2-essentials", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Audit logging with MDC trace IDs",
      "rule": "Populate MDC with userId and traceId; include them in log pattern; log security events as JSON.",
      "why_is_this_important": "Consistent identifiers support SOC 2 investigations.",
      "severity": "Medium",
      "bad_example": "log.info(\"login ok\")",
      "good_example": "MDC.put(\"userId\", uid); MDC.put(\"traceId\", tid); log.info(\"{\"action\":\"auth.login\",\"result\":\"success\"}\");",
      "examples": [
        {
          "snippet": "MDC.put(\"traceId\", tid)",
          "isCorrect": true
        },
        {
          "snippet": "MDC.clear()",
          "isCorrect": false
        }
      ],
      "language": "java",
      "uuid": "f9e8d7c6-b5a4-43b2-91a0-8f7e6d5c4b3a",
      "buckets": ["compliance-soc2-essentials", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Require HTTPS and HSTS with Data Protection keys",
      "rule": "Use app.UseHsts(); app.UseHttpsRedirection(); store DataProtection keys in Azure Key Vault or KMS with rotation.",
      "why_is_this_important": "TLS and managed keys satisfy SOC 2 encryption requirements.",
      "severity": "High",
      "bad_example": "app.UseRouting(); // no HTTPS or HSTS",
      "good_example": "app.UseHsts(); app.UseHttpsRedirection(); services.AddDataProtection().PersistKeysToAzureBlobStorage(blob) /* or KeyVault /;",
      "examples": [
        {
          "snippet": "app.UseHsts();",
          "isCorrect": true
        },
        {
          "snippet": "app.UseDeveloperExceptionPage(); // in production",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "uuid": "0a9b8c7d-6e5f-4a3b-92c1-b0a9c8d7e6f5",
      "buckets": [
        "compliance-soc2-essentials",
        "security-hardening",
        "secrets-credentials"
      ],
      "scope": "file"
    },
    {
      "title": "Structured audit events with ILogger",
      "rule": "Log security events via ILogger with properties {Action, UserId, ResourceId, Result, TraceId}; configure sink to JSON and send to SIEM.",
      "why_is_this_important": "Structured logs are evidence for SOC 2.",
      "severity": "Medium",
      "bad_example": "logger.LogInformation(\"user updated\");",
      "good_example": "logger.LogInformation(\"{Action} {UserId} {ResourceId} {Result} {TraceId}\", \"user.update\", uid, rid, \"success\", tid);",
      "examples": [
        {
          "snippet": "logger.LogInformation(\"{Action}\", \"auth.login\")",
          "isCorrect": true
        },
        {
          "snippet": "logger.LogInformation(\"login\")",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "uuid": "123e4567-e89b-12d3-a456-426614174000",
      "buckets": ["compliance-soc2-essentials", "observability-logging"],
      "scope": "file"
    },
    {
      "title": "Security headers and request logging",
      "rule": "Add middleware to set HSTS, X-Content-Type-Options, and secure cookies; log JSON with actor and trace_id for auth and admin routes.",
      "why_is_this_important": "Hardening and auditing align with SOC 2 security criteria.",
      "severity": "Medium",
      "bad_example": "handler = (req) => Response.ok('ok');",
      "good_example": "final handler = const Pipeline().addMiddleware(securityHeaders()).addMiddleware(auditLogs()).addHandler(app);",
      "examples": [
        {
          "snippet": "response.change(headers:{'Strict-Transport-Security':'max-age=31536000'})",
          "isCorrect": true
        },
        {
          "snippet": "response.change(headers:{})",
          "isCorrect": false
        }
      ],
      "language": "dart",
      "uuid": "b1c2d3e4-f5a6-47b8-9c0d-e1f2a3b4c5d6",
      "buckets": [
        "compliance-soc2-essentials",
        "security-hardening",
        "observability-logging"
      ],
      "scope": "file"
    },
    {
      "title": "Enforce HTTPS and audit log calls",
      "rule": "Install HSTS in Ktor, require HTTPS redirects, and emit structured audit events for role changes with callId/traceId.",
      "why_is_this_important": "Transport security and auditable changes are SOC 2 essentials.",
      "severity": "High",
      "bad_example": "install(HSTS) { maxAge = 0 }",
      "good_example": "install(HSTS) { includeSubDomains = true; maxAgeInSeconds = 31536000 }\ncall.application.environment.log.info(\"{\"action\":\"role.change\",\"user\":\"$uid\",\"trace_id\":\"${call.callId}\"}\")",
      "examples": [
        {
          "snippet": "install(HSTS) { maxAgeInSeconds = 31536000 }",
          "isCorrect": true
        },
        {
          "snippet": "install(HSTS) { maxAgeInSeconds = 0 }",
          "isCorrect": false
        }
      ],
      "language": "kotlin",
      "uuid": "d4e5f6a7-b8c9-4d0e-8f1a-2b3c4d5e6f7a",
      "buckets": ["compliance-soc2-essentials", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Add TLS and JSON audit middleware",
      "rule": "Serve via rustls with TLS1.2+ and add middleware to log JSON audit events with user_id and request_id; never log raw tokens.",
      "why_is_this_important": "Meets SOC 2 encryption and logging controls.",
      "severity": "High",
      "bad_example": "HttpServer::new(|| App::new().route(\"/\", web::get().to(index)))",
      "good_example": "HttpServer::new(|| App::new().wrap(Audit)).bind_rustls(\"0.0.0.0:443\", cfg_with_tls12())?",
      "examples": [
        {
          "snippet": "info!(\"action\"=\"auth.login\", \"trace_id\"=%tid)",
          "isCorrect": true
        },
        {
          "snippet": "println!(\"login\")",
          "isCorrect": false
        }
      ],
      "language": "rust",
      "uuid": "e5f6a7b8-c9d0-41e2-83f4-a5b6c7d8e9f0",
      "buckets": [
        "compliance-soc2-essentials",
        "security-hardening",
        "observability-logging"
      ],
      "scope": "file"
    },
    {
      "title": "Propagate context with timeouts for external calls",
      "rule": "Use context.WithTimeout for HTTP and DB calls; log request deadlines and results; treat timeouts as audit-worthy events.",
      "why_is_this_important": "Controlled timeouts improve availability and detectability, aligning with SOC 2 availability criteria.",
      "severity": "Medium",
      "bad_example": "resp, _ := http.DefaultClient.Get(url)",
      "good_example": "ctx, cancel := context.WithTimeout(r.Context(), 5time.Second); defer cancel(); req = req.WithContext(ctx); resp, err := client.Do(req)",
      "examples": [
        {
          "snippet": "context.WithTimeout(ctx, 5time.Second)",
          "isCorrect": true
        },
        {
          "snippet": "context.Background()",
          "isCorrect": false
        }
      ],
      "language": "go",
      "uuid": "0b1c2d3e-4f5a-46b7-98c9-0d1e2f3a4b5c",
      "buckets": ["compliance-soc2-essentials", "resilience-retries-idempotency"],
      "scope": "file"
    },
    {
      "title": "Block hardcoded secrets in CI with regex & entropy",
      "rule": "Add a CI step that fails builds if secret patterns (JWT, AWS keys) or high-entropy strings are detected in diffs.",
      "why_is_this_important": "Prevents credential leakage and supports SOC 2 secure development practices.",
      "severity": "High",
      "bad_example": "// AWS_SECRET=AKIA... in code",
      "good_example": "run('gitleaks detect --redact'); if (found) fail_build();",
      "examples": [
        {
          "snippet": "gitleaks detect --redact",
          "isCorrect": true
        },
        {
          "snippet": "gitleaks detect --no-fail",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "uuid": "6f5e4d3c-2b1a-4c0d-9e8f-7a6b5c4d3e2f",
      "buckets": [
        "compliance-soc2-essentials",
        "secrets-credentials",
        "ci-cd-build-hygiene"
      ],
      "scope": "file"
    },
    {
      "title": "Monolog processors to redact PII",
      "rule": "Configure Monolog to add a processor that redacts emails, tokens, and SSNs before writing logs; include request_id.",
      "why_is_this_important": "PII redaction in logs is essential for SOC 2 confidentiality.",
      "severity": "Medium",
      "bad_example": "logger.info('login', ['email'=>$email])",
      "good_example": "$logger->pushProcessor(fn ($rec) => redact($rec) + ['request_id'=>uuid()]);",
      "examples": [
        {
          "snippet": "$logger->pushProcessor('redact')",
          "isCorrect": true
        },
        {
          "snippet": "$logger->info($email)",
          "isCorrect": false
        }
      ],
      "language": "php",
      "uuid": "e0d1c2b3-a4f5-46d7-98e9-f0a1b2c3d4e5",
      "buckets": [
        "compliance-soc2-essentials",
        "privacy-pii",
        "observability-logging"
      ],
      "scope": "file"
    },
    {
      "title": "Devise + MFA for privileged actions",
      "rule": "Require TOTP or WebAuthn MFA for admin areas; verify mfa_verified_at timestamp before sensitive routes.",
      "why_is_this_important": "Step-up authentication supports SOC 2 access control.",
      "severity": "High",
      "bad_example": "before_action :require_admin",
      "good_example": "before_action :require_admin; before_action :require_fresh_mfa, only: [:export, :rotate_keys]",
      "examples": [
        {
          "snippet": "session[:mfa_verified_at] = Time.now",
          "isCorrect": true
        },
        {
          "snippet": "session[:mfa_verified_at] = nil",
          "isCorrect": false
        }
      ],
      "language": "ruby",
      "uuid": "1c2d3e4f-5a6b-47c8-9d0e-1f2a3b4c5d6e",
      "buckets": ["compliance-soc2-essentials", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Encrypt fields at application layer before persistence",
      "rule": "Use AES-GCM with keys from KMS to encrypt sensitive columns (e.g., SSN) before saving; store nonce and auth tag; never rely solely on disk encryption.",
      "why_is_this_important": "Defense-in-depth encryption supports SOC 2 confidentiality.",
      "severity": "High",
      "bad_example": "user.setSsn(\"123-45-6789\"); repo.save(user);",
      "good_example": "user.setSsnCipher(crypto.encrypt(ssn)); repo.save(user);",
      "examples": [
        {
          "snippet": "crypto.encrypt(ssn)",
          "isCorrect": true
        },
        {
          "snippet": "repo.save(ssn)",
          "isCorrect": false
        }
      ],
      "language": "java",
      "uuid": "2d3e4f5a-6b7c-48d9-90ea-1b2c3d4e5f6a",
      "buckets": [
        "compliance-soc2-essentials",
        "secrets-credentials",
        "security-hardening"
      ],
      "scope": "file"
    },
    {
      "title": "Cookie policy with SameSite and Secure defaults",
      "rule": "Configure CookiePolicyOptions to enforce SameSite=Lax or Strict, HttpOnly, and Secure for all auth cookies.",
      "why_is_this_important": "Proper cookie settings reduce session attacks and align with SOC 2.",
      "severity": "Medium",
      "bad_example": "options.MinimumSameSitePolicy = SameSiteMode.None;",
      "good_example": "options.MinimumSameSitePolicy = SameSiteMode.Lax; app.UseCookiePolicy(options);",
      "examples": [
        {
          "snippet": "options.HttpOnly = HttpOnlyPolicy.Always;",
          "isCorrect": true
        },
        {
          "snippet": "options.Secure = CookieSecurePolicy.None;",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "uuid": "3e4f5a6b-7c8d-49e0-a1b2-3c4d5e6f7a8b",
      "buckets": [
        "compliance-soc2-essentials",
        "security-hardening",
        "api-conventions"
      ],
      "scope": "file"
    },
    {
      "title": "Mask tokens before logging HTTP requests",
      "rule": "Intercept Authorization headers and redact bearer/JWT values; attach requestId to every log line.",
      "why_is_this_important": "Protects secrets in transit logs and supports traceability for SOC 2.",
      "severity": "Medium",
      "bad_example": "print(request.headers['Authorization']);",
      "good_example": "final hdr = request.headers['Authorization']; log({'auth':'REDACTED','requestId':rid});",
      "examples": [
        {
          "snippet": "log({'trace_id': rid})",
          "isCorrect": true
        },
        {
          "snippet": "log({'Authorization': hdr})",
          "isCorrect": false
        }
      ],
      "language": "dart",
      "uuid": "4f5a6b7c-8d9e-401a-b2c3-d4e5f6a7b8c9",
      "buckets": [
        "compliance-soc2-essentials",
        "privacy-pii",
        "observability-logging"
      ],
      "scope": "file"
    },
    {
      "title": "Encrypt secrets at rest with KMS client",
      "rule": "Use a KMS client to derive DEKs and encrypt sensitive blobs; rotate CMKs annually and re-encrypt on rotation.",
      "why_is_this_important": "Managed key lifecycles meet SOC 2 encryption expectations.",
      "severity": "High",
      "bad_example": "val secret = plain.toByteArray(); store(secret)",
      "good_example": "val ct = kms.encrypt(deriveDek(), plain); store(ct)",
      "examples": [
        {
          "snippet": "kms.encrypt(key, data)",
          "isCorrect": true
        },
        {
          "snippet": "store(data)",
          "isCorrect": false
        }
      ],
      "language": "kotlin",
      "uuid": "5a6b7c8d-9e40-41b2-a3c4-d5e6f7a8b9c0",
      "buckets": ["compliance-soc2-essentials", "secrets-credentials"],
      "scope": "file"
    },
    {
      "title": "Deny logging of secrets with a custom layer",
      "rule": "Implement a tracing layer that scans fields and redacts patterns (JWT, API keys, emails) before output.",
      "why_is_this_important": "Prevents sensitive data exposure in logs for SOC 2.",
      "severity": "Medium",
      "bad_example": "info!(\"token={}\", token);",
      "good_example": "info!(token=\"REDACTED\", trace_id=%tid);",
      "examples": [
        {
          "snippet": "info!(\"action\"=\"auth.login\", user_id=%uid)",
          "isCorrect": true
        },
        {
          "snippet": "println!(\"email={} \", email)",
          "isCorrect": false
        }
      ],
      "language": "rust",
      "uuid": "6b7c8d9e-40a1-42b3-b4c5-d6e7f8a9b0c1",
      "buckets": [
        "compliance-soc2-essentials",
        "privacy-pii",
        "observability-logging"
      ],
      "scope": "file"
    },
    {
      "title": "Data retention job with classification",
      "rule": "Run a scheduled job that deletes telemetry after 30 days and anonymizes PII after the retention window; log deletions with data_class and count.",
      "why_is_this_important": "Enforces data lifecycle controls required by SOC 2.",
      "severity": "Medium",
      "bad_example": "cron(' * * * ', ()=> / no-op */ )",
      "good_example": "cron('0 3 * * ', ()=> purge({ data_class:'telemetry', olderThanDays:30 }))",
      "examples": [
        {
          "snippet": "purge({ data_class:'telemetry' })",
          "isCorrect": true
        },
        {
          "snippet": "db.deleteAll()",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "uuid": "7c8d9e40-a1b2-43c5-b6d7-e8f9a0b1c2d3",
      "buckets": ["compliance-soc2-essentials", "privacy-pii", "maintainability"],
      "scope": "file"
    },
    {
      "title": "Approvals for bulk export endpoints",
      "rule": "Protect /exports/ with role checks, fresh MFA, and rate limits; add requester and approved_by to the audit event.",
      "why_is_this_important": "Controls data exfiltration and provides evidence for SOC 2.",
      "severity": "High",
      "bad_example": "r.HandleFunc(\"/exports/users\", exportUsers) // public",
      "good_example": "r.HandleFunc(\"/exports/users\", withMFA(withRole(exportUsers,\"admin\")))",
      "examples": [
        {
          "snippet": "audit(\"export.create\", requester, approver)",
          "isCorrect": true
        },
        {
          "snippet": "audit(\"export.create\") // missing approver",
          "isCorrect": false
        }
      ],
      "language": "go",
      "uuid": "8d9e40a1-b2c3-44d5-b6e7-f8a9b0c1d2e3",
      "buckets": [
        "compliance-soc2-essentials",
        "security-hardening",
        "privacy-pii"
      ],
      "scope": "file"
    },
    {
      "title": "Disable debug and verbose errors in production",
      "rule": "Set APP_DEBUG=false and hide stack traces; send errors to a centralized logger with trace_id instead.",
      "why_is_this_important": "Prevents leakage of sensitive details and aligns with SOC 2 secure operations.",
      "severity": "Medium",
      "bad_example": "APP_DEBUG=true",
      "good_example": "APP_DEBUG=false; Log::error(json_encode(['trace_id'=>$tid,'err'=>$e->getCode()]));",
      "examples": [
        {
          "snippet": "config(['app.debug'=>false])",
          "isCorrect": true
        },
        {
          "snippet": "config(['app.debug'=>true])",
          "isCorrect": false
        }
      ],
      "language": "php",
      "uuid": "9e40a1b2-c3d4-45e6-b7f8-a9b0c1d2e3f4",
      "buckets": ["compliance-soc2-essentials", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "mTLS for internal service-to-service traffic",
      "rule": "Configure Spring Boot to require client certificates for internal APIs (clientAuth=REQUIRE) and restrict CAs; log peer certificate subject in audit events.",
      "why_is_this_important": "Strong service authentication and encryption support SOC 2 security.",
      "severity": "High",
      "bad_example": "server.ssl.client-auth=NONE",
      "good_example": "server.ssl.client-auth=REQUIRE\nserver.ssl.trust-store=truststore.jks",
      "examples": [
        {
          "snippet": "server.ssl.client-auth=REQUIRE",
          "isCorrect": true
        },
        {
          "snippet": "server.ssl.client-auth=NONE",
          "isCorrect": false
        }
      ],
      "language": "java",
      "uuid": "a0b1c2d3-e4f5-46a7-98b9-0c1d2e3f4a5b",
      "buckets": [
        "compliance-soc2-essentials",
        "security-hardening",
        "api-conventions"
      ],
      "scope": "file"
    },
    {
      "title": "Fingerprint assets and cache immutably",
      "rule": "All static JS/CSS/font/image files MUST use content-hashed filenames (e.g., app.9c1a7b.js) and be served with \"Cache-Control: public, max-age=31536000, immutable\". HTML and other non-fingerprinted documents MUST be served with \"Cache-Control: no-cache\" (or equivalent) to enable conditional revalidation.",
      "why_is_this_important": "Hashed filenames guarantee cache-busting on deploys and enable safe year-long immutable caching for fast repeat loads.",
      "severity": "Critical",
      "bad_example": "GET /assets/app.js\n200 OK\nCache-Control: max-age=600\n\n/* filename without hash; short-lived cache /",
      "good_example": "GET /assets/app.9c1a7b.js\n200 OK\nCache-Control: public, max-age=31536000, immutable\n\n/ hashed filename; immutable caching /",
      "examples": [
        {
          "snippet": "Cache-Control: public, max-age=31536000, immutable",
          "isCorrect": true
        },
        {
          "snippet": "Cache-Control: max-age=600",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "4b7e3c7f-0c73-4b8e-9f4a-5e0a2db6b1a2",
      "buckets": [
        "web-static-assets",
        "caching-strategy",
        "performance-efficiency",
        "maintainability"
      ],
      "scope": "file"
    },
    {
      "title": "Compress text assets with Brotli/Gzip and set Vary",
      "rule": "Serve text-based assets (JS, CSS, JSON, SVG) with Brotli (br) when the client sends \"Accept-Encoding: br\" and fallback to gzip. Always set \"Vary: Accept-Encoding\" and do NOT compress already-compressed formats (e.g., .png, .jpg, .woff2).",
      "why_is_this_important": "Brotli significantly reduces transfer sizes for text assets and the Vary header prevents cache poisoning across clients.",
      "severity": "High",
      "bad_example": "GET /img/logo.png\n200 OK\nContent-Encoding: gzip\n\n/ double-compressing a PNG increases size and latency /",
      "good_example": "GET /app.9c1a7b.js\n200 OK\nContent-Encoding: br\nVary: Accept-Encoding\n\n/ optimal compression with correct cache variation /",
      "examples": [
        {
          "snippet": "Content-Encoding: br\nVary: Accept-Encoding",
          "isCorrect": true
        },
        {
          "snippet": "Content-Encoding: gzip\n/ for .png /",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "d1a8f8c0-7b6b-4a95-9c4a-3e7b2c2e6f9d",
      "buckets": [
        "web-static-assets",
        "performance-efficiency",
        "caching-strategy"
      ],
      "scope": "file"
    },
    {
      "title": "Preload critical fonts and use font-display: swap",
      "rule": "Preload render-blocking WOFF2 fonts using <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin> and define @font-face with \"font-display: swap\". Only preload fonts used above the fold.",
      "why_is_this_important": "Proper font preloading prevents layout shifts and enables faster first paint without FOIT.",
      "severity": "High",
      "bad_example": "<link rel=\"preload\" href=\"/fonts/brand.woff2\"> / missing as/type/crossorigin /",
      "good_example": "<link rel=\"preload\" href=\"/fonts/brand.9c1a.woff2\" as=\"font\" type=\"font/woff2\" crossorigin>\n<style>@font-face{font-family:Brand;src:url(/fonts/brand.9c1a.woff2) format('woff2');font-display:swap}</style>",
      "examples": [
        {
          "snippet": "<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin>",
          "isCorrect": true
        },
        {
          "snippet": "<link rel=\"preload\" href=\"/fonts/brand.woff2\">",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "b6bc8e10-2bb8-4c5f-b3c5-3a1a3d7c5c11",
      "buckets": ["web-static-assets", "performance-efficiency", "ui-robustness"],
      "scope": "file"
    },
    {
      "title": "Serve responsive images with modern formats and lazy-load",
      "rule": "Provide AVIF/WebP fallbacks via <img srcset> with width/height attributes, meaningful sizes, and \"loading=lazy\" plus \"decoding=async\". Avoid shipping oversized PNG/JPEG when AVIF/WebP is supported.",
      "why_is_this_important": "Responsive modern formats cut bytes and improve LCP while preserving quality.",
      "severity": "High",
      "bad_example": "<img src=\"/img/hero.png\">",
      "good_example": "<img src=\"/img/hero.avif\" srcset=\"/img/hero.avif 1x, /img/hero@2x.avif 2x\" width=\"1200\" height=\"600\" loading=\"lazy\" decoding=\"async\" alt=\"\">",
      "examples": [
        {
          "snippet": "loading=\"lazy\" decoding=\"async\"",
          "isCorrect": true
        },
        {
          "snippet": "<img src=\"/img/hero.png\">",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "0a0b5f1e-6b3c-4a0a-9b2e-8b4b0b3b9e7a",
      "buckets": ["web-static-assets", "performance-efficiency"],
      "scope": "file"
    },
    {
      "title": "Restrict production source maps",
      "rule": "Do not expose full, unminified source maps publicly in production. If source maps are required for error tracking, serve them behind authentication or IP allowlists and set \"X-Robots-Tag: noindex\".",
      "why_is_this_important": "Public source maps leak implementation details and ease reverse engineering.",
      "severity": "Medium",
      "bad_example": "GET /assets/app.9c1a7b.js.map\n200 OK\n/ world-readable source map /",
      "good_example": "GET /assets/app.9c1a7b.js.map\n401 Unauthorized\nX-Robots-Tag: noindex\n/ gated source map access /",
      "examples": [
        {
          "snippet": "X-Robots-Tag: noindex",
          "isCorrect": true
        },
        {
          "snippet": "/ serve .map publicly /",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "7b9a5a8b-1c3e-4e2e-9a7a-0b9c4f7d3a51",
      "buckets": ["web-static-assets", "security-hardening"],
      "scope": "file"
    },
    {
      "title": "Immutable cache for hashed assets, no-cache for HTML",
      "rule": "In Express, use serve-static with setHeaders to apply \"Cache-Control: public, max-age=31536000, immutable\" for files matching /\\.[0-9a-f]{8,}\\./ and \"Cache-Control: no-cache\" for HTML. Also set correct Content-Type.",
      "why_is_this_important": "Differentiating asset types ensures fast repeat loads while keeping documents revalidatable.",
      "severity": "High",
      "bad_example": "app.use(express.static('public')); // default headers, no hashing awareness",
      "good_example": "app.use(express.static('public', { setHeaders:(res, path)=>{ if(/\\.[0-9a-f]{8,}\\./.test(path)){ res.setHeader('Cache-Control','public, max-age=31536000, immutable'); } else if(path.endsWith('.html')){ res.setHeader('Cache-Control','no-cache'); } } }));",
      "examples": [
        {
          "snippet": "res.setHeader('Cache-Control','public, max-age=31536000, immutable')",
          "isCorrect": true
        },
        {
          "snippet": "app.use(express.static('public')) // no Cache-Control",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "uuid": "e6b3d4c2-9f2a-45e0-a3e2-6a1a2b7c9d01",
      "buckets": [
        "web-static-assets",
        "caching-strategy",
        "performance-efficiency"
      ],
      "scope": "file"
    },
    {
      "title": "ETag/Last-Modified for non-immutable assets",
      "rule": "For Go static servers, set immutable Cache-Control for hashed files; otherwise set \"Cache-Control: no-cache\" and support conditional GET via ETag or Last-Modified using file info.",
      "why_is_this_important": "Validators prevent unnecessary transfers while keeping clients fresh.",
      "severity": "Medium",
      "bad_example": "http.Handle(\"/\", http.FileServer(http.Dir(\"./public\"))) // no headers",
      "good_example": "http.HandleFunc(\"/\", func(w http.ResponseWriter, r http.Request){ p := r.URL.Path; if hashRE.MatchString(p){ w.Header().Set(\"Cache-Control\",\"public, max-age=31536000, immutable\") } else { w.Header().Set(\"Cache-Control\",\"no-cache\"); w.Header().Set(\"ETag\", etagFor(p)) } http.ServeFile(w, r, path.Join(\"public\", p)) })",
      "examples": [
        {
          "snippet": "w.Header().Set(\"Cache-Control\",\"public, max-age=31536000, immutable\")",
          "isCorrect": true
        },
        {
          "snippet": "http.FileServer(http.Dir(\"./public\")) // default",
          "isCorrect": false
        }
      ],
      "language": "go",
      "uuid": "0e1f2a3b-4c5d-6e7f-8a9b-1c2d3e4f5a6b",
      "buckets": ["web-static-assets", "caching-strategy"],
      "scope": "file"
    },
    {
      "title": "Versioned static resources with long cache",
      "rule": "Enable content versioning and long-lived caching via ResourceChain with VersionResourceResolver and set Cache-Control to public, max-age=31536000 for static locations; keep HTML templates non-immutable.",
      "why_is_this_important": "Versioned URLs allow aggressive caching without risking stale assets.",
      "severity": "High",
      "bad_example": "registry.addResourceHandler(\"/assets/\").addResourceLocations(\"classpath:/static/\");",
      "good_example": "registry.addResourceHandler(\"/assets/\")\n .addResourceLocations(\"classpath:/static/\")\n .setCacheControl(CacheControl.maxAge(365, java.util.concurrent.TimeUnit.DAYS).cachePublic())\n .resourceChain(true)\n .addResolver(new VersionResourceResolver().addContentVersionStrategy(\"/\\\")));",
      "examples": [
        {
          "snippet": "new VersionResourceResolver().addContentVersionStrategy(\"/\")",
          "isCorrect": true
        },
        {
          "snippet": "addResourceHandler(\"/assets/**\").addResourceLocations(...); // no cache",
          "isCorrect": false
        }
      ],
      "language": "java",
      "uuid": "f1a2b3c4-d5e6-47f8-9012-3456abcd7890",
      "buckets": [
        "web-static-assets",
        "caching-strategy",
        "performance-efficiency"
      ],
      "scope": "file"
    },
    {
      "title": "StaticFileOptions with cache policy and types",
      "rule": "Configure UseStaticFiles with OnPrepareResponse to set \"Cache-Control: public, max-age=31536000, immutable\" for hashed assets and \"no-cache\" for HTML; ensure correct Content-Type (e.g., \"font/woff2\", \"text/css\").",
      "why_is_this_important": "Explicit headers and MIME types avoid stale assets and incorrect rendering.",
      "severity": "Medium",
      "bad_example": "app.UseStaticFiles(); // default caching and types",
      "good_example": "app.UseStaticFiles(new StaticFileOptions{ OnPrepareResponse = ctx => { var p = ctx.File.Name; if(hashRegex.IsMatch(p)) ctx.Context.Response.Headers[\"Cache-Control\"] = \"public, max-age=31536000, immutable\"; else if(p.EndsWith(\".html\")) ctx.Context.Response.Headers[\"Cache-Control\"] = \"no-cache\"; } });",
      "examples": [
        {
          "snippet": "ctx.Context.Response.Headers[\"Cache-Control\"] = \"public, max-age=31536000, immutable\"",
          "isCorrect": true
        },
        {
          "snippet": "app.UseStaticFiles(); // defaults",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "uuid": "a7c8d9e0-1b2c-4d5e-8f9a-0b1c2d3e4f5a",
      "buckets": [
        "web-static-assets",
        "caching-strategy",
        "performance-efficiency"
      ],
      "scope": "file"
    },
    {
      "title": "Correct Content-Type and cache headers for assets",
      "rule": "For PHP-served assets, emit the precise Content-Type (e.g., text/css; charset=utf-8, application/javascript, font/woff2) and set immutable caching for hashed files; never apply immutable caching to HTML.",
      "why_is_this_important": "Accurate MIME types and tailored caching improve compatibility and speed.",
      "severity": "Medium",
      "bad_example": "<?php header(\"Content-Type: text/plain\"); readfile(\"app.js\");",
      "good_example": "<?php if (preg_match('/\\\\.[0-9a-f]{8,}\\\\./', \\$file)) { header('Cache-Control: public, max-age=31536000, immutable'); } header('Content-Type: application/javascript; charset=utf-8'); readfile(\\$file);",
      "examples": [
        {
          "snippet": "header(\"Cache-Control: public, max-age=31536000, immutable\");",
          "isCorrect": true
        },
        {
          "snippet": "header(\"Content-Type: text/plain\");",
          "isCorrect": false
        }
      ],
      "language": "php",
      "uuid": "c3d2e1f0-9a8b-4c7d-8e6f-5a4b3c2d1e0f",
      "buckets": ["web-static-assets", "caching-strategy"],
      "scope": "file"
    },
    {
      "title": "Cache and compression for static resources",
      "rule": "In Kotlin Ktor, install CachingHeaders and Compression. Set immutable caching for hashed resources and no-cache for HTML; include \"Vary: Accept-Encoding\".",
      "why_is_this_important": "Built-in Ktor features simplify correct caching and compression for static assets.",
      "severity": "Medium",
      "bad_example": "static(\"/assets\"){ files(\"/public\") } // no caching/compression",
      "good_example": "install(Compression)\\ninstall(CachingHeaders){ options { outgoingContent -> if(outgoingContent.contentType?.withoutParameters() == ContentType.Text.Html) CachingOptions(CacheControl.NoCache(null)) else CachingOptions(CacheControl.MaxAge(365246060, visibility = CacheControl.Visibility.Public)) } }\\nstatic(\\\"/assets\\\"){ files(\\\"public\\\") }",
      "examples": [
        {
          "snippet": "install(CachingHeaders)",
          "isCorrect": true
        },
        {
          "snippet": "static(\"/assets\"){ files(\"public\") } // defaults",
          "isCorrect": false
        }
      ],
      "language": "kotlin",
      "uuid": "9d8c7b6a-5e4f-4a3b-9c2d-1a0b9c8d7e6f",
      "buckets": [
        "web-static-assets",
        "caching-strategy",
        "performance-efficiency"
      ],
      "scope": "file"
    },
    {
      "title": "Immutable cache and Vary for precompressed files",
      "rule": "Serve precompressed .br/.gz variants when the client sends Accept-Encoding, set \"Vary: Accept-Encoding\", and apply immutable caching for hashed assets; keep HTML revalidatable.",
      "why_is_this_important": "Precompressed delivery reduces CPU and latency; Vary ensures correct CDN caching.",
      "severity": "High",
      "bad_example": "HttpServer::new(|| App::new().service(Files::new(\"/assets\",\"./public\"))) // no headers",
      "good_example": "HttpServer::new(|| App::new().wrap_fn(|req, srv|{ / set Vary and Cache-Control based on path / srv.call(req) }).service(Files::new(\"/assets\",\"./public\"))",
      "examples": [
        {
          "snippet": "res.insert_header((\"Vary\",\"Accept-Encoding\"))",
          "isCorrect": true
        },
        {
          "snippet": "Files::new(\"/assets\",\"./public\") // defaults",
          "isCorrect": false
        }
      ],
      "language": "rust",
      "uuid": "2e5a6c7d-8f9a-4b1c-9d0e-1f2a3b4c5d6e",
      "buckets": [
        "web-static-assets",
        "caching-strategy",
        "performance-efficiency"
      ],
      "scope": "file"
    },
    {
      "title": "Set correct MIME types for all static assets",
      "rule": "Serve assets with accurate Content-Type (e.g., text/css, application/javascript, image/avif, image/webp, font/woff2, image/svg+xml) and include charset for text types. Do not default to text/plain or application/octet-stream.",
      "why_is_this_important": "Correct MIME types ensure proper rendering, security, and cache behavior.",
      "severity": "Medium",
      "bad_example": "Content-Type: application/octet-stream\n/ for .css/.js /",
      "good_example": "Content-Type: text/css; charset=utf-8\n/ for .css */",
      "examples": [
        {
          "snippet": "Content-Type: font/woff2",
          "isCorrect": true
        },
        {
          "snippet": "Content-Type: text/plain // for .js",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "8f1e2d3c-4b5a-6c7d-8e9f-0a1b2c3d4e5f",
      "buckets": [
        "web-static-assets",
        "performance-efficiency",
        "security-hardening"
      ],
      "scope": "file"
    },
  
    {
      "title": "Freeze time and random sources for deterministic tests",
      "rule": "In unit and integration tests, call a time-freeze utility and set a fixed random seed before exercising the system under test; unfreeze after assertions.",
      "why_is_this_important": "Deterministic time and RNG remove flakiness and make failures reproducible.",
      "severity": "High",
      "bad_example": "test(\"creates token\", () => {\n const id = random(); // non-deterministic\n const ts = now(); // wall-clock dependent\n const token = createToken(id, ts);\n assertMatches(token, /[A-Z0-9]+/);\n});",
      "good_example": "test(\"creates token\", () => {\n setRandomSeed(42);\n freezeTime(\"2024-01-01T00:00:00Z\");\n const id = random();\n const ts = now();\n const token = createToken(id, ts);\n assertEquals(token, \"ABC123-20240101\");\n unfreezeTime();\n});",
      "scope": "file",
      "examples": [
        {
          "snippet": "freezeTime(\"2024-01-01T00:00:00Z\"); setRandomSeed(42);",
          "isCorrect": true
        },
        {
          "snippet": "const ts = now(); const id = random(); // flaky",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "c3d5f9c4-2f2a-4c3c-9b9c-9a6f4b2c7e11",
      "buckets": ["testing-quality"]
    },
    {
      "title": "No live network or DB in unit tests—use fakes/mocks",
      "rule": "Unit tests must stub or fake external HTTP/DB calls; allow real I/O only in integration/e2e tests tagged accordingly.",
      "why_is_this_important": "Live I/O introduces slowness, nondeterminism, and external failures unrelated to the code.",
      "severity": "Critical",
      "bad_example": "test(\"loads profile\", () => {\n const res = http.get(\"https://api.example.com/profile/42\");\n assertEquals(res.status, 200);\n});",
      "good_example": "test(\"loads profile (stubbed)\", () => {\n const http = fakeHttp({\"/profile/42\": {status: 200, body: {id: 42}}});\n const res = http.get(\"/profile/42\");\n assertEquals(res.status, 200);\n});",
      "scope": "file",
      "examples": [
        { "snippet": "unit: uses fakeHttp()/mockClient()", "isCorrect": true },
        { "snippet": "unit: calls https://...", "isCorrect": false }
      ],
      "language": "",
      "uuid": "2f7f1e3c-8a5e-4f1a-9f72-4b8e2b1a6d90",
      "buckets": [
        "testing-quality",
        "performance-efficiency",
        "security-hardening"
      ]
    },
    {
      "title": "Behavioral changes must add or update tests",
      "rule": "If files under src/ change behavior, the PR must include tests/ updates or a PR description line no-tests: <reason> explaining why tests are unaffected.",
      "why_is_this_important": "Prevents silent regressions and enforces test coverage of changed behavior.",
      "severity": "High",
      "bad_example": "diff --git a/src/math.js b/src/math.js\n+ export function divide(a,b){ return a/b }\n# no tests changed",
      "good_example": "diff --git a/src/math.js b/src/math.js\n+ export function divide(a,b){ if(b===0) throw new Error(\"\\/0\"); return a/b }\n--- a/tests/math.test.js\n+++ b/tests/math.test.js\n+ it(\"divide throws on /0\", ()=>{ expect(()=>divide(1,0)).toThrow() })",
      "scope": "pull-request",
      "examples": [
        {
          "snippet": "PR_DESCRIPTION: no-tests: refactor-only (rename, no behavior change)",
          "isCorrect": true
        },
        {
          "snippet": "files_changed:\n- src/service.ts\n# tests/ unchanged and no rationale",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "e6b0b8de-6c52-4b76-91b7-0a1c2d5f4f33",
      "buckets": ["testing-quality", "pr-hygiene"]
    },
    {
      "title": "Enforce minimum coverage in CI",
      "rule": "CI must fail the build when line coverage drops below the project threshold (e.g., 80%); publish coverage reports as artifacts.",
      "why_is_this_important": "Automated gates prevent coverage regressions and make quality visible.",
      "severity": "High",
      "bad_example": "steps:\n - name: Run tests\n run: test",
      "good_example": "steps:\n - name: Run tests with coverage\n run: coverage run -m test\n - name: Enforce coverage threshold\n run: coverage report --fail-under=80\n - name: Upload coverage\n uses: actions/upload-artifact@v4\n with: { name: coverage, path: coverage/ }",
      "scope": "pull-request",
      "examples": [
        { "snippet": "coverage report --fail-under=80", "isCorrect": true },
        { "snippet": "run: test # no coverage gate", "isCorrect": false }
      ],
      "language": "",
      "uuid": "a9f2c1d3-5b6e-4a7a-8c2f-3d7a9b1c4e55",
      "buckets": ["testing-quality", "ci-cd-build-hygiene"]
    },
    {
      "title": "Jest: use async/await and resolves/rejects instead of done()",
      "rule": "For Promises, return/await the expectation and prefer await expect(p).resolves|rejects...; do not use the callback done().",
      "why_is_this_important": "Avoids false positives and ensures the test actually waits for async completion.",
      "severity": "High",
      "bad_example": "test('loads', (done) => {\n fetch(url).then(r => {\n expect(r.ok).toBe(true);\n done();\n });\n});",
      "good_example": "test('loads', async () => {\n await expect(fetch(url)).resolves.toHaveProperty('ok', true);\n});",
      "scope": "file",
      "examples": [
        {
          "snippet": "await expect(fetch(url)).resolves.toBeDefined()",
          "isCorrect": true
        },
        {
          "snippet": "test('x',(done)=>{ /* ... */ done(); })",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "uuid": "f2ab3b1e-1d4a-4e1e-90de-0db8f0b9e7a1",
      "buckets": ["testing-quality"]
    },
    {
      "title": "Go: parallel-safe tests with t.Parallel and t.TempDir",
      "rule": "Mark tests that don't mutate shared state with t.Parallel() and use t.TempDir() for filesystem isolation; avoid package-level globals.",
      "why_is_this_important": "Parallelism speeds suites and isolation prevents hidden data races.",
      "severity": "High",
      "bad_example": "var buf bytes.Buffer\nfunc TestWrite(t testing.T){\n write(&buf) // shared global; not isolated\n}",
      "good_example": "func TestWrite(t testing.T){\n t.Parallel()\n dir := t.TempDir()\n f := filepath.Join(dir, \"out.txt\")\n if err := writeFile(f); err != nil { t.Fatalf(\"write: %v\", err) }\n}",
      "scope": "file",
      "examples": [
        { "snippet": "t.Parallel(); dir := t.TempDir()", "isCorrect": true },
        {
          "snippet": "var shared bytes.Buffer // used by tests",
          "isCorrect": false
        }
      ],
      "language": "go",
      "uuid": "1a0d7a2c-bc7b-4b3b-9a9e-2c6f8e1d9f77",
      "buckets": ["testing-quality", "concurrency-safety"]
    },
    {
      "title": "JUnit 5: assertThrows and timeouts for slow paths",
      "rule": "Use assertThrows for exception cases and annotate long-running tests with @Timeout to bound execution; use @TempDir for file I/O.",
      "why_is_this_important": "Explicit exception and time boundaries reduce flakiness and hangs.",
      "severity": "Medium",
      "bad_example": "@Test void parses(){ new Parser().parse(null); / no assertion / }",
      "good_example": "@Test @Timeout(2)\nvoid parses(){\n assertThrows(NullPointerException.class, () -> new Parser().parse(null));\n}",
      "scope": "file",
      "examples": [
        {
          "snippet": "assertThrows(IllegalArgumentException.class, () -> f())",
          "isCorrect": true
        },
        { "snippet": "@Test void x(){ f(); } // no asserts", "isCorrect": false }
      ],
      "language": "java",
      "uuid": "b0e4c0c5-8f0f-4d1e-82a4-0f2f4b3a6c21",
      "buckets": ["testing-quality"]
    },
    {
      "title": "xUnit: async tests return Task and avoid Thread.Sleep",
      "rule": "In async tests, return Task and await the operation; never use Thread.Sleep—use cancellation tokens or timeouts with Assert.ThrowsAsync where needed.",
      "why_is_this_important": "Proper async patterns prevent deadlocks and reduce flakiness.",
      "severity": "High",
      "bad_example": "[Fact]\npublic void Loads(){\n Thread.Sleep(2000);\n var r = Client.GetAsync(\"/ping\"); // not awaited\n Assert.NotNull(r);\n}",
      "good_example": "[Fact]\npublic async Task Loads(){\n using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(2));\n var ex = await Assert.ThrowsAsync<HttpRequestException>(async () =>\n await Client.GetAsync(\"/slow\", cts.Token));\n}",
      "scope": "file",
      "examples": [
        {
          "snippet": "public async Task TestX(){ await op(); }",
          "isCorrect": true
        },
        {
          "snippet": "public void TestX(){ Thread.Sleep(1000); }",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "uuid": "e1d3f2a4-7b5c-4d8e-9f31-2c4b5a6d7e88",
      "buckets": ["testing-quality"]
    },
    {
      "title": "PHPUnit: use data providers and type-strict assertions",
      "rule": "Prefer data providers for parameterized cases and use assertSame/assertNotSame for type-strict checks; avoid loose equals.",
      "why_is_this_important": "Catches subtle type issues and reduces repetitive tests.",
      "severity": "Medium",
      "bad_example": "public function testAdd(){\n $this->assertEquals(\"3\", add(1,2)); // string vs int\n}",
      "good_example": "/ @dataProvider sums */\npublic function testAdd($a,$b,$sum){\n $this->assertSame($sum, add($a,$b));\n}\npublic function sums(){ return [[1,2,3],[0,0,0]]; }",
      "scope": "file",
      "examples": [
        { "snippet": "$this->assertSame(3, add(1,2));", "isCorrect": true },
        { "snippet": "$this->assertEquals(\"3\", add(1,2));", "isCorrect": false }
      ],
      "language": "php",
      "uuid": "7f2c9b1a-3e6d-4a2f-9e5b-1c0a6d8f4b22",
      "buckets": ["testing-quality", "style-conventions"]
    },
    {
      "title": "RSpec: stub external HTTP and assert on effects",
      "rule": "Use WebMock or equivalent to stub external requests in specs and prefer effect-based matchers (e.g., change(Model, :count)) over brittle value guesses.",
      "why_is_this_important": "Isolation and behavior-focused assertions reduce flakiness.",
      "severity": "High",
      "bad_example": "it 'creates user' do\\n create_user\\n expect(User.count).to eq(User.count + 1) # nonsense\\nend",
      "good_example": "it 'creates user' do\\n stub_request(:post, 'https://api.example.com/users').to_return(status:201)\\n expect{ create_user }.to change(User, :count).by(1)\\nend",
      "scope": "file",
      "examples": [
        {
          "snippet": "expect{ op }.to change(Model, :count).by(1)",
          "isCorrect": true
        },
        {
          "snippet": "Net::HTTP.get(URI('https://real.example'))",
          "isCorrect": false
        }
      ],
      "language": "ruby",
      "uuid": "5c9d8e2f-4a7b-4f1e-9d23-0b7f6a2e1d44",
      "buckets": ["testing-quality"]
    },
    {
      "title": "Kotlin coroutines: use runTest and avoid Thread.sleep",
      "rule": "Test suspend code with kotlinx-coroutines-test runTest {} and virtual time (advanceUntilIdle()); do not block with Thread.sleep.",
      "why_is_this_important": "Virtual time makes async tests fast and deterministic.",
      "severity": "High",
      "bad_example": "@Test fun loads(){\\n Thread.sleep(1000)\\n val v = runBlocking { load() }\\n assertTrue(v > 0)\\n}",
      "good_example": "@Test fun loads() = runTest {\n val v = load()\n advanceUntilIdle()\n assertTrue(v > 0)\n}",
      "scope": "file",
      "examples": [
        {
          "snippet": "@Test fun x() = runTest { advanceUntilIdle() }",
          "isCorrect": true
        },
        { "snippet": "Thread.sleep(500); // in test", "isCorrect": false }
      ],
      "language": "kotlin",
      "uuid": "9e1f7a3c-2b4d-4c6a-9f0e-1d2c3b4a5e6f",
      "buckets": ["testing-quality"]
    },
    {
      "title": "Rust async tests: use #[tokio::test] and avoid unwrap()",
      "rule": "For async code, annotate with #[tokio::test] (or async runtime in use) and return Result from tests; never use unwrap()/expect() in assertions.",
      "why_is_this_important": "Proper async runtime and error propagation yield clearer failures.",
      "severity": "Medium",
      "bad_example": "#[test]\nasync fn computes(){\n let v = maybe_async().await; // invalid in std test\n assert!(v.unwrap() > 0);\n}",
      "good_example": "#[tokio::test]\nasync fn computes() -> Result<(), Box<dyn std::error::Error>> {\n let v = maybe_async().await?;\n assert!(v > 0);\n Ok(())\n}",
      "scope": "file",
      "examples": [
        {
          "snippet": "#[tokio::test]\nasync fn x()->Result<(),Box<dyn std::error::Error>>{ Ok(()) }",
          "isCorrect": true
        },
        { "snippet": "assert_eq!(some_result.unwrap(), 3)", "isCorrect": false }
      ],
      "language": "rust",
      "uuid": "3a4f6b7c-8d9e-4c0a-9b1d-2e3f4a5b6c7d",
      "buckets": ["testing-quality"]
    },
    {
      "title": "Terraform state must use a remote backend with locking",
      "rule": "Configure a remote backend with state locking (e.g., S3 + DynamoDB table or AzureRM blob with leases). Do not use local backend for shared environments.",
      "why_is_this_important": "Remote, locked state prevents concurrent writes and corruption during team applies.",
      "severity": "High",
      "bad_example": "terraform {\n backend \"local\" {\n path = \"./terraform.tfstate\"\n }\n}\n",
      "good_example": "terraform {\n backend \"s3\" {\n bucket = \"org-tf-state\"\n key = \"prod/network/terraform.tfstate\"\n region = \"us-east-1\"\n dynamodb_table = \"tf-state-locks\"\n encrypt = true\n }\n}\n",
      "scope": "file",
      "examples": [
        {
          "snippet": "backend \"s3\" { dynamodb_table = \"tf-state-locks\" }",
          "isCorrect": true
        },
        {
          "snippet": "backend \"local\" { path = \"state.tfstate\" }",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "b2f2b8f4-2a4e-4a9e-9c1f-2e9a2a3b6a01",
      "buckets": ["infra-as-code", "ci-cd-build-hygiene", "maintainability"]
    },
    {
      "title": "Tag/label every resource with owner, env, and cost-center",
      "rule": "All Terraform/Kubernetes resources must include standard tags/labels: owner, env, cost-center (and application if available).",
      "why_is_this_important": "Consistent metadata enables cost allocation, searchability, and cleanup.",
      "severity": "High",
      "bad_example": "resource \"aws_s3_bucket\" \"logs\" {\n bucket = \"org-logs\"\n}\n",
      "good_example": "resource \"aws_s3_bucket\" \"logs\" {\n bucket = \"org-logs\"\n tags = {\n owner = \"platform-team\"\n env = \"prod\"\n cost-center = \"cc-1234\"\n application = \"billing\"\n }\n}\n",
      "scope": "file",
      "examples": [
        {
          "snippet": "metadata:\n labels:\n owner: platform-team\n env: prod\n cost-center: cc-1234",
          "isCorrect": true
        },
        { "snippet": "metadata:\n labels: {}", "isCorrect": false }
      ],
      "language": "",
      "uuid": "6b3a2a53-7a9f-4f0d-8f1b-6e5fa87f63a2",
      "buckets": ["infra-as-code", "maintainability"]
    },
    {
      "title": "Pods must run as non-root with read-only root filesystem",
      "rule": "Set securityContext.runAsNonRoot=true, runAsUser!=0, and readOnlyRootFilesystem=true on pods/containers.",
      "why_is_this_important": "Reduces blast radius and prevents privileged writes if compromised.",
      "severity": "Critical",
      "bad_example": "apiVersion: apps/v1\nkind: Deployment\nspec:\n template:\n spec:\n containers:\n - name: app\n image: app:1.0\n",
      "good_example": "apiVersion: apps/v1\nkind: Deployment\nspec:\n template:\n spec:\n securityContext:\n runAsNonRoot: true\n containers:\n - name: app\n image: app:1.0\n securityContext:\n runAsUser: 1000\n readOnlyRootFilesystem: true\n",
      "scope": "file",
      "examples": [
        {
          "snippet": "securityContext:\n runAsNonRoot: true\n runAsUser: 1000",
          "isCorrect": true
        },
        { "snippet": "securityContext:\n runAsUser: 0", "isCorrect": false }
      ],
      "language": "",
      "uuid": "d4a8d8d0-bf6f-49a0-a0a8-6fb3c5e4f2e1",
      "buckets": [
        "infra-as-code",
        "security-hardening",
        "container-docker-hygiene"
      ]
    },
    {
      "title": "Set CPU/memory requests and limits for all containers",
      "rule": "Every container must specify resources.requests and resources.limits for cpu and memory.",
      "why_is_this_important": "Prevents noisy-neighbor issues and enables reliable scheduling.",
      "severity": "High",
      "bad_example": "containers:\n- name: api\n image: api:1.2\n",
      "good_example": "containers:\n- name: api\n image: api:1.2\n resources:\n requests:\n cpu: \"200m\"\n memory: \"256Mi\"\n limits:\n cpu: \"500m\"\n memory: \"512Mi\"\n",
      "scope": "file",
      "examples": [
        {
          "snippet": "resources:\n requests:\n cpu: 200m\n memory: 256Mi\n limits:\n cpu: 500m\n memory: 512Mi",
          "isCorrect": true
        },
        { "snippet": "resources: {}", "isCorrect": false }
      ],
      "language": "",
      "uuid": "8a7db3a0-4c4e-43b5-b2f6-4f1f1b8a4a77",
      "buckets": ["infra-as-code", "performance-efficiency"]
    },
    {
      "title": "Default-deny NetworkPolicy required when adding a namespace",
      "rule": "If a PR introduces workloads in a namespace that lacks a default-deny NetworkPolicy, add one plus explicit allow rules.",
      "why_is_this_important": "A default-deny baseline limits lateral movement and unintended traffic.",
      "severity": "High",
      "bad_example": "files:\n- k8s/namespaces/payments.yaml\n- k8s/deployments/payments-api.yaml\n# (no NetworkPolicy)",
      "good_example": "files:\n- k8s/namespaces/payments.yaml\n- k8s/deployments/payments-api.yaml\n- k8s/networkpolicies/payments-default-deny.yaml\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n name: default-deny\n namespace: payments\nspec:\n podSelector: {}\n policyTypes: [\"Ingress\", \"Egress\"]\n",
      "scope": "pull-request",
      "examples": [
        {
          "snippet": "kind: NetworkPolicy\nmetadata:\n name: default-deny\n namespace: payments",
          "isCorrect": true
        },
        {
          "snippet": "kind: Deployment\nmetadata:\n name: payments-api\n namespace: payments",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "f3c5fb9b-5f0c-4e2a-9b8f-1d4c8b2a7e33",
      "buckets": [
        "infra-as-code",
        "security-hardening",
        "resilience-retries-idempotency"
      ]
    },
    {
      "title": "Add a PodDisruptionBudget for HA Deployments",
      "rule": "For Deployments with replicas ≥ 2, include a PodDisruptionBudget with minAvailable or maxUnavailable set.",
      "why_is_this_important": "PDBs preserve availability during voluntary disruptions such as node drains.",
      "severity": "Medium",
      "bad_example": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n name: auth\nspec:\n replicas: 3\n template: { }\n# (no PDB)",
      "good_example": "apiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n name: auth-pdb\nspec:\n maxUnavailable: 1\n selector:\n matchLabels:\n app: auth\n",
      "scope": "pull-request",
      "examples": [
        {
          "snippet": "kind: PodDisruptionBudget\nspec:\n minAvailable: 2",
          "isCorrect": true
        },
        { "snippet": "kind: Deployment\nspec:\n replicas: 3", "isCorrect": false }
      ],
      "language": "",
      "uuid": "9b2b136d-f1fd-4a2c-8c1d-6d8a3b3fbbba",
      "buckets": ["infra-as-code", "resilience-retries-idempotency"]
    },
    {
      "title": "Validate Terraform variables with types and constraints",
      "rule": "All variables must declare a type, default (when sensible), and validation blocks; mark sensitive inputs with sensitive=true.",
      "why_is_this_important": "Strongly-typed, validated inputs prevent unsafe applies and secrets leakage.",
      "severity": "Medium",
      "bad_example": "variable \"instance_type\" {}\n",
      "good_example": "variable \"instance_type\" {\n type = string\n validation {\n condition = contains([\"t3.medium\",\"t3.large\"], var.instance_type)\n error_message = \"instance_type must be an approved size.\"\n }\n}\nvariable \"db_password\" {\n type = string\n sensitive = true\n}\n",
      "scope": "file",
      "examples": [
        {
          "snippet": "variable \"db_password\" { type = string, sensitive = true }",
          "isCorrect": true
        },
        { "snippet": "variable \"db_password\" {}", "isCorrect": false }
      ],
      "language": "",
      "uuid": "c6b9f0e4-1c41-4d9b-8d1a-f0c9e6a3c4a2",
      "buckets": ["infra-as-code", "config-environment", "secrets-credentials"]
    },
    {
      "title": "Pin providers/modules and commit .terraform.lock.hcl",
      "rule": "Use version constraints for required_providers and modules, and include .terraform.lock.hcl in PRs that change dependencies.",
      "why_is_this_important": "Pinned versions and lockfiles ensure reproducible plans and safer rollbacks.",
      "severity": "High",
      "bad_example": "terraform {\n required_providers {\n aws = {}\n }\n}\nmodule \"vpc\" {\n source = \"terraform-aws-modules/vpc/aws\"\n}\n# (no lockfile in PR)",
      "good_example": "terraform {\n required_providers {\n aws = {\n source = \"hashicorp/aws\"\n version = \">= 5.0, < 6.0\"\n }\n }\n}\nmodule \"vpc\" {\n source = \"terraform-aws-modules/vpc/aws\"\n version = \"5.1.2\"\n}\n# .terraform.lock.hcl added\n",
      "scope": "pull-request",
      "examples": [
        {
          "snippet": "required_providers { aws = { version = \">= 5.0, < 6.0\" } }",
          "isCorrect": true
        },
        { "snippet": "required_providers { aws = {} }", "isCorrect": false }
      ],
      "language": "",
      "uuid": "2d3a1e4f-9ab5-4e2c-9f64-5d1e3b2c7a91",
      "buckets": [
        "infra-as-code",
        "dependency-supply-chain",
        "ci-cd-build-hygiene"
      ]
    },
    {
      "title": "Pin container images by digest in Helm/K8s",
      "rule": "Use immutable image digests (repo@sha256:...) instead of mutable tags for production workloads.",
      "why_is_this_important": "Digests provide deterministic deployments and avoid surprise upgrades.",
      "severity": "High",
      "bad_example": "image: myorg/api:latest\n",
      "good_example": "image: myorg/api@sha256:1f3c...deadbeef\n",
      "scope": "file",
      "examples": [
        { "snippet": "image: backend@sha256:abc123...", "isCorrect": true },
        { "snippet": "image: backend:1.2.3", "isCorrect": false }
      ],
      "language": "",
      "uuid": "e0a8a7c9-4a8b-4c18-9d3a-2fb8b1e9c7d2",
      "buckets": [
        "infra-as-code",
        "dependency-supply-chain",
        "security-hardening"
      ]
    },
    {
      "title": "Pulumi TS: secrets must use Config.requireSecret",
      "rule": "In Pulumi TypeScript programs, load sensitive values with new Config().requireSecret and pass as Secret<T>, never plain strings.",
      "why_is_this_important": "Secrets stay encrypted in state and are redacted in logs.",
      "severity": "Critical",
      "bad_example": "import * as pulumi from \"@pulumi/pulumi\";\nconst dbPassword = \"supersecret\";\nexport const pass = dbPassword;\n",
      "good_example": "import * as pulumi from \"@pulumi/pulumi\";\nconst cfg = new pulumi.Config();\nconst dbPassword = cfg.requireSecret(\"dbPassword\");\nexport const pass = dbPassword;\n",
      "scope": "file",
      "examples": [
        {
          "snippet": "const s = new pulumi.Config().requireSecret(\"dbPassword\");",
          "isCorrect": true
        },
        { "snippet": "const s = process.env.DB_PASSWORD;", "isCorrect": false }
      ],
      "language": "jsts",
      "uuid": "a3f7c9d2-5a1e-4f0a-b0f2-7c9d1e2f3a44",
      "buckets": ["infra-as-code", "secrets-credentials", "security-hardening"]
    },
    {
      "title": "Pulumi Go: protect critical resources from destroy",
      "rule": "For stateful/critical infra (state buckets, databases), create resources with pulumi.Protect(true) to block accidental destroy.",
      "why_is_this_important": "Protection guards against destructive updates and human error.",
      "severity": "High",
      "bad_example": "bucket, err := s3.NewBucket(ctx, \"prod-state\", &s3.BucketArgs{})\nif err != nil { return err }\n",
      "good_example": "bucket, err := s3.NewBucket(ctx, \"prod-state\", &s3.BucketArgs{}, pulumi.Protect(true))\nif err != nil { return err }\n",
      "scope": "file",
      "examples": [
        { "snippet": "pulumi.Protect(true)", "isCorrect": true },
        { "snippet": "// no Protect option", "isCorrect": false }
      ],
      "language": "go",
      "uuid": "5f6a9d2c-2f3e-4a9a-9b6d-1e2f3a4b5c6d",
      "buckets": ["infra-as-code", "resilience-retries-idempotency"]
    },
    {
      "title": "Require a plan artifact and policy checks in CI",
      "rule": "CI must run fmt/validate, produce and upload a plan artifact (e.g., terraform plan -out plan.bin), run policy-as-code (e.g., tfsec/checkov/conftest), and gate apply on manual approval for prod.",
      "why_is_this_important": "Automated, reproducible plans and policy checks reduce risk before apply.",
      "severity": "High",
      "bad_example": "steps:\n- run: terraform apply -auto-approve\n",
      "good_example": "steps:\n- run: terraform fmt -check && terraform validate\n- run: terraform plan -out plan.bin\n- run: tfsec . && checkov -d .\n- upload-artifact: plan.bin\n- environment: prod\n run: terraform apply plan.bin # requires manual approval\n",
      "scope": "pull-request",
      "examples": [
        {
          "snippet": "terraform plan -out plan.bin\n# upload artifact",
          "isCorrect": true
        },
        { "snippet": "terraform apply -auto-approve", "isCorrect": false }
      ],
      "language": "",
      "uuid": "7e3d1f5a-8c2b-4a1f-9d6e-2b3c4d5e6f70",
      "buckets": ["infra-as-code", "ci-cd-build-hygiene", "security-hardening"]
    },
    {
      "title": "Disallow public ingress without explicit allowlist",
      "rule": "For Ingress/Service of type LoadBalancer, require host/path allowlist and TLS; forbid 0.0.0.0/0 exposure without WAF or Auth.",
      "why_is_this_important": "Prevents accidental public exposure of internal services.",
      "severity": "Critical",
      "bad_example": "apiVersion: v1\nkind: Service\nspec:\n type: LoadBalancer\n ports: [{ port: 80 }]\n",
      "good_example": "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n annotations:\n nginx.ingress.kubernetes.io/whitelist-source-range: 10.0.0.0/8,192.168.0.0/16\nspec:\n tls:\n - hosts: [\"app.example.com\"]\n secretName: app-tls\n rules:\n - host: app.example.com\n http: { paths: [...] }\n",
      "scope": "file",
      "examples": [
        {
          "snippet": "nginx.ingress.kubernetes.io/whitelist-source-range: 10.0.0.0/8",
          "isCorrect": true
        },
        {
          "snippet": "kind: Service\nspec:\n type: LoadBalancer",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "0c8a7b9e-1d2f-4a3b-9c0d-6e5f4a3b2c1d",
      "buckets": ["infra-as-code", "security-hardening", "api-conventions"]
    },
    {
      "title": "Helm charts must template resource names and labels consistently",
      "rule": "Use template helpers to set metadata.name and labels (app.kubernetes.io/) consistently across templates; prohibit hardcoded mismatches.",
      "why_is_this_important": "Consistent naming/labels improve upgrades, selectors, and observability.",
      "severity": "Medium",
      "bad_example": "{{- / deployment.yaml / -}}\nmetadata:\n name: users-api\n labels:\n app: users\n",
      "good_example": "{{- / _helpers.tpl / -}}\n{{- define \"app.fullname\" -}}{{ include \"app.name\" . }}-{{ .Release.Name }}{{- end }}\n---\n{{- / deployment.yaml */ -}}\nmetadata:\n name: {{ include \"app.fullname\" . }}\n labels:\n app.kubernetes.io/name: {{ include \"app.name\" . }}\n app.kubernetes.io/instance: {{ .Release.Name }}\n",
      "scope": "file",
      "examples": [
        {
          "snippet": "name: {{ include \"app.fullname\" . }}",
          "isCorrect": true
        },
        { "snippet": "name: users-api # hardcoded", "isCorrect": false }
      ],
      "language": "",
      "uuid": "4e2a7d9b-6c3f-4f1a-9a8b-2c7d1e3f5a6b",
      "buckets": ["infra-as-code", "style-conventions", "maintainability"]
    },
    {
      "title": "Keep a single lockfile at the repo root",
      "rule": "Permit exactly one lockfile at the monorepo root (pnpm-lock.yaml, yarn.lock, or package-lock.json). Forbid lockfiles inside workspace packages. Validate against PR changes and existing tree.",
      "why_is_this_important": "Root-only lockfiles avoid divergent dependency graphs and flaky builds in workspaces.",
      "severity": "High",
      "bad_example": "{\n \"changedFiles\": [\n \"packages/web/yarn.lock\",\n \"packages/api/package-lock.json\"\n ]\n}",
      "good_example": "{\n \"changedFiles\": [\n \"pnpm-lock.yaml\",\n \"packages/web/src/App.tsx\"\n ]\n}",
      "scope": "pull-request",
      "examples": [
        { "snippet": "packages/app/yarn.lock", "isCorrect": false },
        { "snippet": "pnpm-lock.yaml", "isCorrect": true }
      ],
      "language": "",
      "uuid": "f9a2c9c3-2d6b-4a4e-9c9a-1c0a0fb8d4b7",
      "buckets": [
        "monorepo-hygiene",
        "dependency-supply-chain",
        "ci-cd-build-hygiene"
      ]
    },
    {
      "title": "Enforce a single package manager via packageManager field",
      "rule": "Root package.json must define the packageManager field (e.g., \"pnpm@9.x\") and the repo must not contain other lockfiles or tool config (e.g., yarn.lock, package-lock.json) conflicting with that choice.",
      "why_is_this_important": "Guarantees consistent tooling and cache behavior across all workspaces.",
      "severity": "High",
      "bad_example": "{\n \"name\": \"repo\",\n \"packageManager\": \"npm@10.6.0\"\n}\n// and PR adds yarn.lock",
      "good_example": "{\n \"name\": \"repo\",\n \"packageManager\": \"pnpm@9.4.0\"\n}\n// only pnpm-lock.yaml at root",
      "scope": "pull-request",
      "examples": [
        {
          "snippet": "package.json { \"packageManager\": \"pnpm@9.4.0\" }",
          "isCorrect": true
        },
        { "snippet": "yarn.lock", "isCorrect": false }
      ],
      "language": "",
      "uuid": "2c1b7a74-05e4-4a2a-9e9c-9a1e3a9f5b1f",
      "buckets": ["monorepo-hygiene", "ci-cd-build-hygiene", "maintainability"]
    },
    {
      "title": "Tighten workspace globs in pnpm-workspace.yaml",
      "rule": "In pnpm-workspace.yaml, explicitly list workspace globs (e.g., \"apps/\", \"packages/\") and exclude build outputs (e.g., \"/dist\", \"/build\"). Forbid catch-all patterns like \"*\" or \"\".",
      "why_is_this_important": "Precise workspace selection prevents accidental inclusion of tooling or build artifacts as packages.",
      "severity": "Medium",
      "bad_example": "packages:\n - \"\"",
      "good_example": "packages:\n - \"apps/\"\n - \"packages/\"\n - \"tooling/\"\n - \"!/dist\"\n - \"!/build\"",
      "scope": "file",
      "examples": [
        { "snippet": "packages:\n - \"\"", "isCorrect": false },
        {
          "snippet": "packages:\n - \"apps/\"\n - \"packages/\"",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "b0a0d2d6-4d2c-4f7a-8d2a-8b0f6b0a1a22",
      "buckets": ["monorepo-hygiene", "maintainability"]
    },
    {
      "title": "Turbo pipeline must declare dependencies and outputs",
      "rule": "In turbo.json, each task must set dependsOn (e.g., \"^build\") and outputs (e.g., \"dist/\"). Require cache:true for build/test/lint pipelines unless explicitly justified.",
      "why_is_this_important": "A correct build graph and declared outputs enable incremental builds and consistent caching across workspaces.",
      "severity": "Medium",
      "bad_example": "{\n \"pipeline\": {\n \"build\": {}\n }\n}",
      "good_example": "{\n \"pipeline\": {\n \"build\": { \"outputs\": [\"dist/\"], \"cache\": true },\n \"test\": { \"dependsOn\": [\"build\"], \"outputs\": [\"coverage/\"], \"cache\": true },\n \"lint\": { \"outputs\": [] }\n }\n}",
      "scope": "file",
      "examples": [
        { "snippet": "\"pipeline\": { \"build\": {} }", "isCorrect": false },
        {
          "snippet": "\"pipeline\": { \"build\": { \"outputs\": [\"dist/\"], \"cache\": true } }",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "5fa8e8a7-7a9a-4e2e-9f1a-1e6a6d1a9c77",
      "buckets": [
        "monorepo-hygiene",
        "ci-cd-build-hygiene",
        "performance-efficiency"
      ]
    },
    {
      "title": "Require Changeset for publishable package changes",
      "rule": "If a PR modifies a workspace with \"private\": false in its package.json, enforce a .changeset/*.md entry describing semver impact for each affected package.",
      "why_is_this_important": "Changesets keep versioning and release notes consistent across multiple packages.",
      "severity": "High",
      "bad_example": "{\n \"changedFiles\": [\n \"packages/ui/src/Button.tsx\",\n \"packages/ui/package.json\"\n ],\n \"changeset\": false\n}",
      "good_example": "{\n \"changedFiles\": [\n \"packages/ui/src/Button.tsx\"\n ],\n \"changeset\": \".changeset/bright-buttons.md\"\n}",
      "scope": "pull-request",
      "examples": [
        { "snippet": ".changeset/some-change.md", "isCorrect": true },
        { "snippet": "// no .changeset file", "isCorrect": false }
      ],
      "language": "",
      "uuid": "c7d2b1a0-4f59-4c58-8a35-4a1c6ec0b2b9",
      "buckets": [
        "monorepo-hygiene",
        "api-contracts-versioning",
        "maintainability"
      ]
    },
    {
      "title": "Forbid cross-package relative imports in JS/TS",
      "rule": "In JS/TS workspaces, imports must use workspace package names (as defined in each package.json and exports) rather than relative paths crossing package boundaries.",
      "why_is_this_important": "Stable package imports preserve boundaries and avoid duplicate module copies and cyclic graphs.",
      "severity": "High",
      "bad_example": "import { Button } from \"../../ui/src/Button\"",
      "good_example": "import { Button } from \"@acme/ui\"",
      "scope": "file",
      "examples": [
        {
          "snippet": "import x from \"../../other-pkg/index\"",
          "isCorrect": false
        },
        { "snippet": "import x from \"@acme/other-pkg\"", "isCorrect": true }
      ],
      "language": "jsts",
      "uuid": "8d7b5a1e-02d8-4a8d-9f6b-2a1f5b6e7c90",
      "buckets": [
        "monorepo-hygiene",
        "module-architecture",
        "duplication-complexity"
      ]
    },
    {
      "title": "Enable TS project references for depended packages",
      "rule": "When a TS package depends on another workspace package, tsconfig.json must set \"composite\": true and include a \"references\" entry to the dependency; root must aggregate paths via tsconfig.base.json if used.",
      "why_is_this_important": "Project references give correct incremental builds and type isolation in monorepos.",
      "severity": "Medium",
      "bad_example": "{\n \"compilerOptions\": { \"target\": \"ES2020\" }\n}",
      "good_example": "{\n \"compilerOptions\": { \"composite\": true, \"declaration\": true },\n \"references\": [{ \"path\": \"../core\" }]\n}",
      "scope": "file",
      "examples": [
        {
          "snippet": "\"references\": [{ \"path\": \"../core\" }]",
          "isCorrect": true
        },
        {
          "snippet": "\"compilerOptions\": { \"composite\": false }",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "uuid": "e0d5e6a4-6a92-4b5d-9d1f-4a7d2f3b1c22",
      "buckets": ["monorepo-hygiene", "maintainability", "performance-efficiency"]
    },
    {
      "title": "Use go.work at repo root instead of replace in modules",
      "rule": "Maintain a single go.work at the monorepo root listing all local modules via use directives. Forbid go.mod replace directives that point to sibling modules (e.g., ../pkg) in workspace modules.",
      "why_is_this_important": "go.work provides a consistent build graph and avoids ad-hoc replaces that break tooling.",
      "severity": "High",
      "bad_example": "module github.com/acme/service\n\nrequire github.com/acme/lib v0.0.0\nreplace github.com/acme/lib => ../lib",
      "good_example": "go 1.22\n\nuse (\n ./services/service\n ./libs/lib\n)",
      "scope": "file",
      "examples": [
        {
          "snippet": "replace github.com/acme/lib => ../lib",
          "isCorrect": false
        },
        {
          "snippet": "go.work\nuse ( ./services/service ./libs/lib )",
          "isCorrect": true
        }
      ],
      "language": "go",
      "uuid": "a6d3b9d2-4f5b-4f2e-8d1a-7c2e1b0a6f55",
      "buckets": ["monorepo-hygiene", "module-architecture"]
    },
    {
      "title": "Centralize Rust deps with workspace.dependencies",
      "rule": "In the root Cargo.toml, define [workspace] members and manage shared versions under [workspace.dependencies]. Member Cargo.toml files must not pin versions for crates declared centrally.",
      "why_is_this_important": "Centralized dependencies avoid version skew and duplicate builds across crates.",
      "severity": "Medium",
      "bad_example": "[package]\nname = \"core\"\n\n[dependencies]\nserde = \"1.0.197\"",
      "good_example": "[workspace]\nmembers = [\"crates/core\", \"crates/api\"]\n\n[workspace.dependencies]\nserde = \"1.0\"\n\n# crates/core/Cargo.toml\n[dependencies]\nserde = { workspace = true }",
      "scope": "file",
      "examples": [
        {
          "snippet": "serde = \"1.0\" # in [workspace.dependencies]",
          "isCorrect": true
        },
        {
          "snippet": "serde = \"1.0.197\" # pinned in member crate",
          "isCorrect": false
        }
      ],
      "language": "rust",
      "uuid": "d2ce5d87-0f6d-4c9e-9a0e-3d4c2b1a7f18",
      "buckets": [
        "monorepo-hygiene",
        "dependency-supply-chain",
        "maintainability"
      ]
    },
    {
      "title": "Gradle: define modules in settings.gradle and use version catalogs",
      "rule": "List all included builds/modules in settings.gradle and manage versions via gradle/libs.versions.toml (version catalogs). Forbid hardcoded versions and repo declarations in module build.gradle files.",
      "why_is_this_important": "Centralized module graph and versions make multi-module builds reproducible.",
      "severity": "Medium",
      "bad_example": "// app/build.gradle\nrepositories { mavenCentral() }\ndependencies { implementation \"org.slf4j:slf4j-api:2.0.13\" }",
      "good_example": "// settings.gradle\ninclude(\":app\", \":core\")\nenableFeaturePreview(\"TYPESAFE_PROJECT_ACCESSORS\")\n\n// gradle/libs.versions.toml\n[versions]\nslf4j = \"2.0.13\"\n\n[libraries]\nslf4j = { module = \"org.slf4j:slf4j-api\", version.ref = \"slf4j\" }",
      "scope": "file",
      "examples": [
        {
          "snippet": "dependencies { implementation libs.slf4j }",
          "isCorrect": true
        },
        {
          "snippet": "dependencies { implementation \"org.slf4j:slf4j-api:2.0.13\" }",
          "isCorrect": false
        }
      ],
      "language": "java",
      "uuid": "7b3adf3f-4f3e-4cfe-9a2d-3c0e7f8a9b6a",
      "buckets": ["monorepo-hygiene", "ci-cd-build-hygiene", "maintainability"]
    },
    {
      "title": "Central Package Management for .NET",
      "rule": "Use Directory.Packages.props at the repo root to declare PackageVersion entries. Workspace .csproj files must reference packages without embedding Version attributes.",
      "why_is_this_important": "Central management prevents version drift across solutions in a monorepo.",
      "severity": "Medium",
      "bad_example": "<Project>\n <ItemGroup>\n <PackageReference Include=\"Serilog\" Version=\"3.1.1\" />\n </ItemGroup>\n</Project>",
      "good_example": "<!-- Directory.Packages.props -->\n<Project>\n <ItemGroup>\n <PackageVersion Include=\"Serilog\" Version=\"3.1.1\" />\n </ItemGroup>\n</Project>\n\n<!-- app.csproj -->\n<Project>\n <ItemGroup>\n <PackageReference Include=\"Serilog\" />\n </ItemGroup>\n</Project>",
      "scope": "file",
      "examples": [
        {
          "snippet": "<PackageVersion Include=\"Serilog\" Version=\"3.1.1\" />",
          "isCorrect": true
        },
        {
          "snippet": "<PackageReference Include=\"Serilog\" Version=\"3.1.1\" />",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "uuid": "4f8f2a1d-9a7c-4b3e-8c9f-6b2a5d7e1c3a",
      "buckets": [
        "monorepo-hygiene",
        "dependency-supply-chain",
        "maintainability"
      ]
    },
    {
      "title": "Disallow per-package registries and proxies",
      "rule": "Registry configuration (e.g., .npmrc, .yarnrc.yml) must live at the monorepo root. Forbid .npmrc files inside workspace packages overriding registry auth or URL.",
      "why_is_this_important": "Single source of truth for registries reduces supply-chain and publishing mistakes.",
      "severity": "High",
      "bad_example": "packages/ui/.npmrc\nregistry=https://registry.example.com/\n//overrides root",
      "good_example": ".npmrc\nregistry=https://registry.npmjs.org/\n@acme:registry=https://npm.pkg.github.com",
      "scope": "file",
      "examples": [
        { "snippet": "packages/ui/.npmrc", "isCorrect": false },
        {
          "snippet": ".npmrc\n@scope:registry=https://npm.pkg.github.com",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "a2a0b6b3-7c4e-4c0f-9a2e-0f6d1b2c3d4e",
      "buckets": [
        "monorepo-hygiene",
        "dependency-supply-chain",
        "security-hardening"
      ]
    },
    {
      "title": "SBT: keep scalaVersion and versions centralized",
      "rule": "Define scalaVersion and library versions in version.sbt or ThisBuild in build.sbt; modules must not override scalaVersion or pin conflicting dependency versions locally.",
      "why_is_this_important": "Centralized versions keep cross-module binary compatibility and deterministic builds.",
      "severity": "Medium",
      "bad_example": "// modules/api/build.sbt\nscalaVersion := \"2.13.14\"\nlibraryDependencies += \"org.typelevel\" %% \"cats-core\" % \"2.10.0\"",
      "good_example": "// version.sbt\nThisBuild / scalaVersion := \"2.13.14\"\n\n// build.sbt\nlazy val core = project.in(file(\"modules/core\"))\nlazy val api = project.in(file(\"modules/api\")).dependsOn(core)",
      "scope": "file",
      "examples": [
        {
          "snippet": "ThisBuild / scalaVersion := \"2.13.14\"",
          "isCorrect": true
        },
        {
          "snippet": "lazy val api = project.settings(scalaVersion := \"3.4.1\")",
          "isCorrect": false
        }
      ],
      "language": "scala",
      "uuid": "b7f3c4e1-2a59-4e0a-a1c2-ef1b23a4d5c6",
      "buckets": ["monorepo-hygiene", "maintainability", "ci-cd-build-hygiene"]
    },
    {
      "title": "Do not log PHI; mask and drop sensitive fields",
      "rule": "Never write Protected Health Information (PHI/ePHI) to logs. Redact fields like name, SSN, MRN, DOB, address, diagnoses, and lab results; store only non-identifying metadata and a stable request trace id. If logging is required for troubleshooting, replace values with consistent tokens and record access separately in the audit log.",
      "why_is_this_important": "HIPAA requires safeguarding PHI; logging PHI creates uncontrolled copies and disclosure risk.",
      "severity": "High",
      "bad_example": "log.info(\"GET /patients/{id}\", { patientName, ssn, mrn, dob, diagnosis })",
      "good_example": "log.info(\"GET /patients/{id}\", { traceId, route:\"/patients/:id\", status:200 }) // audit_log.write({ action:\"READ_PHI\", subject: userId, resource: patientId, purpose: header.Purpose-Of-Use })",
      "scope": "file",
      "examples": [
        { "snippet": "logger.info({ mrn, diagnosis })", "isCorrect": false },
        {
          "snippet": "logger.info({ traceId, status }); /* audit_log.write({action:\"READ_PHI\",subject:userId,resource:patientId}) */",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "f338a093-2d4a-4c70-a1d0-c234e58a9c66",
      "buckets": [
        "compliance-hipaa",
        "observability-logging",
        "privacy-pii",
        "security-hardening"
      ]
    },
    {
      "title": "Encrypt ePHI at rest with KMS-managed AES-256 and envelope keys",
      "rule": "Before persisting ePHI, encrypt using a data key protected by a Key Management Service (KMS). Use authenticated encryption (AES-256-GCM or equivalent), rotate keys, and store the key id and algorithm with the record.",
      "why_is_this_important": "HIPAA technical safeguards require protecting ePHI at rest with strong, auditable encryption and key management.",
      "severity": "Critical",
      "bad_example": "db.Exec(\"INSERT INTO records (patient_id, note) VALUES (?, ?)\", id, note) // plaintext ePHI",
      "good_example": "ct, kid := kms.Encrypt(ctx, dataKeyAlias, ephiBytes) ; db.Exec(\"INSERT INTO records (patient_id, blob, kid) VALUES (?,?,?)\", id, ct, kid)",
      "scope": "file",
      "examples": [
        {
          "snippet": "db.Save(Record{Note: note}) // plaintext",
          "isCorrect": false
        },
        {
          "snippet": "cipher, kid := kms.Encrypt(ctx, \"alias/phi-data\", ephi)\ndb.Save(Record{Blob: cipher, KMSKeyID: kid})",
          "isCorrect": true
        }
      ],
      "language": "go",
      "uuid": "2c29f220-1cd1-4f75-8d3a-6a2a9f19515b",
      "buckets": [
        "compliance-hipaa",
        "security-hardening",
        "dependency-supply-chain",
        "maintainability"
      ]
    },
    {
      "title": "Enforce “minimum necessary” data selection in queries",
      "rule": "When reading from PHI tables, project only authorized fields and avoid SELECT *. Implement whitelists per role and document them. Reject requests lacking a Purpose-Of-Use justification.",
      "why_is_this_important": "HIPAA’s minimum necessary standard reduces exposure by limiting PHI to what’s required for a task.",
      "severity": "High",
      "bad_example": "@Query(\"SELECT * FROM patients WHERE id=:id\") Patient find(@Param(\"id\") Long id);",
      "good_example": "interface PatientView { String getInitials(); LocalDate getDob(); }\n@Query(\"SELECT p.initials AS initials, p.dob AS dob FROM Patient p WHERE p.id=:id\") PatientView findView(@Param(\"id\") Long id);",
      "scope": "file",
      "examples": [
        { "snippet": "SELECT * FROM patients WHERE id=?", "isCorrect": false },
        {
          "snippet": "SELECT initials, dob FROM patients WHERE id=?",
          "isCorrect": true
        }
      ],
      "language": "java",
      "uuid": "b4ea9698-0f7f-4a19-8c04-cf43696bc561",
      "buckets": [
        "compliance-hipaa",
        "privacy-pii",
        "api-conventions",
        "database-query-performance"
      ]
    },
    {
      "title": "Write immutable audit logs for all ePHI access",
      "rule": "For any handler that reads or writes ePHI, write an append-only audit record with user id, patient id, action (READ_PHI/WRITE_PHI), purpose-of-use, timestamp, and request id. Prevent deletion or mutation of audit entries.",
      "why_is_this_important": "HIPAA requires traceability of PHI access; robust audit trails support detection and incident response.",
      "severity": "High",
      "bad_example": "app.get('/patients/:id', async (req,res)=>{ const p=await repo.find(req.params.id); res.json(p); })",
      "good_example": "app.get('/patients/:id', async (req,res)=>{ const p=await repo.findMinimal(req.params.id); await auditLog.write({action:'READ_PHI', user:req.user.sub, patient:req.params.id, pou:req.get('Purpose-Of-Use'), rid:req.id}); res.json(p); })",
      "scope": "file",
      "examples": [
        { "snippet": "return repo.find(id) // no audit", "isCorrect": false },
        {
          "snippet": "await auditLog.write({action:'READ_PHI',user:sub,patient:id})",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "0afa51bd-e346-4e63-af0b-8f9b605fb5e2",
      "buckets": [
        "compliance-hipaa",
        "observability-logging",
        "security-hardening",
        "api-conventions"
      ]
    },
    {
      "title": "Introduce an auditable “break-glass” path only with justification",
      "rule": "Emergency access to ePHI must go through a dedicated break_glass path that requires reason, approver, limited time window, and automatic post-incident review. The PR must include changes to the audit log schema and runbook.",
      "why_is_this_important": "HIPAA allows emergency access but mandates accountability and post-access review.",
      "severity": "High",
      "bad_example": "PR description:\n\"Adds /emergency-access endpoint\"",
      "good_example": "PR description:\n- Add POST /break_glass with required {reason, approverId, expiresAt}\n- Audit: audit_log.action=BREAK_GLASS, fields {reason, approverId}\n- Runbook: incident-review.md updated\n- Alerts: pager rule for BREAK_GLASS events",
      "scope": "pull-request",
      "examples": [
        {
          "snippet": "- Add /emergency-access\n- no audit updates",
          "isCorrect": false
        },
        {
          "snippet": "- Add /break_glass with reason+approver\n- Update audit schema and runbook",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "89586960-9738-49b3-91d4-3504994f8539",
      "buckets": [
        "compliance-hipaa",
        "docs-adrs",
        "observability-logging",
        "pr-hygiene"
      ]
    },
    {
      "title": "Enforce TLS 1.2+ and HSTS for all ePHI endpoints",
      "rule": "Applications serving ePHI must require HTTPS, disable insecure ciphers, and enable HSTS with preload and includeSubDomains. Reject cleartext HTTP requests.",
      "why_is_this_important": "HIPAA transmission security requires protecting ePHI in transit.",
      "severity": "High",
      "bad_example": "app.UseRouting(); // accepts HTTP without HSTS",
      "good_example": "app.UseHsts(); app.UseHttpsRedirection();\napp.Use(async (ctx,next)=>{ if(!ctx.Request.IsHttps) return; await next(); });",
      "scope": "file",
      "examples": [
        {
          "snippet": "// no HTTPS enforcement\napp.UseRouting();",
          "isCorrect": false
        },
        {
          "snippet": "app.UseHsts(); app.UseHttpsRedirection();",
          "isCorrect": true
        }
      ],
      "language": "csharp",
      "uuid": "d8a20a77-afeb-4c34-8ddb-955529eea2f5",
      "buckets": ["compliance-hipaa", "security-hardening", "api-conventions"]
    },
    {
      "title": "De-identify analytics and block PHI egress to third parties",
      "rule": "Any PR that adds or modifies telemetry/analytics must prove that no PHI leaves the boundary. Use irreversible tokenization or hashing (HMAC with secret salt) for identifiers and document the data dictionary.",
      "why_is_this_important": "Sending PHI to vendors without BAAs risks violations; de-identification reduces exposure.",
      "severity": "High",
      "bad_example": "PR code adds: analytics.track('view_record', { name, dob, diagnosis })",
      "good_example": "PR code uses: analytics.track('view_record', { patient_token: hmac(patientId), age_bucket: '40-49' })\nPR includes: analytics_data_dictionary.md",
      "scope": "pull-request",
      "examples": [
        {
          "snippet": "analytics.track('lab', { patientName })",
          "isCorrect": false
        },
        {
          "snippet": "analytics.track('lab', { patient_token: hmac(patientId) })",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "f86779c2-727d-4b2c-a5c1-32de6c2e2e84",
      "buckets": [
        "compliance-hipaa",
        "privacy-pii",
        "dependency-supply-chain",
        "docs-adrs"
      ]
    },
    {
      "title": "Protect backups/exports of ePHI with KMS and restricted buckets",
      "rule": "Write ePHI backups to storage with server-side encryption (SSE-KMS) and least-privilege access; disallow public ACLs and cross-account access without a BAA. Record the KMS key id in metadata.",
      "why_is_this_important": "Backups contain full datasets; encryption and access controls prevent bulk disclosure.",
      "severity": "High",
      "bad_example": "s3.put_object().bucket(\"phi-backups\").body(data).send().await?; // no encryption",
      "good_example": "s3.put_object().bucket(\"phi-backups\").server_side_encryption(\"aws:kms\").ssekms_key_id(kid).metadata(\"kms-kid\", kid).body(data).send().await?;",
      "scope": "file",
      "examples": [
        {
          "snippet": "put_object(bucket,\"phi-backups\", data) // default",
          "isCorrect": false
        },
        {
          "snippet": "put_object_kms(bucket,\"phi-backups\", kid, data)",
          "isCorrect": true
        }
      ],
      "language": "rust",
      "uuid": "9a9e631f-cf55-4f3a-88dc-f0c57ada021d",
      "buckets": [
        "compliance-hipaa",
        "security-hardening",
        "infra-as-code",
        "container-docker-hygiene"
      ]
    },
    {
      "title": "Check consent and role-based authorization before returning ePHI",
      "rule": "Handlers must verify the requester’s role and a valid consent/relationship (e.g., care team assignment) before disclosing ePHI; include Purpose-Of-Use in the decision and audit the outcome.",
      "why_is_this_important": "HIPAA requires access control and disclosure tracking to limit ePHI to authorized use.",
      "severity": "Critical",
      "bad_example": "get(\"/patients/{id}\") { call.respond(repo.find(call.parameters[\"id\"])) }",
      "good_example": "get(\"/patients/{id}\") { val id = call.parameters[\"id\"]!!; require(authz.canView(user, id, call.request.headers[\"Purpose-Of-Use\"])) ; audit.write(ReadPhi(user.id,id)); call.respond(repo.findView(id)) }",
      "scope": "file",
      "examples": [
        { "snippet": "respond(patient) // no authz", "isCorrect": false },
        {
          "snippet": "if (authz.canView(user,id,pou)) respond(view)",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "5c113cbd-0a72-4f85-8e49-6fba9c3ce492",
      "buckets": [
        "compliance-hipaa",
        "security-hardening",
        "api-conventions",
        "observability-logging"
      ]
    },
    {
      "title": "Implement retention policy and purge jobs for ePHI",
      "rule": "Changes that create new ePHI stores must also include retention configuration and a scheduled purge job aligned to policy (e.g., 6 years). Document tables/collections covered and add tests for TTL behavior.",
      "why_is_this_important": "HIPAA requires policies for retention and disposal; automated purges reduce residual risk.",
      "severity": "Medium",
      "bad_example": "PR: adds table phi_lab_results with no TTL or purge plan",
      "good_example": "PR: adds phi_lab_results + retention.yaml (ttl: 6y) + purge_job cron + tests verifying deletion of expired rows",
      "scope": "pull-request",
      "examples": [
        {
          "snippet": "CREATE TABLE phi_events (...); -- no ttl",
          "isCorrect": false
        },
        {
          "snippet": "retention.yaml: { table: phi_events, ttl: 6y }\ncron: purge_phi_events @daily",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "9c5e49bd-4e6f-4c70-9fd6-6dc986c4b5b7",
      "buckets": [
        "compliance-hipaa",
        "maintainability",
        "docs-adrs",
        "ci-cd-build-hygiene"
      ]
    },
    {
      "title": "Load PHI-related secrets from a secret manager, never from code",
      "rule": "Access tokens, HMAC salts, and KMS keys for PHI flows must come from a secret manager or encrypted credentials store; forbid committing secrets or .env files to the repo.",
      "why_is_this_important": "Leaked secrets can expose PHI and encryption material.",
      "severity": "High",
      "bad_example": "HMAC_SALT = \"dev-salt-123\" # committed\nENV['KMS_KEY_ID'] = 'hardcoded'",
      "good_example": "salt = Rails.application.credentials.dig(:phi, :hmac_salt)\nkid = Rails.application.credentials.dig(:kms, :key_id)",
      "scope": "file",
      "examples": [
        { "snippet": "API_KEY='abc123' # in repo", "isCorrect": false },
        {
          "snippet": "Rails.application.credentials[:phi][:hmac_salt]",
          "isCorrect": true
        }
      ],
      "language": "ruby",
      "uuid": "2e40d01d-d766-41f6-ae91-8b9a4f977d6c",
      "buckets": [
        "compliance-hipaa",
        "secrets-credentials",
        "security-hardening",
        "dependency-supply-chain"
      ]
    },
    {
      "title": "Require MFA for admin actions touching ePHI",
      "rule": "Endpoints under /admin or privileged routes that can view or export ePHI must enforce multi-factor authentication and recent re-auth (e.g., within 15 minutes).",
      "why_is_this_important": "Stronger auth reduces risk of unauthorized disclosure of PHI.",
      "severity": "High",
      "bad_example": "Route::middleware('auth')->get('/admin/export-phi', fn()=>Export::run());",
      "good_example": "Route::middleware(['auth','mfa.recent:15'])->get('/admin/export-phi', fn()=>Export::run());",
      "scope": "file",
      "examples": [
        {
          "snippet": "Route::middleware('auth')->get('/admin/phi', ...);",
          "isCorrect": false
        },
        {
          "snippet": "Route::middleware(['auth','mfa.recent:15'])->get('/admin/phi', ...);",
          "isCorrect": true
        }
      ],
      "language": "php",
      "uuid": "ba2a97f2-92c1-4606-a2fa-7a9f281260f3",
      "buckets": ["compliance-hipaa", "security-hardening", "api-conventions"]
    },
    {
      "title": "Mask PII in logs (CPF, email, phone)",
      "rule": "Never write raw personal data to logs. Apply irreversible masking/redaction (e.g., CPF → ..-; emails → f**@domain.com). Include the LGPD purpose in the log context and prefer structured logging.",
      "why_is_this_important": "LGPD requires data minimization and security of processing; logs often persist beyond retention windows and can leak PII.",
      "severity": "High",
      "bad_example": "logger.info(\"login\", { cpf, email, phone })",
      "good_example": "function maskCPF(c){ return c.replace(/\\d(?=\\d{2})/g, \"\"); }\\nfunction maskEmail(e){ const [u,d]=e.split(\"@\"); return (u[0]||\"\")+\"@\"+d; }\\nlogger.info(\"login\", { cpf: maskCPF(cpf), email: maskEmail(email), phone: \"\" })",
      "scope": "file",
      "examples": [
        {
          "snippet": "logger.info(\"export\", { email: maskEmail(user.email) })",
          "isCorrect": true
        },
        {
          "snippet": "logger.info(\"export\", { email: user.email })",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "b9a7d0e2-0c1e-4e3a-9d8c-6d1c9f2f5c11",
      "buckets": ["compliance-lgpd", "observability-logging", "privacy-pii"]
    },
    {
      "title": "Encrypt PII at rest with AES-GCM and managed keys",
      "rule": "For fields like CPF, birth_date, and address, use AES-256-GCM with envelope encryption. Keys must come from a managed KMS; rotate data keys at least annually and store key IDs with the ciphertext.",
      "why_is_this_important": "LGPD mandates security of personal data; authenticated encryption plus key management reduces breach impact.",
      "severity": "Critical",
      "bad_example": "byte[] cipher = simpleAesEncrypt(\"secret-key\", plaintext);",
      "good_example": "var kmsKeyId = System.getenv(\"KMS_PRIMARY_KEY\");\\nSecretKey dataKey = KmsClient.generateDataKey(kmsKeyId);\\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\\nc.init(Cipher.ENCRYPT_MODE, dataKey);\\nbyte[] ct = c.doFinal(plaintext);\\nstore(userId, ct, dataKey.getKeyId());",
      "scope": "file",
      "examples": [
        {
          "snippet": "Cipher.getInstance(\"AES/GCM/NoPadding\")",
          "isCorrect": true
        },
        {
          "snippet": "Cipher.getInstance(\"AES/CBC/PKCS5Padding\") // no auth tag",
          "isCorrect": false
        }
      ],
      "language": "java",
      "uuid": "c3b2a0f4-6a5e-4b8d-9a3b-3c2a5d9f0e22",
      "buckets": ["compliance-lgpd", "security-hardening"]
    },
    {
      "title": "Require explicit consent before processing sensitive data",
      "rule": "Before handling sensitive personal data (e.g., health, biometric), verify a valid consent record and attach its ID to the processing context. Provide a path to revoke consent and stop further processing.",
      "why_is_this_important": "Consent is a lawful basis under LGPD for sensitive data; traceability reduces unlawful processing risk.",
      "severity": "Critical",
      "bad_example": "app.post('/health-metrics', (req,res)=>{ save(req.body); res.sendStatus(204); })",
      "good_example": "app.post('/health-metrics', requireConsent(['health']), (req,res)=>{ save(req.body, { consentId: req.consentId }); res.sendStatus(204); })\\nfunction requireConsent(scopes){ return (req,res,next)=>{ const id=req.header('x-consent-id'); if(!id||!ConsentStore.valid(id,scopes)) return res.status(403).end(); req.consentId=id; next(); } }",
      "scope": "file",
      "examples": [
        {
          "snippet": "fetch('/health-metrics',{ headers:{'x-consent-id': cid }})",
          "isCorrect": true
        },
        {
          "snippet": "fetch('/health-metrics') // missing consent",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "uuid": "2b8a0b1e-2d6b-4a1a-9e77-0a0b4f0f8c33",
      "buckets": ["compliance-lgpd", "api-conventions", "security-hardening"]
    },
    {
      "title": "Purpose limitation for analytics (no direct identifiers)",
      "rule": "Do not send direct identifiers (email, CPF) to analytics. Use an HMAC-based pseudonymous ID derived from user ID and a rotating key; never reversible without server secret.",
      "why_is_this_important": "LGPD requires purpose limitation and data minimization; pseudonymization reduces re-identification risk.",
      "severity": "High",
      "bad_example": "Analytics.track('login', email: current_user.email)",
      "good_example": "rotating_key = ENV.fetch('ANON_KEY')\\nanon_id = OpenSSL::HMAC.hexdigest('SHA256', rotating_key, current_user.id.to_s)\\nAnalytics.track('login', anon_id: anon_id)",
      "scope": "file",
      "examples": [
        {
          "snippet": "OpenSSL::HMAC.hexdigest('SHA256', key, uid)",
          "isCorrect": true
        },
        {
          "snippet": "Analytics.track('login', email: user.email)",
          "isCorrect": false
        }
      ],
      "language": "ruby",
      "uuid": "7f1e3c29-5b4c-4d9a-8b5a-2e8f1d7c4a44",
      "buckets": ["compliance-lgpd", "privacy-pii", "performance-efficiency"]
    },
    {
      "title": "Retention: set TTLs for caches and temp stores with PII",
      "rule": "All cache entries containing PII must set an explicit TTL aligned to the retention policy (e.g., 24h). No indefinite storage of personal data in Redis or in-memory caches.",
      "why_is_this_important": "LGPD requires limiting retention to the necessary period; caches often bypass normal data lifecycle.",
      "severity": "High",
      "bad_example": "rdb.Set(ctx, key, json, 0) // no expiration",
      "good_example": "ttl := 24 * time.Hour\\nrdb.Set(ctx, key, json, ttl)",
      "scope": "file",
      "examples": [
        {
          "snippet": "rdb.Set(ctx, \"user:pii\", payload, 24*time.Hour)",
          "isCorrect": true
        },
        {
          "snippet": "rdb.Set(ctx, \"user:pii\", payload, 0)",
          "isCorrect": false
        }
      ],
      "language": "go",
      "uuid": "f4e2d1c9-9a6b-4b5d-8c33-1a2b3c4d5e55",
      "buckets": ["compliance-lgpd", "caching-strategy", "config-environment"]
    },
    {
      "title": "DSAR export: include only allowed fields and redact sensitive notes",
      "rule": "Data subject export endpoints must whitelist fields and redact internal notes, tokens, and third-party IDs. Generate machine-readable output and log the lawful basis for the export.",
      "why_is_this_important": "LGPD grants access/portability rights but prohibits excessive disclosure.",
      "severity": "High",
      "bad_example": "$data = $user->toArray(); return response()->json($data);",
      "good_example": "$allowed = ['id','name','email','created_at'];\\n$out = Arr::only($user->toArray(), $allowed);\\n$out['notes'] = '[REDACTED]';\\nreturn response()->json($out);",
      "scope": "file",
      "examples": [
        {
          "snippet": "$out = Arr::only($user->toArray(), ['id','email'])",
          "isCorrect": true
        },
        {
          "snippet": "return response()->json($user->toArray())",
          "isCorrect": false
        }
      ],
      "language": "php",
      "uuid": "0f0e6b7a-4d2c-41f3-9c76-6f9b2a7d1c66",
      "buckets": ["compliance-lgpd", "api-conventions", "privacy-pii"]
    },
    {
      "title": "Deletion requests: anonymize or hard-delete PII irreversibly",
      "rule": "On LGPD deletion, remove or irreversibly anonymize PII and purge dependent caches. Keep minimal audit metadata (timestamp, request ID) not linkable back to the subject.",
      "why_is_this_important": "LGPD grants erasure; soft-deleting PII often keeps it recoverable and non-compliant.",
      "severity": "Critical",
      "bad_example": "user.IsActive = false; ctx.SaveChanges(); // PII still present",
      "good_example": "user.Email = null; user.Name = null; user.CpfHash = null; user.DeletedAt = DateTime.UtcNow; ctx.SaveChanges(); Cache.Remove($\"user:{id}\");",
      "scope": "file",
      "examples": [
        { "snippet": "user.Email = null; user.Name = null;", "isCorrect": true },
        { "snippet": "user.IsActive = false;", "isCorrect": false }
      ],
      "language": "csharp",
      "uuid": "a6c2f2c1-8b3f-49d7-b0c9-8d3a9e7f1a77",
      "buckets": ["compliance-lgpd", "migrations-backward-compat", "privacy-pii"]
    },
    {
      "title": "International transfers: enforce region allow-list for PII",
      "rule": "Before sending PII to processors, verify the destination region is approved (e.g., BR/EEA with SCC/DPA). Block requests that include personal data and target non-approved regions.",
      "why_is_this_important": "LGPD restricts cross-border transfers; technical controls prevent unlawful disclosures.",
      "severity": "High",
      "bad_example": "sendTo(\"us-east-1\", payloadWithCPF)",
      "good_example": "if (containsPII(data) && !isRegionAllowed(dest)) throw new Error(\"LGPD transfer blocked\");\\nsendTo(dest, minimize(data));",
      "scope": "file",
      "examples": [
        {
          "snippet": "if(containsPII(d)&&!isRegionAllowed(r)) throw Error()",
          "isCorrect": true
        },
        { "snippet": "sendTo(region, data)", "isCorrect": false }
      ],
      "language": "",
      "uuid": "5b9d0a1e-1c3b-4d6f-9f22-7a8b0c6d4e88",
      "buckets": [
        "compliance-lgpd",
        "security-hardening",
        "dependency-supply-chain"
      ]
    },
    {
      "title": "Children's data: verify age and parental consent",
      "rule": "If data subject is a child/adolescent, require age verification and parental/legal guardian consent prior to processing; deny processing otherwise and do not store the payload.",
      "why_is_this_important": "LGPD imposes stricter requirements for children's data.",
      "severity": "Critical",
      "bad_example": "post(\"/profile/child\"){ call.receive<ChildProfile>().let(save) }",
      "good_example": "install(Plugins){ intercept(ApplicationCallPipeline.Plugins){ val p = call.receive<ChildProfile>(); if(p.age < 13 && !p.parentConsent) return@intercept call.respond(HttpStatusCode.Forbidden); save(p) } }",
      "scope": "file",
      "examples": [
        {
          "snippet": "if(profile.age < 13 && !profile.parentConsent) return Forbidden",
          "isCorrect": true
        },
        { "snippet": "save(profile) // no consent check", "isCorrect": false }
      ],
      "language": "kotlin",
      "uuid": "db1f8a44-3b2e-4e9a-9b1a-2c4f7e6a9b91",
      "buckets": ["compliance-lgpd", "api-conventions", "security-hardening"]
    },
    {
      "title": "Audit access to PII with purpose and actor (no raw values)",
      "rule": "Whenever PII is read, emit an audit event capturing actor, purpose, fields touched, and legal basis; never include raw PII in the audit payload—store hashes/tokens only.",
      "why_is_this_important": "LGPD requires accountability and records of processing activities.",
      "severity": "High",
      "bad_example": "println!(\"ACCESS: user_email={}\", user.email);",
      "good_example": "let purpose = \"support_ticket\";\\nlet email_hash = sha2::Sha256::digest(user.email.as_bytes());\\naudit_log(AuditEvent{ actor, purpose, fields: vec![\"email\"], basis: Some(\"legitimate_interest\"), pii_fingerprints: vec![format!(\"{:x}\", email_hash)] });",
      "scope": "file",
      "examples": [
        {
          "snippet": "audit_log(AuditEvent{ purpose: \"billing\", ..Default::default() })",
          "isCorrect": true
        },
        { "snippet": "println!(\"user_cpf={}\", cpf)", "isCorrect": false }
      ],
      "language": "rust",
      "uuid": "4d7a6b2c-2e0b-4b9a-8f10-7a6b2c4d9e12",
      "buckets": [
        "compliance-lgpd",
        "observability-logging",
        "security-hardening"
      ]
    },
    {
      "title": "PRs adding new PII must declare lawful basis and DPIA flag",
      "rule": "When a PR introduces new PII fields or processing, the PR body must include legal_basis: (e.g., consent, contract) and dpia: (yes/no with link). CI should fail if missing.",
      "why_is_this_important": "LGPD requires lawful basis and impact assessment for higher-risk processing; catching at review time prevents non-compliant changes.",
      "severity": "High",
      "bad_example": "// detectNewPII(['cpf','birth_date']) -> true\\nconst body = process.env.PR_BODY || '';\\nif(!/legal_basis:/i.test(body)) process.exit(0);",
      "good_example": "const hasPII = detectNewPII(changedFiles());\\nconst body = process.env.PR_BODY || '';\\nif(hasPII && (!/legal_basis:\\s\\w+/i.test(body) || !/dpia:\\s*(yes|no)/i.test(body))){\\n console.error('Missing LGPD metadata');\\n process.exit(1);\\n}\\nprocess.exit(0);",
      "scope": "pull-request",
      "examples": [
        {
          "snippet": "legal_basis: consent\\ndpia: yes\\ndpia_link: https://…",
          "isCorrect": true
        },
        { "snippet": "This PR adds cpf column", "isCorrect": false }
      ],
      "language": "jsts",
      "uuid": "e1f0a9d2-3c4b-4d5e-8f7a-1b2c3d4e5f66",
      "buckets": ["compliance-lgpd", "pr-hygiene", "docs-adrs"]
    },
    {
      "title": "Export for portability in machine-readable format with consent check",
      "rule": "Provide subject data export in JSONL or CSV only after confirming lawful basis (consent/contract). Include schema version and exclude internal linkage keys.",
      "why_is_this_important": "LGPD portability requires accessible format while avoiding overexposure.",
      "severity": "Medium",
      "bad_example": "def export(u: User) = u.toString",
      "good_example": "def export(u: User): String = {\\n require(hasConsent(u) || isContractual(u))\\n val rec = Map(\"id\"->u.id, \"name\"->u.name, \"email\"->u.email)\\n s\"${u.schemaVersion}|\" + ujson.write(rec)\\n}",
      "scope": "file",
      "examples": [
        {
          "snippet": "require(hasConsent(u) || isContractual(u))",
          "isCorrect": true
        },
        {
          "snippet": "ujson.write(Map(\"token\"->u.sessionToken))",
          "isCorrect": false
        }
      ],
      "language": "scala",
      "uuid": "6a5d2c3b-7e9f-4a1d-8b3c-2d1f4e6a7b88",
      "buckets": ["compliance-lgpd", "api-conventions", "privacy-pii"]
    },
    {
      "title": "Input validation for Brazilian identifiers (CPF/CNPJ) with checksum",
      "rule": "Validate CPF/CNPJ format and checksum server-side; reject storage of invalid identifiers and never auto-correct them. Store normalized (digits-only) representation.",
      "why_is_this_important": "Accurate identifiers reduce unlawful processing and mistaken identity under LGPD.",
      "severity": "Medium",
      "bad_example": "const cpf = req.body.cpf; db.save({ cpf });",
      "good_example": "const cpf = onlyDigits(req.body.cpf);\\nif(!isValidCPF(cpf)) return res.status(422).json({ error: 'invalid_cpf' });\\nstore({ cpf });",
      "scope": "file",
      "examples": [
        {
          "snippet": "if(isValidCPF(onlyDigits(cpf))) store({cpf})",
          "isCorrect": true
        },
        { "snippet": "store({ cpf }) // no validation", "isCorrect": false }
      ],
      "language": "jsts",
      "uuid": "9c1d4e5f-2a3b-4c5d-8e9f-0a1b2c3d4e77",
      "buckets": ["compliance-lgpd", "api-conventions", "security-hardening"]
    },
    {
      "title": "Minimize fields at collection (privacy by default)",
      "rule": "Collect only strictly necessary fields for the declared purpose; mark optional PII as nullable and omit from payloads when empty. Fail requests that include undeclared extra PII keys.",
      "why_is_this_important": "LGPD requires data minimization and purpose limitation.",
      "severity": "High",
      "bad_example": "{ name, email, phone, mother_name, birth_city }",
      "good_example": "{ name, email } // phone optional and excluded if empty\\nvalidateKeys(input, allowed=[\"name\",\"email\",\"phone?\"])",
      "scope": "file",
      "examples": [
        {
          "snippet": "validateKeys(body, [\"name\",\"email\",\"phone?\"])",
          "isCorrect": true
        },
        { "snippet": "save(req.body) // accepts extra PII", "isCorrect": false }
      ],
      "language": "",
      "uuid": "1e2f3a4b-5c6d-7e8f-9a0b-1c2d3e4f5a99",
      "buckets": ["compliance-lgpd", "privacy-pii", "api-conventions"]
    },
    {
      "title": "Persist consent per purpose with immutable history",
      "rule": "Consent must be stored per user and per purpose with lawful_basis, version, granted_at, source, and optional revoked_at. Do not overwrite or store a single boolean flag. (GDPR Art. 7, purpose limitation)",
      "why_is_this_important": "Granular, auditable consent enables purpose limitation and proof of consent/revocation.",
      "severity": "High",
      "bad_example": "CREATE TABLE users (\n id UUID PRIMARY KEY,\n email TEXT,\n consent BOOLEAN -- single flag, no purpose/version\n);",
      "good_example": "CREATE TABLE consents (\n id UUID PRIMARY KEY,\n user_id UUID NOT NULL,\n purpose TEXT NOT NULL, -- e.g., analytics, marketing\n lawful_basis TEXT NOT NULL, -- consent, contract, legitimate_interest\n version TEXT NOT NULL, -- policy version\n granted_at TIMESTAMPTZ NOT NULL,\n source TEXT NOT NULL, -- ui, api, import\n revoked_at TIMESTAMPTZ\n);\nCREATE UNIQUE INDEX consents_latest ON consents(user_id, purpose, version, granted_at DESC);",
      "scope": "file",
      "examples": [
        {
          "snippet": "INSERT INTO consents(user_id,purpose,lawful_basis,version,granted_at,source)\nVALUES($1,'analytics','consent','v3',NOW(),'ui');",
          "isCorrect": true
        },
        {
          "snippet": "UPDATE users SET consent=true WHERE id=$1;",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "c1bb2a0c-9ed6-4b55-9d0a-6710f3a6d6f2",
      "buckets": ["compliance-gdpr", "privacy-pii", "docs-adrs"]
    },
    {
      "title": "Enforce retention with explicit TTL per data category",
      "rule": "PII tables must include an expires_at (or retention_policy) column and a scheduled deletion/archival job aligned to data category. No indefinite retention. (GDPR Art. 5(1)(e))",
      "why_is_this_important": "Limits exposure and fulfills storage limitation obligations.",
      "severity": "High",
      "bad_example": "CREATE TABLE events (\n id BIGSERIAL PRIMARY KEY,\n email TEXT,\n created_at TIMESTAMPTZ NOT NULL\n); -- no retention",
      "good_example": "CREATE TABLE events (\n id BIGSERIAL PRIMARY KEY,\n email_hash TEXT,\n created_at TIMESTAMPTZ NOT NULL,\n expires_at TIMESTAMPTZ NOT NULL -- e.g., NOW() + INTERVAL '13 months'\n);\n-- Deletion job (pseudo)\n-- RUN DAILY: DELETE FROM events WHERE expires_at <= NOW();",
      "scope": "file",
      "examples": [
        {
          "snippet": "DELETE FROM events WHERE expires_at <= NOW();",
          "isCorrect": true
        },
        {
          "snippet": "SELECT COUNT() FROM events WHERE created_at < NOW() - INTERVAL '5 years'; -- but never deleting",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "8a61d1d0-5f1d-4b2f-8e86-1b1f0a1f5c42",
      "buckets": [
        "compliance-gdpr",
        "privacy-pii",
        "config-environment",
        "migrations-backward-compat"
      ]
    },
    {
      "title": "Tag PII in schemas and events for RoPA",
      "rule": "Mark columns and event fields with pii and purpose metadata; prefer hashed or tokenized variants in telemetry. Use these tags to auto-generate Records of Processing Activities (RoPA). (GDPR Art. 30)",
      "why_is_this_important": "Discoverability and auditability of personal data flows are mandatory.",
      "severity": "Medium",
      "bad_example": "{ \"event\": \"signup\", \"email\": \"alice@example.com\" }",
      "good_example": "{\n \"event\": \"signup\",\n \"email_hash\": \"sha256:...\",\n \"meta\": { \"pii\": [\"email\"], \"purpose\": \"account_creation\" }\n}",
      "scope": "file",
      "examples": [
        {
          "snippet": "{ \"field\": \"phone\", \"pii\": true, \"purpose\": \"2fa\" }",
          "isCorrect": true
        },
        {
          "snippet": "{ \"field\": \"phone\", \"pii\": false } -- raw phone in telemetry",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "c6b1b6d7-1e6c-4b28-b9a1-3e0f1e2a9e73",
      "buckets": [
        "compliance-gdpr",
        "privacy-pii",
        "observability-logging",
        "docs-adrs"
      ]
    },
    {
      "title": "PII-introducing PRs require DPIA & RoPA updates",
      "rule": "If a PR adds new PII fields (e.g., email, phone, address, dob, national_id), include links to updated DPIA and RoPA, migration with retention, and masking rules. Add a checklist item confirming lawful_basis. (GDPR Art. 35, Art. 30)",
      "why_is_this_important": "High-risk processing must be assessed and documented at change time.",
      "severity": "High",
      "bad_example": "PR title: \"Add phone column\"\n\n(No DPIA/RoPA link, no retention, no masking rules.)",
      "good_example": "PR title: \"Add phone for 2FA (lawful_basis=legitimate_interest)\"\n\n- [x] DPIA updated\n- [x] RoPA entry added (purpose=auth_2fa)\n- [x] Migration sets expires_at\n- [x] Logs mask phone\n- [x] Consent unaffected",
      "scope": "pull-request",
      "examples": [
        {
          "snippet": "- [x] DPIA link: /docs/dpia/2fa-phone-v2.md",
          "isCorrect": true
        },
        {
          "snippet": "Adds phone TEXT with no docs or retention",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "7b6d0d9b-2a46-4a0b-9e74-6a2a0b1b2f90",
      "buckets": [
        "compliance-gdpr",
        "pr-hygiene",
        "docs-adrs",
        "migrations-backward-compat"
      ]
    },
    {
      "title": "Idempotent Right to Erasure across all stores",
      "rule": "Provide a single idempotency-keyed erasure workflow that scrubs PII in primary DB, caches, search indices, and object storage; emit an audit event with erasure_request_id. (GDPR Art. 17)",
      "why_is_this_important": "Erasure must be complete, consistent, and auditable.",
      "severity": "Critical",
      "bad_example": "function eraseUser(userId){\n db.exec(\"DELETE FROM users WHERE id=?\", [userId]);\n}",
      "good_example": "function eraseUser(userId, key){\n if(alreadyProcessed(key)) return;\n db.exec(\"UPDATE users SET email=NULL, name=NULL WHERE id=?\", [userId]);\n cache.del(\"user:\"+userId);\n search.delete(\"user\", userId);\n storage.deletePrefix(\"users/\"+userId+\"/\");\n audit.emit(\"gdpr.erased\", { userId, erasure_request_id: key, at: now() });\n markProcessed(key);\n}",
      "scope": "file",
      "examples": [
        { "snippet": "eraseUser(userId, \"req-9b3a\");", "isCorrect": true },
        {
          "snippet": "eraseUser(userId); // no idempotency, no cache/search cleanup",
          "isCorrect": false
        }
      ],
      "language": "",
      "uuid": "b2c6f3d9-0a8f-4a9e-9f2c-2e9a3b6e7c11",
      "buckets": [
        "compliance-gdpr",
        "privacy-pii",
        "resilience-retries-idempotency",
        "caching-strategy"
      ]
    },
    {
      "title": "Redact PII in logs and metrics by default",
      "rule": "Logging/metrics must redact or hash personal data; attach lawful_basis and purpose to diagnostic context; forbid raw PII in logs. (GDPR Art. 5(1)(c) data minimization)",
      "why_is_this_important": "Logs are high-volume replicas; leakage risk is high.",
      "severity": "High",
      "bad_example": "{\"level\":\"info\",\"msg\":\"login\",\"email\":\"alice@example.com\"}",
      "good_example": "{\"level\":\"info\",\"msg\":\"login\",\"email_hash\":\"sha256:...\",\"gdpr\":{\"purpose\":\"auth\",\"lawful_basis\":\"contract\"}}",
      "scope": "file",
      "examples": [
        {
          "snippet": "logger.info({ email_hash, gdpr:{purpose:'auth', lawful_basis:'contract'} });",
          "isCorrect": true
        },
        { "snippet": "logger.info({ email }); // raw PII", "isCorrect": false }
      ],
      "language": "",
      "uuid": "9f2e5a77-3d54-4d9c-9ba7-3f5b5d6a1e0b",
      "buckets": [
        "compliance-gdpr",
        "observability-logging",
        "security-hardening"
      ]
    },
    {
      "title": "Gate analytics cookies on explicit consent (Web)",
      "rule": "Only set analytics/marketing cookies if consent.purposes.analytics === true and consent.version matches current policy; re-check on version bump. (GDPR Art. 7, ePrivacy)",
      "why_is_this_important": "Tracking requires prior, informed consent in many jurisdictions.",
      "severity": "High",
      "bad_example": "res.cookie('ga', token, { httpOnly:false }); // set unconditionally",
      "good_example": "app.use((req,res,next)=>{\n const c = req.consent;\n if(c?.purposes?.analytics === true && c.version === CURRENT_POLICY){\n res.cookie('ga', token, { sameSite:'Lax' });\n }\n next();\n});",
      "scope": "file",
      "examples": [
        {
          "snippet": "if(consent.purposes.analytics) setAnalyticsCookie();",
          "isCorrect": true
        },
        {
          "snippet": "setAnalyticsCookie(); // ignoring consent",
          "isCorrect": false
        }
      ],
      "language": "jsts",
      "uuid": "b0a5f0a2-6d2f-4b7c-9150-9f3c2a1e6d7b",
      "buckets": ["compliance-gdpr", "privacy-pii", "api-conventions"]
    },
    {
      "title": "Transactional erasure with tombstone event",
      "rule": "Wrap PII scrubbing and session invalidation in a single DB transaction; publish a gdpr.erased event with subject ID and timestamp after commit.",
      "why_is_this_important": "Prevents partial erasure and ensures downstream consistency.",
      "severity": "High",
      "bad_example": "db.Exec(\"DELETE FROM users WHERE id=$1\", id)\n// sessions, files, search not handled",
      "good_example": "tx, _ := db.Begin()\n, _ = tx.Exec(\"UPDATE users SET email=NULL, name=NULL WHERE id=$1\", id)\n_, _ = tx.Exec(\"DELETE FROM sessions WHERE user_id=$1\", id)\n_ = tx.Commit()\npublish(\"gdpr.erased\", map[string]any{\"user_id\": id, \"at\": time.Now()})",
      "scope": "file",
      "examples": [
        {
          "snippet": "tx, _ := db.Begin(); / scrub PII / tx.Commit()",
          "isCorrect": true
        },
        {
          "snippet": "db.Exec(\"DELETE FROM users WHERE id=$1\", id)",
          "isCorrect": false
        }
      ],
      "language": "go",
      "uuid": "0d6a1c3b-1f2e-4c5a-8b9f-2a7e4c9d1a22",
      "buckets": [
        "compliance-gdpr",
        "privacy-pii",
        "resilience-retries-idempotency"
      ]
    },
    {
      "title": "Log redaction via Monolog processor",
      "rule": "Register a Monolog processor to mask emails/phones and attach pii_redacted:true; forbid direct logging of raw identifiers.",
      "why_is_this_important": "Centralized redaction prevents accidental leakage across codepaths.",
      "severity": "Medium",
      "bad_example": "$logger->info('signup', ['email' => $email]);",
      "good_example": "$logger->pushProcessor(function(array $record){\n $msg = json_encode($record['context']);\n $msg = preg_replace('/[\\w.+-]+@\\w+\\.[\\w.-]+/','[redacted-email]',$msg);\n $record['extra']['pii_redacted'] = true;\n $record['context'] = json_decode($msg, true);\n return $record;\n});",
      "scope": "file",
      "examples": [
        {
          "snippet": "$logger->info('login', ['email_hash' => $hash]);",
          "isCorrect": true
        },
        {
          "snippet": "$logger->info('login', ['email' => $email]);",
          "isCorrect": false
        }
      ],
      "language": "php",
      "uuid": "5a1b3c9e-24d1-4e8a-9c2b-7c1a6f5e8b90",
      "buckets": [
        "compliance-gdpr",
        "observability-logging",
        "security-hardening"
      ]
    },
    {
      "title": "Encrypt PII at rest using application-layer crypto",
      "rule": "Encrypt sensitive columns (e.g., email, phone) with managed keys; ensure DB connection enforces TLS. Store only ciphertext; compare via deterministic token/hashes when needed. (GDPR Art. 32)",
      "why_is_this_important": "Encryption reduces breach impact and supports data protection by design.",
      "severity": "High",
      "bad_example": "class User < ApplicationRecord\n # plaintext email/phone\nend",
      "good_example": "class User < ApplicationRecord\n encrypts :email\n encrypts :phone\nend\n# DATABASE_URL='postgres://...&sslmode=require'",
      "scope": "file",
      "examples": [
        {
          "snippet": "User.create!(email: params[:email]) # encrypted via encrypts",
          "isCorrect": true
        },
        {
          "snippet": "User.create!(email: params[:email]) # plaintext column",
          "isCorrect": false
        }
      ],
      "language": "ruby",
      "uuid": "4b2d7c1e-8f3a-4a1f-9d27-1e6f0c2b9a88",
      "buckets": ["compliance-gdpr", "security-hardening", "config-environment"]
    },
    {
      "title": "Portable DSAR export with signed URL and TTL",
      "rule": "Provide an authenticated endpoint that assembles a user's data into a structured JSON export and returns a short-lived signed URL (≤24h). Include integration tests in the PR. (GDPR Art. 20)",
      "why_is_this_important": "Ensures data portability while minimizing exposure window.",
      "severity": "High",
      "bad_example": "@GetMapping(\"/gdpr/export\")\\npublic String exportCsv(@RequestParam String email){\\n return \\\"we will email you\\\"; // no auth, no TTL\\n}",
      "good_example": "@GetMapping(\"/gdpr/export\")\\npublic ResponseEntity<ExportLink> export(){\\n User u = auth.currentUser();\\n URI url = storage.sign(\"exports/\"+u.id()+\".json\", Duration.ofHours(24));\\n return ResponseEntity.ok(new ExportLink(url));\\n}",
      "scope": "pull-request",
      "examples": [
        {
          "snippet": "URI url = storage.sign(path, Duration.ofHours(24));",
          "isCorrect": true
        },
        {
          "snippet": "return ResponseEntity.ok(csvBody); // inline data, no TTL",
          "isCorrect": false
        }
      ],
      "language": "java",
      "uuid": "6c7f9a20-3b0e-4f5e-a0a3-fb5d6f2e9c11",
      "buckets": [
        "compliance-gdpr",
        "api-conventions",
        "security-hardening",
        "pr-hygiene"
      ]
    },
    {
      "title": "Background retention worker for PII cleanup",
      "rule": "Implement a scheduled worker to delete or anonymize records past expires_at, with metrics on deletions and failures. Dry-run mode allowed only in non-prod.",
      "why_is_this_important": "Automates storage limitation and provides proof of enforcement.",
      "severity": "Medium",
      "bad_example": "public void Cleanup(){ / TODO: manual SQL run */ }",
      "good_example": "public class RetentionWorker : BackgroundService {\n protected override async Task ExecuteAsync(CancellationToken ct){\n while(!ct.IsCancellationRequested){\n var n = await db.ExecuteAsync(\"DELETE FROM events WHERE expires_at <= now()\");\n metrics.Count(\"gdpr.retention.deleted\", n);\n await Task.Delay(TimeSpan.FromHours(24), ct);\n }\n }\n}",
      "scope": "file",
      "examples": [
        {
          "snippet": "metrics.Count(\"gdpr.retention.deleted\", n);",
          "isCorrect": true
        },
        {
          "snippet": "Console.WriteLine(\"deleted some\"); // no metrics",
          "isCorrect": false
        }
      ],
      "language": "csharp",
      "uuid": "a1f4d3c2-9b8a-4e7f-8c1d-3f2e5a6b7c80",
      "buckets": [
        "compliance-gdpr",
        "privacy-pii",
        "observability-logging",
        "ci-cd-build-hygiene"
      ]
    },
    {
      "title": "Cross-border transfers annotated with SCC references",
      "rule": "When configuring processors outside the EEA, annotate the config with transfer_mechanism (e.g., SCCs) and link to the signed SCC document; prevent enablement without this metadata. (GDPR Art. 46)",
      "why_is_this_important": "Ensures lawful international data transfers are documented and enforced in code.",
      "severity": "Medium",
      "bad_example": "processor:\n name: analytics-vendor\n region: us-east-1 # no transfer basis",
      "good_example": "processor:\n name: analytics-vendor\n region: us-east-1\n transfer_mechanism: scc\n scc_doc: docs/transfers/analytics-scc-2025-01.pdf",
      "scope": "file",
      "examples": [
        {
          "snippet": "transfer_mechanism: scc\nscc_doc: docs/transfers/vendor-scc.pdf",
          "isCorrect": true
        },
        { "snippet": "region: us-east-1 # missing SCC", "isCorrect": false }
      ],
      "language": "",
      "uuid": "d4e5f6a7-8b9c-4c0d-9e1f-2a3b4c5d6e7f",
      "buckets": [
        "compliance-gdpr",
        "dependency-supply-chain",
        "docs-adrs",
        "security-hardening"
      ]
    },
    {
      "title": "Mask PAN and exclude SAD from logs",
      "rule": "Never emit Primary Account Number (PAN) or Sensitive Authentication Data (SAD: CVV/CVC, full track data, PIN) to application or audit logs. Per PCI DSS 4.0 Req. 3 and 10, always mask PAN as first6last4 and fully redact SAD before logging.",
      "why_is_this_important": "Logs are broadly accessible; leaking CHD/SAD violates PCI DSS and creates high breach risk.",
      "severity": "Critical",
      "bad_example": "logger.info(\"charge_created\", { pan: \"4111111111111111\", cvv: \"123\" });",
      "good_example": "const masked = maskPan(\"4111111111111111\");\nlogger.info(\"charge_created\", { pan: masked, cvv: \"REDACTED\" });\nfunction maskPan(p){ return p.slice(0,6) + \"*****\" + p.slice(-4); }",
      "scope": "file",
      "examples": [
        { "snippet": "logger.debug(PAN=${pan})", "isCorrect": false },
        { "snippet": "logger.debug(PAN=${maskPan(pan)})", "isCorrect": true }
      ],
      "language": "",
      "uuid": "f4f1d0c4-1b0a-4f37-b8b7-1a2f6c7a7b83",
      "buckets": ["compliance-pci-dss", "observability-logging", "privacy-pii"]
    },
    {
      "title": "Disallow CVV/CVC persistence anywhere",
      "rule": "Never store CVV/CVC or other SAD after authorization in databases, caches, files, or telemetry. Schema/models must not define fields for CVV/CVC; reject writes containing cvv/cvc keys. (PCI DSS 4.0 Req. 3.2.1)",
      "why_is_this_important": "SAD storage is prohibited; accidental retention is a common path to PCI violations.",
      "severity": "Critical",
      "bad_example": "CREATE TABLE cards(\n id SERIAL,\n pan_token TEXT NOT NULL,\n cvv VARCHAR(4) -- ❌ forbidden\n);",
      "good_example": "CREATE TABLE cards(\n id SERIAL,\n pan_token TEXT NOT NULL -- ✅ token only, no CVV\n);\n-- Validate payloads drop SAD\nDELETE FROM input_json WHERE key IN ('cvv','cvc','track2');",
      "scope": "file",
      "examples": [
        {
          "snippet": "{\"pan_token\":\"tok_123\",\"cvv\":\"123\"}",
          "isCorrect": false
        },
        { "snippet": "{\"pan_token\":\"tok_123\"}", "isCorrect": true }
      ],
      "language": "",
      "uuid": "3a3d7d4c-8c26-4b3e-90b4-4ce1fd0f6a9e",
      "buckets": ["compliance-pci-dss", "security-hardening", "privacy-pii"]
    },
    {
      "title": "Use client tokenization; backend never receives PAN",
      "rule": "For web/mobile payment forms, send PAN and CVV directly to the PCI-compliant gateway to obtain a single-use token; submit only the token to your backend. Validate that backend APIs reject requests containing PAN/SAD. (PCI DSS scoping & SAQ A)",
      "why_is_this_important": "Keeping PAN out of your environment reduces PCI scope and breach impact.",
      "severity": "High",
      "bad_example": "// ❌ raw PAN sent to backend\nawait fetch('/api/pay', { method:'POST', body: JSON.stringify({ pan, cvv }) });",
      "good_example": "// ✅ tokenize in client; backend sees token only\nconst token = await gateway.tokenize({ pan, cvv });\nawait fetch('/api/pay', { method:'POST', body: JSON.stringify({ token }) });",
      "scope": "file",
      "examples": [
        { "snippet": "formData.append('pan', cardNumber)", "isCorrect": false },
        {
          "snippet": "const token = await gateway.tokenize({pan, cvv}); formData.append('token', token)",
          "isCorrect": true
        }
      ],
      "language": "jsts",
      "uuid": "b8b7a1be-6a37-4b1a-9a83-2c5cd3b1b7c2",
      "buckets": ["compliance-pci-dss", "api-conventions", "security-hardening"]
    },
    {
      "title": "Enforce TLS 1.2+ and strict cert verification to payment gateway",
      "rule": "All outbound connections that may carry CHD/PAN tokens must enforce TLS >= 1.2, validate hostname/chain, and optionally pin gateway SPKI. Disable insecure ciphers/versions. (PCI DSS 4.0 Req. 4)",
      "why_is_this_important": "Strong transport encryption prevents interception of CHD and tokens.",
      "severity": "High",
      "bad_example": "client := &http.Client{}\nresp, _ := client.Get(gatewayURL) // ❌ default TLS; no checks",
      "good_example": "tr := &http.Transport{TLSClientConfig: &tls.Config{\n MinVersion: tls.VersionTLS12,\n ServerName: \"api.paygateway.com\",\n // Optional pinning example\n VerifyPeerCertificate: func(rawCerts [][]byte, verifiedChains [][]x509.Certificate) error {\n cert, _ := x509.ParseCertificate(rawCerts[0])\n spki := sha256.Sum256(cert.RawSubjectPublicKeyInfo)\n want := mustDecodeHex(\"d4e5...ab\")\n if !bytes.Equal(spki[:], want) { return errors.New(\"pin mismatch\") }\n return nil\n },\n}};\nclient := &http.Client{Transport: tr}\nresp, err := client.Get(gatewayURL)",
      "scope": "file",
      "examples": [
        { "snippet": "tls.Config{MinVersion: 0}", "isCorrect": false },
        {
          "snippet": "tls.Config{MinVersion: tls.VersionTLS12}",
          "isCorrect": true
        }
      ],
      "language": "go",
      "uuid": "0f8f4b7a-6c11-4c0d-9f0b-7a17c0c9c1e4",
      "buckets": [
        "compliance-pci-dss",
        "security-hardening",
        "resilience-retries-idempotency"
      ]
    },
    {
      "title": "Encrypt transient PAN with AES-GCM using KMS keys and zeroize",
      "rule": "If PAN must be handled transiently, encrypt in memory with AES-256-GCM using a KMS/HSM-provided key, store only ciphertext or tokens, and zeroize plaintext buffers immediately. Rotate keys per policy. (PCI DSS 4.0 Req. 3)",
      "why_is_this_important": "Strong cryptography and key management limits blast radius if memory or storage is exposed.",
      "severity": "High",
      "bad_example": "// ❌ plaintext PAN persisted\nString pan = request.getParameter(\"pan\");\nsave(\"cards\", Map.of(\"pan\", pan));",
      "good_example": "SecretKey key = kms.fetchKey(\"pci-pan-key\");\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nbyte[] iv = SecureRandom.getInstanceStrong().generateSeed(12);\nc.init(Cipher.ENCRYPT_MODE, key, new GCMParameterSpec(128, iv));\nbyte[] ct = c.doFinal(panBytes);\nArrays.fill(panBytes, (byte)0); // zeroize\nsave(\"cards\", Map.of(\"pan_ct\", Base64.getEncoder().encodeToString(ct), \"iv\", Base64.getEncoder().encodeToString(iv)));",
      "scope": "file",
      "examples": [
        { "snippet": "Files.writeString(path, pan)", "isCorrect": false },
        { "snippet": "Arrays.fill(panBytes,(byte)0)", "isCorrect": true }
      ],
      "language": "java",
      "uuid": "9d7b2c1a-5e3d-4f6f-9e1a-1b2c3d4e5f60",
      "buckets": [
        "compliance-pci-dss",
        "secrets-credentials",
        "security-hardening"
      ]
    },
    {
      "title": "Display PAN as first6last4 only",
      "rule": "Render PAN only in truncated form (first 6 and last 4) and never expose full PAN, CVV, or expiration data together. Apply the masking helper at all presentation points including emails and PDFs. (PCI DSS 4.0 Req. 3.3)",
      "why_is_this_important": "Partial display reduces exposure while supporting customer service workflows.",
      "severity": "Medium",
      "bad_example": "<?php echo $pan; // ❌ full PAN shown ?>",
      "good_example": "<?php function mask_pan($p){return substr($p,0,6).'******'.substr($p,-4);} echo mask_pan($pan); ?>",
      "scope": "file",
      "examples": [
        { "snippet": "echo $pan;", "isCorrect": false },
        { "snippet": "echo mask_pan($pan);", "isCorrect": true }
      ],
      "language": "php",
      "uuid": "a2f1b3c4-5d6e-4711-8a22-9b33c44d55ee",
      "buckets": ["compliance-pci-dss", "privacy-pii", "ui-robustness"]
    },
    {
      "title": "Gate CHD token access with explicit PCI roles",
      "rule": "Any code path that reads, decrypts, or exchanges PAN tokens must require an explicit authorization policy (e.g., role \"pci:read_token\") and log access without PAN. Deny by default. (PCI DSS 4.0 Req. 7 & 10)",
      "why_is_this_important": "Least-privilege access reduces insider and lateral-movement risk for CHD.",
      "severity": "High",
      "bad_example": "// ❌ open endpoint\n[HttpGet(\"/tokens/{id}\")]\npublic IActionResult Get(string id){ return Ok(store.Get(id)); }",
      "good_example": "// ✅ restricted endpoint\n[Authorize(Policy = \"pci:read_token\")]\n[HttpGet(\"/tokens/{id}\")]\npublic IActionResult Get(string id){ audit.Log(\"pci_token_read\", new { id }); return Ok(store.Get(id)); }",
      "scope": "file",
      "examples": [
        { "snippet": "[Authorize] // no policy", "isCorrect": false },
        { "snippet": "[Authorize(Policy=\"pci:read_token\")]", "isCorrect": true }
      ],
      "language": "csharp",
      "uuid": "d6c1e8a9-2f3b-4c6d-9e0f-1a2b3c4d5e6f",
      "buckets": ["compliance-pci-dss", "security-hardening", "api-conventions"]
    },
    {
      "title": "Emit append-only audit logs for CHD access without PAN",
      "rule": "On every create/read/update/delete of CHD or tokens, write a structured audit event (who, what, when, result) without full PAN, including only pan_last4. Persist to an append-only/immutable sink. (PCI DSS 4.0 Req. 10)",
      "why_is_this_important": "Tamper-evident audit trails enable incident response and forensics.",
      "severity": "High",
      "bad_example": "info!(\"read_pan\", pan = full_pan);",
      "good_example": "event!(Level::INFO, target = \"audit\", action = \"token.read\", user_id = uid, pan_last4 = last4, result = \"success\");",
      "scope": "file",
      "examples": [
        { "snippet": "info!(\"audit\", pan = full_pan)", "isCorrect": false },
        {
          "snippet": "event!(Level::INFO, target=\"audit\", pan_last4=last4)",
          "isCorrect": true
        }
      ],
      "language": "rust",
      "uuid": "e1b2c3d4-5f6a-47b8-9c0d-1e2f3a4b5c6d",
      "buckets": [
        "compliance-pci-dss",
        "observability-logging",
        "maintainability"
      ]
    },
    {
      "title": "Block real PAN/SAD in fixtures and test data",
      "rule": "Reject PRs adding real PAN/CVV in fixtures, seeds, or mocks. Only use Luhn-valid test PANs from the gateway or opaque tokens (e.g., tok_) and never include CVV. Add a check to fail if a PAN regex is matched. (PCI DSS data minimization)",
      "why_is_this_important": "Test data leaks propagate widely and are often copied to non-PCI systems.",
      "severity": "High",
      "bad_example": "{ \"card\": { \"pan\": \"4111111111111111\", \"cvv\": \"123\" } }",
      "good_example": "{ \"card\": { \"pan_token\": \"tok_1PQ...\". \"last4\": \"1111\" } }",
      "scope": "pull-request",
      "examples": [
        { "snippet": "\"pan\": \"4242424242424242\"", "isCorrect": false },
        { "snippet": "\"pan_token\": \"tok_abc123\"", "isCorrect": true }
      ],
      "language": "",
      "uuid": "7a8b9c0d-1e2f-4a5b-9c6d-7e8f9a0b1c2d",
      "buckets": ["compliance-pci-dss", "testing-quality", "privacy-pii"]
    },
    {
      "title": "Redact CHD in CI and fail builds on PAN patterns",
      "rule": "CI logs must redact secrets and CHD; disable shell xtrace, and add a job that fails if PAN regex (e.g., \b[0-9]{13,19}\b with Luhn) appears in logs/artifacts. (PCI DSS 4.0 Req. 10 & CI hygiene)",
      "why_is_this_important": "Build systems aggregate logs and artifacts; leakage here is pervasive and long-lived.",
      "severity": "High",
      "bad_example": "steps:\n - name: Tests\n run: |\n set -x # ❌ echoes secrets/CHD\n npm test",
      "good_example": "steps:\n - name: Redact and scan\n env: { ACTIONS_STEP_DEBUG: 'false' }\n run: |\n echo '::add-mask::${{ secrets.GATEWAY_KEY }}'\n ! grep -ERn \"\\b[0-9]{13,19}\\b\" ./artifacts || (echo \"PAN pattern found\" && exit 1)",
      "scope": "pull-request",
      "examples": [
        { "snippet": "set -x", "isCorrect": false },
        {
          "snippet": "grep -ERn \"\\b[0-9]{13,19}\\b\" ./artifacts || true",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "c3d2e1f0-9a8b-4c7d-b6e5-4d3c2b1a0f9e",
      "buckets": [
        "compliance-pci-dss",
        "ci-cd-build-hygiene",
        "secrets-credentials"
      ]
    },
    {
      "title": "Pin FIPS-grade crypto deps and produce SBOM",
      "rule": "Pin cryptography libraries to vetted versions (e.g., BouncyCastle FIPS) and generate a CycloneDX SBOM as part of the build. Reject PRs introducing floating or insecure versions. (PCI DSS 4.0 Req. 6 & supply chain)",
      "why_is_this_important": "Pinned, auditable dependencies reduce the chance of weak crypto or supply chain attacks.",
      "severity": "Medium",
      "bad_example": "// build.sbt — ❌ floating/insecure\nlibraryDependencies += \"org.bouncycastle\" % \"bcpkix-jdk15on\" % \"+\"\n",
      "good_example": "// build.sbt — ✅ pinned and FIPS-capable\nlibraryDependencies ++= Seq(\n \"org.bouncycastle\" % \"bc-fips\" % \"1.0.2.4\",\n \"org.cyclonedx\" %% \"cyclonedx-core-java\" % \"9.0.4\"\n)\nThisBuild / versionScheme := Some(\"strict\")",
      "scope": "file",
      "examples": [
        {
          "snippet": "%% \"bcpkix-jdk15on\" % \"latest.integration\"",
          "isCorrect": false
        },
        { "snippet": "% \"bc-fips\" % \"1.0.2.4\"", "isCorrect": true }
      ],
      "language": "scala",
      "uuid": "5b6c7d8e-9f01-4a23-b4c5-d6e7f8091a2b",
      "buckets": [
        "compliance-pci-dss",
        "dependency-supply-chain",
        "security-hardening"
      ]
    },
    {
      "title": "Deny caching of payment pages and responses",
      "rule": "Set HTTP headers for payment entry points and CHD-adjacent responses to prevent storage: Cache-Control: no-store, Pragma: no-cache, and appropriate privacy headers. Ensure intermediaries cannot cache PAN-related flows.",
      "why_is_this_important": "Caching CHD-bearing pages increases exposure across clients and proxies.",
      "severity": "Medium",
      "bad_example": "// no headers on payment route",
      "good_example": "routing {\n post(\"/pay\") {\n call.response.headers.append(\"Cache-Control\", \"no-store\")\n call.response.headers.append(\"Pragma\", \"no-cache\")\n call.respond(HttpStatusCode.OK)\n }\n}",
      "scope": "file",
      "examples": [
        { "snippet": "call.respond(OK) // no cache headers", "isCorrect": false },
        {
          "snippet": "call.response.headers.append(\"Cache-Control\", \"no-store\")",
          "isCorrect": true
        }
      ],
      "language": "kotlin",
      "uuid": "ab12cd34-ef56-4789-8123-4567abcd8910",
      "buckets": ["compliance-pci-dss", "caching-strategy", "api-conventions"]
    },
    {
      "title": "Validate gateway responses and avoid storing PAN substitutes long-term",
      "rule": "Accept only short-lived tokens from the gateway (JWT/JWE or opaque) and validate signature/expiry; do not persist tokens beyond business need. Never attempt to reconstruct PAN from tokens. (PCI DSS data minimization)",
      "why_is_this_important": "Limiting token lifetime and storage reduces scope and lateral risk.",
      "severity": "Medium",
      "bad_example": "store.save({ token: tokenFromGateway, ttlDays: 365 }) // ❌",
      "good_example": "const t = parseAndVerify(tokenFromGateway, gwJwkSet);\nif (t.exp < now()+560) throw new Error(\"token too short\");\nstore.saveEphemeral(t.id, 900); // 15 min",
      "scope": "file",
      "examples": [
        { "snippet": "persist(token, ONE_YEAR)", "isCorrect": false },
        {
          "snippet": "verify(token) && saveEphemeral(id, 900)",
          "isCorrect": true
        }
      ],
      "language": "",
      "uuid": "6e7f8a9b-0c1d-4e2f-9a3b-5c6d7e8f9a0b",
      "buckets": ["compliance-pci-dss", "security-hardening", "maintainability"]
    }
  ]
  