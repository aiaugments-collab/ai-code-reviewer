[
  {
    "uuid": "3a7b4041-0fe6-4905-ac07-04b691a11dce",
    "title": "Avoid using anchor tags as buttons",
    "rule": "Detect cases where <a> elements are used as buttons. Anchor tags should be used for navigation, while actions should be assigned to <button> elements to maintain accessibility and expected behavior.",
    "why_is_this_important": "Anchor tags (<a>) are intended for navigation, not actions. Using them as buttons can cause accessibility issues and unexpected behavior. Use <button> for actions to ensure proper functionality and accessibility.",
    "severity": "High",
    "bad_example": "const MyComponent = () => {\n    return <>\n        <a href=\"javascript:void(0)\" onClick={foo}>Perform action</a>\n        <a href=\"#\" onClick={foo}>Perform action</a>\n        <a onClick={foo}>Perform action</a>\n    </>;\n};",
    "good_example": "const MyComponent = () => {\n    return <>\n      <button onClick={foo}>Perform action</button>\n      <a href=\"#section\" onClick={foo}>Perform action</a>\n    </>;\n};",
    "tags": [
      "maintainability",
      "reliability",
      "accessibility"
    ],
    "examples": [
      {
        "snippet": "const MyComponent = () => {\n    return <>\n        <a href=\"javascript:void(0)\" onClick={foo}>Perform action</a>\n        <a href=\"#\" onClick={foo}>Perform action</a>\n        <a onClick={foo}>Perform action</a>\n    </>;\n};",
        "isCorrect": false
      },
      {
        "snippet": "const MyComponent = () => {\n    return <>\n      <button onClick={foo}>Perform action</button>\n      <a href=\"#section\" onClick={foo}>Perform action</a>\n    </>;\n};",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "da8f1ddb-f433-4e66-94bb-224339e8e02b",
    "title": "Use appropriate tabIndex values",
    "rule": "Ensure tabIndex values are either 0 or -1. Positive tabIndex values disrupt the natural tab order and can create accessibility issues.",
    "why_is_this_important": "Using positive tabIndex values disrupts the natural tab order, confusing users who rely on keyboard navigation or assistive technologies. Stick to tabIndex values of 0 or -1 for predictable and accessible navigation.",
    "severity": "High",
    "bad_example": "function MyDiv() {\n    return (\n        <div>\n            <span tabIndex=\"5\">foo</span> // Noncompliant\n            <span tabIndex=\"3\">bar</span> // Noncompliant\n            <span tabIndex=\"1\">baz</span> // Noncompliant\n            <span tabIndex=\"2\">qux</span> // Noncompliant\n        </div>\n    );\n}",
    "good_example": "function MyDiv() {\n    return (\n        <div>\n            <span tabIndex=\"0\">foo</span>\n            <span tabIndex=\"-1\">bar</span>\n            <span tabIndex={0}>baz</span>\n            <span>qux</span>\n        </div>\n    );\n}",
    "tags": [
      "maintainability",
      "accessibility",
      "reliability"
    ],
    "examples": [
      {
        "snippet": "function MyDiv() {\n    return (\n        <div>\n            <span tabIndex=\"5\">foo</span> // Noncompliant\n            <span tabIndex=\"3\">bar</span> // Noncompliant\n            <span tabIndex=\"1\">baz</span> // Noncompliant\n            <span tabIndex=\"2\">qux</span> // Noncompliant\n        </div>\n    );\n}",
        "isCorrect": false
      },
      {
        "snippet": "function MyDiv() {\n    return (\n        <div>\n            <span tabIndex=\"0\">foo</span>\n            <span tabIndex=\"-1\">bar</span>\n            <span tabIndex={0}>baz</span>\n            <span>qux</span>\n        </div>\n    );\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "145d7956-5208-4426-ad77-63257ff706c1",
    "title": "Annotate REST API Actions with HTTP Verb Attributes",
    "rule": "Without explicit HTTP method attributes, API behavior can be unclear, leading to route conflicts and unexpected results.",
    "why_is_this_important": "Without explicit HTTP method attributes, API behavior can be unclear, leading to route conflicts and unexpected results.",
    "severity": "High",
    "bad_example": "[Route(\"Customer\")]                                                        // This route conflicts with GetCustomers action route\npublic async Task<IResult> ChangeCustomer([FromBody] CustomerData data)   // Noncompliant\n{\n    // ...\n    return Results.Ok();\n}\n\n[Route(\"Customer\")]                         // This route conflicts with ChangeCustomer action route\npublic async Task<string> GetCustomers()    // Noncompliant\n{\n    return _customerRepository.GetAll();\n}",
    "good_example": "[Route(\"Customer\")]\n[HttpPost]\npublic async Task<IResult> ChangeCustomer([FromBody] CustomerData data)    // Compliant\n{\n    // ...\n    return Results.Ok();\n}\n\n[HttpGet(\"Customer\")]\npublic async Task<string> GetCustomers()    // Compliant\n{\n    return _customerRepository.GetAll();\n}",
    "tags": [
      "maintainability",
      "api-design",
      "best-practices",
      "aspnet-core"
    ],
    "examples": [
      {
        "snippet": "[Route(\"Customer\")]                                                        // This route conflicts with GetCustomers action route\npublic async Task<IResult> ChangeCustomer([FromBody] CustomerData data)   // Noncompliant\n{\n    // ...\n    return Results.Ok();\n}\n\n[Route(\"Customer\")]                         // This route conflicts with ChangeCustomer action route\npublic async Task<string> GetCustomers()    // Noncompliant\n{\n    return _customerRepository.GetAll();\n}",
        "isCorrect": false
      },
      {
        "snippet": "[Route(\"Customer\")]\n[HttpPost]\npublic async Task<IResult> ChangeCustomer([FromBody] CustomerData data)    // Compliant\n{\n    // ...\n    return Results.Ok();\n}\n\n[HttpGet(\"Customer\")]\npublic async Task<string> GetCustomers()    // Compliant\n{\n    return _customerRepository.GetAll();\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "b4cc475e-7cf8-4db2-a65a-cd7d17bbe1e2",
    "title": "Do Not Start Route Templates with '/' in ASP.NET",
    "rule": "Starting a route template with '/' in ASP.NET makes it absolute, ignoring controller-level routes and potentially breaking expected routing behavior.",
    "why_is_this_important": "Starting a route template with '/' in ASP.NET makes it absolute, ignoring controller-level routes and potentially breaking expected routing behavior.",
    "severity": "High",
    "bad_example": "[Route(\"[controller]\")]  // This route is ignored\npublic class ReviewsController : Controller // Noncompliant\n{\n    // Route is /reviews\n    [HttpGet(\"/reviews\")]\n    public ActionResult Index() { /* ... */ }\n\n    // Route is /reviews/{reviewId}\n    [Route(\"/reviews/{reviewId}\")]\n    public ActionResult Show(int reviewId)() { /* ... */ }\n}",
    "good_example": "[Route(\"/\")] // Turns on attribute routing\npublic class ReviewsController : Controller\n{\n    // Route is /reviews\n    [HttpGet(\"reviews\")]\n    public ActionResult Index() { /* ... */ }\n\n    // Route is /reviews/{reviewId}\n    [Route(\"reviews/{reviewId}\")]\n    public ActionResult Show(int reviewId)() { /* ... */ }\n}",
    "tags": [
      "maintainability",
      "aspnet-core",
      "api-design"
    ],
    "examples": [
      {
        "snippet": "[Route(\"[controller]\")]  // This route is ignored\npublic class ReviewsController : Controller // Noncompliant\n{\n    // Route is /reviews\n    [HttpGet(\"/reviews\")]\n    public ActionResult Index() { /* ... */ }\n\n    // Route is /reviews/{reviewId}\n    [Route(\"/reviews/{reviewId}\")]\n    public ActionResult Show(int reviewId)() { /* ... */ }\n}",
        "isCorrect": false
      },
      {
        "snippet": "[Route(\"/\")] // Turns on attribute routing\npublic class ReviewsController : Controller\n{\n    // Route is /reviews\n    [HttpGet(\"reviews\")]\n    public ActionResult Index() { /* ... */ }\n\n    // Route is /reviews/{reviewId}\n    [Route(\"reviews/{reviewId}\")]\n    public ActionResult Show(int reviewId)() { /* ... */ }\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "a3c4e913-d4a9-4d54-bd95-74d8597707ab",
    "title": "API Controllers Should Inherit from `ControllerBase`",
    "rule": "Verify that API controllers inherit from `ControllerBase` instead of `Controller` unless views are explicitly required.",
    "why_is_this_important": "`ControllerBase` is the proper base class for API controllers, avoiding unnecessary dependencies on view-related functionality.",
    "severity": "High",
    "bad_example": "[ApiController]\npublic class MyController : Controller // Noncompliant: Inherit from ControllerBase instead of Controller.\n//                          ^^^^^^^^^^\n{\n    // ..\n}",
    "good_example": "[ApiController]\npublic class MyController : ControllerBase\n{\n    // ..\n}",
    "tags": [
      "maintainability",
      "performance",
      "aspnet-core",
      "google"
    ],
    "examples": [
      {
        "snippet": "[ApiController]\npublic class MyController : Controller // Noncompliant: Inherit from ControllerBase instead of Controller.\n//                          ^^^^^^^^^^\n{\n    // ..\n}",
        "isCorrect": false
      },
      {
        "snippet": "[ApiController]\npublic class MyController : ControllerBase\n{\n    // ..\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "9c96e8e1-6db4-4726-bc94-60c0c7097e43",
    "title": "Use ProducesResponseTypeAttribute for API Actions",
    "rule": "Without ProducesResponseTypeAttribute, Swagger cannot infer the response type of an action returning IActionResult, making API documentation unclear and unreliable.",
    "why_is_this_important": "Without ProducesResponseTypeAttribute, Swagger cannot infer the response type of an action returning IActionResult, making API documentation unclear and unreliable.",
    "severity": "High",
    "bad_example": "[HttpGet(\"foo\")]\n// Noncompliant: Use the ProducesResponseType overload containing the return type for succesful responses.\n[ProducesResponseType(StatusCodes.Status200OK)]\npublic IActionResult MagicNumber() => Ok(42);",
    "good_example": "[HttpGet(\"foo\")]\n[ProducesResponseType<int>(StatusCodes.Status200OK)]\npublic IActionResult MagicNumber() => Ok(42);",
    "tags": [
      "security",
      "api-design",
      "maintainability",
      "aspnet-core"
    ],
    "examples": [
      {
        "snippet": "[HttpGet(\"foo\")]\n// Noncompliant: Use the ProducesResponseType overload containing the return type for succesful responses.\n[ProducesResponseType(StatusCodes.Status200OK)]\npublic IActionResult MagicNumber() => Ok(42);",
        "isCorrect": false
      },
      {
        "snippet": "[HttpGet(\"foo\")]\n[ProducesResponseType<int>(StatusCodes.Status200OK)]\npublic IActionResult MagicNumber() => Ok(42);",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "424a6105-5bd0-4f58-83f8-350536f0fa66",
    "title": "Avoid Blocking Calls to Async Methods",
    "rule": "Blocking async methods with `.Result` or `.Wait()` can cause deadlocks and prevent efficient asynchronous execution. Use `await` instead for proper async behavior.",
    "why_is_this_important": "Blocking async methods with `.Result` or `.Wait()` can cause deadlocks and prevent efficient asynchronous execution. Use `await` instead for proper async behavior.",
    "severity": "Critical",
    "bad_example": "public static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    // This method causes a deadlock when called in a GUI or ASP.NET context.\n    public static void Test()\n    {\n        // Start the delay.\n        var delayTask = DelayAsync();\n        // Wait for the delay to complete.\n        delayTask.Wait(); // Noncompliant\n    }\n}",
    "good_example": "public static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    public static async Task TestAsync()\n    {\n        // Start the delay.\n        var delayTask = DelayAsync();\n        // Wait for the delay to complete.\n        await delayTask;\n    }\n}",
    "tags": [
      "maintainability",
      "performance",
      "concurrency",
      "async-best-practices"
    ],
    "examples": [
      {
        "snippet": "public static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    // This method causes a deadlock when called in a GUI or ASP.NET context.\n    public static void Test()\n    {\n        // Start the delay.\n        var delayTask = DelayAsync();\n        // Wait for the delay to complete.\n        delayTask.Wait(); // Noncompliant\n    }\n}",
        "isCorrect": false
      },
      {
        "snippet": "public static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    public static async Task TestAsync()\n    {\n        // Start the delay.\n        var delayTask = DelayAsync();\n        // Wait for the delay to complete.\n        await delayTask;\n    }\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "3eb90b4d-1c7d-44bd-acc4-e3105798a894",
    "title": "Use Awaitable Methods in Async Code",
    "rule": "Calling synchronous methods inside async code can block execution and reduce performance. Use awaitable methods to ensure proper async execution.",
    "why_is_this_important": "Calling synchronous methods inside async code can block execution and reduce performance. Use awaitable methods to ensure proper async execution.",
    "severity": "High",
    "bad_example": "public async Task Examples(Stream stream, DbSet<Person> dbSet)\n{\n    stream.Read(array, 0, 1024);            // Noncompliant\n    File.ReadAllLines(\"path\");              // Noncompliant\n    dbSet.ToList();                         // Noncompliant in Entity Framework Core queries\n    dbSet.FirstOrDefault(x => x.Age >= 18); // Noncompliant in Entity Framework Core queries\n}",
    "good_example": "public async Task Examples(Stream stream, DbSet<Person> dbSet)\n{\n    await stream.ReadAsync(array, 0, 1024);\n    await File.ReadAllLinesAsync(\"path\");\n    await dbSet.ToListAsync();\n    await dbSet.FirstOrDefaultAsync(x => x.Age >= 18);\n}",
    "tags": [
      "reliability",
      "async-best-practices",
      "maintainability"
    ],
    "examples": [
      {
        "snippet": "public async Task Examples(Stream stream, DbSet<Person> dbSet)\n{\n    stream.Read(array, 0, 1024);            // Noncompliant\n    File.ReadAllLines(\"path\");              // Noncompliant\n    dbSet.ToList();                         // Noncompliant in Entity Framework Core queries\n    dbSet.FirstOrDefault(x => x.Age >= 18); // Noncompliant in Entity Framework Core queries\n}",
        "isCorrect": false
      },
      {
        "snippet": "public async Task Examples(Stream stream, DbSet<Person> dbSet)\n{\n    await stream.ReadAsync(array, 0, 1024);\n    await File.ReadAllLinesAsync(\"path\");\n    await dbSet.ToListAsync();\n    await dbSet.FirstOrDefaultAsync(x => x.Age >= 18);\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "98c8581b-5cbb-46fa-baa9-16b7eb464a36",
    "title": "Mark Unchanged Variables as `const`",
    "rule": "Ensure that variables that never change are marked as `const` to prevent accidental modification and enhance code clarity.",
    "why_is_this_important": "Variables that never change should be marked as `const` to prevent accidental modification and improve code clarity.",
    "severity": "High",
    "bad_example": "public bool Seek(int[] input)\n{\n  var target = 32;  // Noncompliant\n  foreach (int i in input)\n  {\n    if (i == target)\n    {\n      return true;\n    }\n  }\n  return false;\n}",
    "good_example": "public bool Seek(int[] input)\n{\n  const int target = 32;\n  foreach (int i in input)\n  {\n    if (i == target)\n    {\n      return true;\n    }\n  }\n  return false;\n}",
    "tags": [
      "performance",
      "maintainability",
      "best-practices"
    ],
    "examples": [
      {
        "snippet": "public bool Seek(int[] input)\n{\n  var target = 32;  // Noncompliant\n  foreach (int i in input)\n  {\n    if (i == target)\n    {\n      return true;\n    }\n  }\n  return false;\n}",
        "isCorrect": false
      },
      {
        "snippet": "public bool Seek(int[] input)\n{\n  const int target = 32;\n  foreach (int i in input)\n  {\n    if (i == target)\n    {\n      return true;\n    }\n  }\n  return false;\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "ca089fa7-0c0d-4cfd-9458-aac4c6480669",
    "title": "Prefer Named Classes Over Tuples",
    "rule": "Ensure that titled classes are used instead of untitled tuples for complex data structures. Tuples should only be used when their purpose is immediately clear.",
    "why_is_this_important": "Tuples without descriptive titles can make code difficult to understand and maintain. Named classes provide clarity and improve code readability.",
    "severity": "Medium",
    "bad_example": "Tuple<int, string> result = new Tuple<int, string>(1, \"Hello\");",
    "good_example": "public class Result\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\nvar result = new Result { Id = 1, Name = \"Hello\" };\n",
    "tags": [
      "maintainability",
      "readability",
      "best-practices",
      "google"
    ],
    "examples": [
      {
        "snippet": "Tuple<int, string> result = new Tuple<int, string>(1, \"Hello\");",
        "isCorrect": false
      },
      {
        "snippet": "public class Result\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\nvar result = new Result { Id = 1, Name = \"Hello\" };\n",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "136deba4-3bb8-455e-bdab-425fb29a155f",
    "title": "Use Type Annotations for Better Readability",
    "rule": "Check if function signatures include type annotations. Type hints improve readability and help catch type-related errors early. Recommend adding type annotations where missing.",
    "why_is_this_important": "Type annotations improve code clarity, making it easier to understand function inputs and outputs. They also help catch type-related errors early, reducing debugging time.",
    "severity": "Medium",
    "bad_example": "def add(a, b):\n    return a + b",
    "good_example": "def add(a: int, b: int) -> int:\n    return a + b",
    "tags": [
      "maintainability",
      "clean-code",
      "clarity",
      "google"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "def add(a, b):\n    return a + b",
        "isCorrect": false
      },
      {
        "snippet": "def add(a: int, b: int) -> int:\n    return a + b",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "52edc4de-b503-4e80-8087-acb8aa289d54",
    "title": "Document Exceptions in Function Docstrings",
    "rule": "Identify functions that raise exceptions but do not document them in docstrings. Missing exception documentation makes it difficult to understand failure cases. Suggest adding an `:raises` section in the docstring.",
    "why_is_this_important": "If a function raises exceptions but doesn't document them, it can be unclear what errors to expect. This makes it harder to use the function safely and handle potential failures correctly.",
    "severity": "High",
    "bad_example": "def fetch_data():\n    if error:\n        raise ValueError('Invalid data')",
    "good_example": "def fetch_data():\n    \"\"\"\n    Fetches data from the database.\n\n    Raises:\n        ValueError: If the data is invalid.\n    \"\"\"\n    if error:\n        raise ValueError(\"Invalid data\")",
    "tags": [
      "maintainability",
      "clarity",
      "documentation",
      "google"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "def fetch_data():\n    if error:\n        raise ValueError('Invalid data')",
        "isCorrect": false
      },
      {
        "snippet": "def fetch_data():\n    \"\"\"\n    Fetches data from the database.\n\n    Raises:\n        ValueError: If the data is invalid.\n    \"\"\"\n    if error:\n        raise ValueError(\"Invalid data\")",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "d985b3c6-83df-441a-8b5e-346a185bb680",
    "title": "Avoid Functions That Always Return the Same Value",
    "rule": "Identify functions that return the same value regardless of input. This may indicate poor design or a logic error.",
    "why_is_this_important": "If a function always returns the same value regardless of input, it may indicate poor design or a logic error.",
    "severity": "High",
    "bad_example": "def foo(a):  # NonCompliant\n    b = 12\n    if a == 1:\n        return b\n    return b",
    "good_example": "",
    "tags": [
      "reliability",
      "clean-code"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "def foo(a):  # NonCompliant\n    b = 12\n    if a == 1:\n        return b\n    return b",
        "isCorrect": false
      }
    ]
  },
  {
    "uuid": "2b53473b-a9c5-4c7a-a681-b14d642364db",
    "title": "Keep Lines Under 80 Characters for Readability",
    "rule": "Check if lines exceed 80 characters (excluding comments and docstrings). Long lines reduce readability. Recommend breaking lines or using line continuations for better formatting.",
    "why_is_this_important": "Long lines can make code harder to read, especially on smaller screens or in side-by-side comparisons. Keeping lines short improves readability and maintainability.",
    "severity": "Low",
    "bad_example": "result = [mapping_expr for value in iterable if condition(value)]",
    "good_example": "result = [\n    mapping_expr\n    for value in iterable\n    if condition(value)\n]",
    "tags": [
      "readability",
      "clean-code",
      "maintainability",
      "google"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "result = [mapping_expr for value in iterable if condition(value)]",
        "isCorrect": false
      },
      {
        "snippet": "result = [\n    mapping_expr\n    for value in iterable\n    if condition(value)\n]",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "4dfcedf8-3fc0-4dbc-993f-ba51ceaaadbc",
    "title": "Avoid Private-Only Constructors",
    "rule": "Classes with only private constructors cannot be instantiated outside their own scope, potentially making them dead code.",
    "why_is_this_important": "Classes with only private constructors cannot be instantiated outside their own scope, potentially making them dead code.",
    "severity": "High",
    "bad_example": "public class MyClass // Noncompliant: the class contains only private constructors\n{\n  private MyClass() { ... }\n}",
    "good_example": "public class MyClass // Compliant: the class contains at least one non-private constructor\n{\n  public MyClass() { ... }\n}",
    "tags": [
      "reliability",
      "maintainability",
      "code-smell"
    ],
    "examples": [
      {
        "snippet": "public class MyClass // Noncompliant: the class contains only private constructors\n{\n  private MyClass() { ... }\n}",
        "isCorrect": false
      },
      {
        "snippet": "public class MyClass // Compliant: the class contains at least one non-private constructor\n{\n  public MyClass() { ... }\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "a4efb52f-c8b3-42ea-afeb-32ebf4f707d9",
    "title": "Avoid Constructing System Commands from User Input",
    "rule": "Passing user input directly into system commands can lead to command injection vulnerabilities. Always sanitize inputs before execution.",
    "why_is_this_important": "Passing user input directly into system commands can lead to command injection vulnerabilities. Always sanitize inputs before execution.",
    "severity": "High",
    "bad_example": "using System.Diagnostics;\nProcess p = new Process();\np.StartInfo.FileName = \"/usr/bin/find\";\np.StartInfo.ArgumentList.Add(input); // Sensitive",
    "good_example": "using System.Diagnostics;\nProcess p = new Process();\np.StartInfo.FileName = \"/usr/bin/find\";\nif (allowed.Contains(input)) {\n  p.StartInfo.ArgumentList.Add(input);\n}",
    "tags": [
      "security",
      "owasp",
      "cwe",
      "command-injection"
    ],
    "examples": [
      {
        "snippet": "using System.Diagnostics;\nProcess p = new Process();\np.StartInfo.FileName = \"/usr/bin/find\";\np.StartInfo.ArgumentList.Add(input); // Sensitive",
        "isCorrect": false
      },
      {
        "snippet": "using System.Diagnostics;\nProcess p = new Process();\np.StartInfo.FileName = \"/usr/bin/find\";\nif (allowed.Contains(input)) {\n  p.StartInfo.ArgumentList.Add(input);\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "fa56c6b0-ee83-4076-b852-879cb6ee77e2",
    "title": "Secure OS Command Arguments",
    "rule": "If user input is used in OS command arguments, it can be manipulated to expand access or execute unintended commands. Ensure proper sanitization to prevent injection.",
    "why_is_this_important": "If user input is used in OS command arguments, it can be manipulated to expand access or execute unintended commands. Ensure proper sanitization to prevent injection.",
    "severity": "Low",
    "bad_example": "public class ExampleController : Controller\n{\n    public void Run(string args)\n    {\n        Process p             = new Process();\n        p.StartInfo.FileName  = \"/usr/bin/find\";\n        p.StartInfo.Arguments = \"/some/folder -ititle \" + args;\n        p.Start();\n    }\n}",
    "good_example": "public class ExampleController : Controller\n{\n    public void Run(string args)\n    {\n        Process p            = new Process();\n        p.StartInfo.FileName = \"/usr/bin/find\";\n        p.StartInfo.ArgumentList.Add(\"/some/folder\");\n        p.StartInfo.ArgumentList.Add(\"-ititle\");\n        p.StartInfo.ArgumentList.Add(args);\n        p.Start();\n    }\n}",
    "tags": [
      "security",
      "owasp",
      "cwe",
      "command-injection"
    ],
    "examples": [
      {
        "snippet": "public class ExampleController : Controller\n{\n    public void Run(string args)\n    {\n        Process p             = new Process();\n        p.StartInfo.FileName  = \"/usr/bin/find\";\n        p.StartInfo.Arguments = \"/some/folder -ititle \" + args;\n        p.Start();\n    }\n}",
        "isCorrect": false
      },
      {
        "snippet": "public class ExampleController : Controller\n{\n    public void Run(string args)\n    {\n        Process p            = new Process();\n        p.StartInfo.FileName = \"/usr/bin/find\";\n        p.StartInfo.ArgumentList.Add(\"/some/folder\");\n        p.StartInfo.ArgumentList.Add(\"-ititle\");\n        p.StartInfo.ArgumentList.Add(args);\n        p.Start();\n    }\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "f0c429c0-da21-4f46-822c-9da170e54f08",
    "title": "CSRF Protection Should Always Be Enabled",
    "rule": "Disabling CSRF protection allows attackers to trick users into performing unintended actions, such as modifying account details or making unauthorized transactions.",
    "why_is_this_important": "Disabling CSRF protection allows attackers to trick users into performing unintended actions, such as modifying account details or making unauthorized transactions.",
    "severity": "Critical",
    "bad_example": "public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options => options.Filters.Add(new IgnoreAntiforgeryTokenAttribute())); // Sensitive\n    // ...\n}",
    "good_example": "public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options => options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute()));\n    // or\n    services.AddControllersWithViews(options => options.Filters.Add(new ValidateAntiForgeryTokenAttribute()));\n    // ...\n}",
    "tags": [
      "security",
      "owasp",
      "cwe",
      "csrf-prevention"
    ],
    "examples": [
      {
        "snippet": "public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options => options.Filters.Add(new IgnoreAntiforgeryTokenAttribute())); // Sensitive\n    // ...\n}",
        "isCorrect": false
      },
      {
        "snippet": "public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options => options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute()));\n    // or\n    services.AddControllersWithViews(options => options.Filters.Add(new ValidateAntiForgeryTokenAttribute()));\n    // ...\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "55a0284b-eb7f-40ae-8b8c-db3dc66e8e0a",
    "title": "Avoid equality operators in loop termination conditions",
    "rule": "Check if loops use equality operators (== or !=) in termination conditions. These can lead to infinite loops if the condition is never met exactly. Instead, use relational operators like < or > for safer loop termination.",
    "why_is_this_important": "Using equality operators (== or !=) in loop termination conditions can accidentally cause infinite loops if the condition is never met exactly. Relational operators like < or > are safer and reduce the risk of unintended infinite loops.",
    "severity": "Critical",
    "bad_example": "for (var i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}",
    "good_example": "for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}",
    "tags": [
      "cwe",
      "maintainability",
      "security"
    ],
    "examples": [
      {
        "snippet": "for (var i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}",
        "isCorrect": false
      },
      {
        "snippet": "for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "6d596229-9e3c-4941-bba7-4225468049a7",
    "title": "Do Not Ignore Exceptions",
    "rule": "Always handle or log caught exceptions instead of silently ignoring them to improve debugging and maintain application stability.",
    "why_is_this_important": "Ignoring exceptions can hide potential bugs. Handle them properly or log them for debugging purposes.",
    "severity": "Medium",
    "bad_example": "void save() {\n  try {\n    saveDocument();\n  } catch (exception) {\n  }\n}",
    "good_example": "void save() {\n  try {\n    saveDocument();\n  } catch (exception) {\n    log(exception);\n  }\n}",
    "tags": [
      "cwe",
      "maintainability",
      "security",
      "owasp"
    ],
    "examples": [
      {
        "snippet": "void save() {\n  try {\n    saveDocument();\n  } catch (exception) {\n  }\n}",
        "isCorrect": false
      },
      {
        "snippet": "void save() {\n  try {\n    saveDocument();\n  } catch (exception) {\n    log(exception);\n  }\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "f3e395c0-36de-4959-bf30-46db154ee103",
    "title": "Call `model.eval()` or `model.train()` After Loading a PyTorch Model",
    "rule": "Verify that after loading a PyTorch model, either `model.eval()` or `model.train()` is called. Failing to do so can result in incorrect behavior, especially for layers like dropout and batch normalization.",
    "why_is_this_important": "When loading a model’s state in PyTorch, failing to set it to training (`train()`) or evaluation (`eval()`) mode can lead to incorrect behavior.",
    "severity": "High",
    "bad_example": "import torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth')) # Noncompliant: model.train() or model.eval() was not called.",
    "good_example": "import torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth'))\nmodel.eval()",
    "tags": [
      "data-science",
      "maintainability",
      "clarity"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "import torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth')) # Noncompliant: model.train() or model.eval() was not called.",
        "isCorrect": false
      },
      {
        "snippet": "import torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth'))\nmodel.eval()",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "d16cc083-653c-4275-af24-5370328eaed5",
    "title": "Prevent SQL Injection in Queries",
    "rule": "Using unsanitized user input in SQL queries can lead to SQL injection attacks. Use parameterized queries to protect against malicious inputs.",
    "why_is_this_important": "Using unsanitized user input in SQL queries can lead to SQL injection attacks. Use parameterized queries to protect against malicious inputs.",
    "severity": "Critical",
    "bad_example": "public class ExampleController : Controller\n{\n    private readonly UserAccountContext Context;\n\n    public IActionResult Authenticate(string user, string pass)\n    {\n        var query = \"SELECT * FROM users WHERE user = '\" + user + \"' AND pass = '\" + pass + \"'\";\n\n        var queryResults = Context\n            .Database\n            .FromSqlRaw(query);\n\n        if (queryResults == 0)\n        {\n            return Unauthorized();\n        }\n\n        return Ok();\n    }\n}",
    "good_example": "public class ExampleController : Controller\n{\n    private readonly UserAccountContext Context;\n\n    public IActionResult Authenticate(string user, string pass)\n    {\n        var query = \"SELECT * FROM users WHERE user = {0} AND pass = {1}\";\n\n        var queryResults = Context\n            .Database\n            .FromSqlRaw(query, user, pass);\n\n        if (queryResults == 0)\n        {\n            return Unauthorized();\n        }\n\n        return Ok();\n    }\n}",
    "tags": [
      "security",
      "owasp",
      "cwe",
      "database-security"
    ],
    "examples": [
      {
        "snippet": "public class ExampleController : Controller\n{\n    private readonly UserAccountContext Context;\n\n    public IActionResult Authenticate(string user, string pass)\n    {\n        var query = \"SELECT * FROM users WHERE user = '\" + user + \"' AND pass = '\" + pass + \"'\";\n\n        var queryResults = Context\n            .Database\n            .FromSqlRaw(query);\n\n        if (queryResults == 0)\n        {\n            return Unauthorized();\n        }\n\n        return Ok();\n    }\n}",
        "isCorrect": false
      },
      {
        "snippet": "public class ExampleController : Controller\n{\n    private readonly UserAccountContext Context;\n\n    public IActionResult Authenticate(string user, string pass)\n    {\n        var query = \"SELECT * FROM users WHERE user = {0} AND pass = {1}\";\n\n        var queryResults = Context\n            .Database\n            .FromSqlRaw(query, user, pass);\n\n        if (queryResults == 0)\n        {\n            return Unauthorized();\n        }\n\n        return Ok();\n    }\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "dd873ee1-49b1-4bbf-a268-3f1aa44be20a",
    "title": "Prevent NoSQL Injection Attacks",
    "rule": "Unsanitized user input in NoSQL queries can allow attackers to manipulate database queries, leading to data leaks or unauthorized modifications.",
    "why_is_this_important": "Unsanitized user input in NoSQL queries can allow attackers to manipulate database queries, leading to data leaks or unauthorized modifications.",
    "severity": "Critical",
    "bad_example": "using MongoDB.Driver;\nusing MongoDB.Bson;\n\n[ApiController]\n[Route(\"Example\")]\npublic class ExampleController: ControllerBase\n{\n    private string connectionString;\n\n    [Route(\"Example\")]\n    public async Task<string> Example()\n    {\n        var client     = new MongoClient(connectionString);\n        var database   = client.GetDatabase(\"example\");\n        var collection = database.GetCollection<Message>(\"messages\");\n\n        var filterDefinition = Request.Query[\"filterDefinition\"];\n\n        await collection.FindAsync(filter)\n    }\n}",
    "good_example": "using MongoDB.Driver;\nusing MongoDB.Bson;\n\n[ApiController]\n[Route(\"Example\")]\npublic class ExampleController: ControllerBase\n{\n    private string connectionString;\n\n    [Route(\"Example\")]\n    public async Task<string> Example()\n    {\n        var client     = new MongoClient(connectionString);\n        var database   = client.GetDatabase(\"example\");\n        var collection = database.GetCollection<Message>(\"messages\");\n\n        var filterDefinition = Builders<BsonDocument>.Filter.Eq(\"Usertitle\", \"Example\");\n\n        await collection.FindAsync(filter)\n    }\n}",
    "tags": [
      "security",
      "owasp",
      "cwe",
      "database-security"
    ],
    "examples": [
      {
        "snippet": "using MongoDB.Driver;\nusing MongoDB.Bson;\n\n[ApiController]\n[Route(\"Example\")]\npublic class ExampleController: ControllerBase\n{\n    private string connectionString;\n\n    [Route(\"Example\")]\n    public async Task<string> Example()\n    {\n        var client     = new MongoClient(connectionString);\n        var database   = client.GetDatabase(\"example\");\n        var collection = database.GetCollection<Message>(\"messages\");\n\n        var filterDefinition = Request.Query[\"filterDefinition\"];\n\n        await collection.FindAsync(filter)\n    }\n}",
        "isCorrect": false
      },
      {
        "snippet": "using MongoDB.Driver;\nusing MongoDB.Bson;\n\n[ApiController]\n[Route(\"Example\")]\npublic class ExampleController: ControllerBase\n{\n    private string connectionString;\n\n    [Route(\"Example\")]\n    public async Task<string> Example()\n    {\n        var client     = new MongoClient(connectionString);\n        var database   = client.GetDatabase(\"example\");\n        var collection = database.GetCollection<Message>(\"messages\");\n\n        var filterDefinition = Builders<BsonDocument>.Filter.Eq(\"Usertitle\", \"Example\");\n\n        await collection.FindAsync(filter)\n    }\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "b31b7578-5e8a-4f9b-9560-27f2d895d47f",
    "title": "Avoid Generic `except:` Blocks",
    "rule": "Detect `except:` blocks that catch all exceptions indiscriminately. Using a broad `except:` can hide real issues and prevent necessary errors like `KeyboardInterrupt`. Recommend catching specific exceptions instead.",
    "why_is_this_important": "Catching all exceptions with a broad `except:` block hides real issues, including unexpected errors. It can also prevent important exceptions like `KeyboardInterrupt` from stopping the program properly, making debugging more difficult. Always catch specific exceptions instead.",
    "severity": "High",
    "bad_example": "try:\n    result = 10 / 0\nexcept:\n    print('An error occurred')",
    "good_example": "try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')",
    "tags": [
      "debugging",
      "security",
      "error-handling",
      "owasp",
      "google"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "try:\n    result = 10 / 0\nexcept:\n    print('An error occurred')",
        "isCorrect": false
      },
      {
        "snippet": "try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "07ff5369-d341-4f68-bbbb-218c9d66b994",
    "title": "Keep `try` Blocks Small and Focused",
    "rule": "Detect `try` blocks that contain excessive code. Large `try` blocks make it harder to debug errors. Recommend narrowing the scope of the `try` block to only the necessary code.",
    "why_is_this_important": "Large `try` blocks make it harder to pinpoint what caused an exception. Keeping them small ensures that only the necessary code is monitored for errors.",
    "severity": "Medium",
    "bad_example": "try:\n    x = 10\n    y = x / 0\n    print(y)\nexcept ZeroDivisionError:\n    print('Error')",
    "good_example": "x = 10\ntry:\n    y = x / 0\nexcept ZeroDivisionError:\n    print('Error')",
    "tags": [
      "debugging",
      "error-handling",
      "clarity",
      "google"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "try:\n    x = 10\n    y = x / 0\n    print(y)\nexcept ZeroDivisionError:\n    print('Error')",
        "isCorrect": false
      },
      {
        "snippet": "x = 10\ntry:\n    y = x / 0\nexcept ZeroDivisionError:\n    print('Error')",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "beeca29b-fd90-4bee-b164-6c31d545cc02",
    "title": "Utility Classes Should Not Have Public Constructors",
    "rule": "Make utility classes non-instantiable by providing a private constructor or marking them as `abstract`.",
    "why_is_this_important": "Utility classes contain only static members and should not be instantiated. Mark them as `abstract` or provide a private constructor.",
    "severity": "High",
    "bad_example": "class StringUtils { // Noncompliant\n\n  static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}",
    "good_example": "class StringUtils { // Compliant\n\n  StringUtils._() {\n    throw Exception('Utility class');\n  }\n\n  static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}",
    "tags": [
      "maintainability",
      "design"
    ],
    "examples": [
      {
        "snippet": "class StringUtils { // Noncompliant\n\n  static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}",
        "isCorrect": false
      },
      {
        "snippet": "class StringUtils { // Compliant\n\n  StringUtils._() {\n    throw Exception('Utility class');\n  }\n\n  static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "3d735d2d-45a5-4479-8806-05c5a23fd46a",
    "title": "Always use JSDoc for documentation",
    "rule": "Ensure that all classes, fields, and methods are documented with JSDoc. JSDoc improves code clarity, provides documentation for developers, and helps with IDE autocompletion.",
    "why_is_this_important": "JSDoc improves code clarity, provides documentation for developers, and helps with IDE autocompletion. All classes, fields, and methods should be properly documented using JSDoc.",
    "severity": "Medium",
    "bad_example": "",
    "good_example": "",
    "tags": [
      "google",
      "docs"
    ],
    "examples": []
  },
  {
    "uuid": "fca3f7d8-e250-4836-8f1e-a6b44a804277",
    "title": "Do Not Use Block Comments for Documentation",
    "rule": "Use `///` for documentation instead of block comments to improve tooling support and ensure better formatting in generated docs.",
    "why_is_this_important": "Block comments do not generate proper Dart documentation. Use `///` for documentation comments instead.",
    "severity": "Low",
    "bad_example": "void greet(String title) {\n  /* Assume we have a valid title. */\n  print('Hi, $title!');\n}",
    "good_example": "void greet(String title) {\n  // Assume we have a valid title.\n  print('Hi, $title!');\n}",
    "tags": [
      "docs",
      "Google",
      "readability"
    ],
    "examples": [
      {
        "snippet": "void greet(String title) {\n  /* Assume we have a valid title. */\n  print('Hi, $title!');\n}",
        "isCorrect": false
      },
      {
        "snippet": "void greet(String title) {\n  // Assume we have a valid title.\n  print('Hi, $title!');\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "6e05a980-0a37-4774-b83e-04527b0a5867",
    "title": "Specify Timeout for Regular Expressions",
    "rule": "Without a timeout, regex processing on untrusted input can be exploited for Denial-of-Service (DoS) attacks. Always define a timeout when using regex.",
    "why_is_this_important": "Without a timeout, regex processing on untrusted input can be exploited for Denial-of-Service (DoS) attacks. Always define a timeout when using regex.",
    "severity": "High",
    "bad_example": "public void RegexPattern(string input)\n{\n    var emailPattern = new Regex(\".+@.+\", RegexOptions.None);\n    var isNumber = Regex.IsMatch(input, \"[0-9]+\");\n    var isLetterA = Regex.IsMatch(input, \"(a+)+\");\n}",
    "good_example": "public void RegexPattern(string input)\n{\n    var emailPattern = new Regex(\".+@.+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isNumber = Regex.IsMatch(input, \"[0-9]+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isLetterA = Regex.IsMatch(input, \"(a+)+\", RegexOptions.NonBacktracking); // .Net 7 and above\n    AppDomain.CurrentDomain.SetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\", TimeSpan.FromMilliseconds(100)); // process-wide setting\n}",
    "tags": [
      "security",
      "owasp",
      "cwe",
      "dos-prevention"
    ],
    "examples": [
      {
        "snippet": "public void RegexPattern(string input)\n{\n    var emailPattern = new Regex(\".+@.+\", RegexOptions.None);\n    var isNumber = Regex.IsMatch(input, \"[0-9]+\");\n    var isLetterA = Regex.IsMatch(input, \"(a+)+\");\n}",
        "isCorrect": false
      },
      {
        "snippet": "public void RegexPattern(string input)\n{\n    var emailPattern = new Regex(\".+@.+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isNumber = Regex.IsMatch(input, \"[0-9]+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isLetterA = Regex.IsMatch(input, \"(a+)+\", RegexOptions.NonBacktracking); // .Net 7 and above\n    AppDomain.CurrentDomain.SetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\", TimeSpan.FromMilliseconds(100)); // process-wide setting\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "4d38958d-7ad0-46d2-8981-eb6d2501b1c2",
    "title": "Prefer `str.replace()` Over `re.sub()` for Simple Cases",
    "rule": "Detect uses of `re.sub()` where regular expressions are not needed. For simple string replacements, `str.replace()` is more efficient and should be used instead.",
    "why_is_this_important": "Using `re.sub()` when no regex features are needed is inefficient. `str.replace()` is faster and should be used for simple string replacements.",
    "severity": "Critical",
    "bad_example": "init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = re.sub(r\"Bob is\", \"It's\", init) # Noncompliant\nchanged = re.sub(r\"\\.\\.\\.\", \";\", changed) # Noncompliant",
    "good_example": "init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = init.replace(\"Bob is\", \"It's\")\nchanged = changed.replace(\"...\", \";\")",
    "tags": [
      "performance",
      "efficiency"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = re.sub(r\"Bob is\", \"It's\", init) # Noncompliant\nchanged = re.sub(r\"\\.\\.\\.\", \";\", changed) # Noncompliant",
        "isCorrect": false
      },
      {
        "snippet": "init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = init.replace(\"Bob is\", \"It's\")\nchanged = changed.replace(\"...\", \";\")",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "efc20e28-a153-45be-825c-e63854899ee0",
    "title": "Ensure `StringBuilder` Data Is Used",
    "rule": "Ensure that `StringBuilder` instances are converted to strings using `ToString()` before use to prevent memory wastage.",
    "why_is_this_important": "Creating a `StringBuilder` without calling `ToString()` results in unused objects, wasting memory and reducing performance.",
    "severity": "High",
    "bad_example": "public void DoSomething(List<string> strings) {\n  var sb = new StringBuilder();  // Noncompliant\n  sb.Append(\"Got: \");\n  foreach(var str in strings) {\n    sb.Append(str).Append(\", \");\n    // ...\n  }\n}",
    "good_example": "public void DoSomething(List<string> strings) {\n  foreach(var str in strings) {\n    // ...\n  }\n}",
    "tags": [
      "performance",
      "efficiency",
      "maintainability"
    ],
    "examples": [
      {
        "snippet": "public void DoSomething(List<string> strings) {\n  var sb = new StringBuilder();  // Noncompliant\n  sb.Append(\"Got: \");\n  foreach(var str in strings) {\n    sb.Append(str).Append(\", \");\n    // ...\n  }\n}",
        "isCorrect": false
      },
      {
        "snippet": "public void DoSomething(List<string> strings) {\n  foreach(var str in strings) {\n    // ...\n  }\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "adb93e61-1f79-4af7-8384-68c5a74a1602",
    "title": "Don’t Create Exceptions Without Raising Them",
    "rule": "Identify instances where an exception object is created but never raised. This is likely an oversight and should either be removed or properly raised.",
    "why_is_this_important": "Creating an exception without raising it does nothing and is likely an oversight. It should be removed or properly raised.",
    "severity": "Critical",
    "bad_example": "def func(x):\n    if not isinstance(x, int):\n        TypeError(\"Wrong type for parameter 'x'. func expects an integer\")  # Noncompliant\n    if x < 0:\n        ValueError  # Noncompliant\n    return x + 42",
    "good_example": "def func(x):\n    if not isinstance(x, int):\n        raise TypeError(\"Wrong type for parameter 'x'. func expects an integer\")\n    if x < 0:\n        raise ValueError\n    return x + 42",
    "tags": [
      "error-handling",
      "debugging"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "def func(x):\n    if not isinstance(x, int):\n        TypeError(\"Wrong type for parameter 'x'. func expects an integer\")  # Noncompliant\n    if x < 0:\n        ValueError  # Noncompliant\n    return x + 42",
        "isCorrect": false
      },
      {
        "snippet": "def func(x):\n    if not isinstance(x, int):\n        raise TypeError(\"Wrong type for parameter 'x'. func expects an integer\")\n    if x < 0:\n        raise ValueError\n    return x + 42",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "3b33ae8f-3fae-4771-b778-8b812cbef3bc",
    "title": "Avoid Using Boolean Expressions in `except` Statements",
    "rule": "Detect `except` clauses that use `or` or `and` to catch multiple exceptions. This does not work as intended. Recommend using a tuple of exceptions instead.",
    "why_is_this_important": "Using `or`/`and` with exceptions in `except` blocks doesn’t work as expected and can lead to unintended behavior. Use tuples instead.",
    "severity": "Critical",
    "bad_example": "try:\n    raise TypeError()\nexcept ValueError or TypeError:  # Noncompliant\n    print(\"Catching only ValueError\")\nexcept ValueError and TypeError:  # Noncompliant\n    print(\"Catching only TypeError\")\nexcept (ValueError or TypeError) as exception:  # Noncompliant\n    print(\"Catching only ValueError\")\n\nfoo = ValueError or TypeError  # foo == ValueError\nfoo = ValueError and TypeError  # foo == TypeError",
    "good_example": "try:\n    raise TypeError()\nexcept (ValueError, TypeError) as exception:\n    print(\"Catching ValueError and TypeError\")",
    "tags": [
      "error-handling",
      "debugging"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "try:\n    raise TypeError()\nexcept ValueError or TypeError:  # Noncompliant\n    print(\"Catching only ValueError\")\nexcept ValueError and TypeError:  # Noncompliant\n    print(\"Catching only TypeError\")\nexcept (ValueError or TypeError) as exception:  # Noncompliant\n    print(\"Catching only ValueError\")\n\nfoo = ValueError or TypeError  # foo == ValueError\nfoo = ValueError and TypeError  # foo == TypeError",
        "isCorrect": false
      },
      {
        "snippet": "try:\n    raise TypeError()\nexcept (ValueError, TypeError) as exception:\n    print(\"Catching ValueError and TypeError\")",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "d42d2547-f8d9-45c1-ad36-ddac85fba3e0",
    "title": "Check `mounted` Before Using `BuildContext` After an Async Operation",
    "rule": "Verify if a widget is still mounted before using `BuildContext` inside an asynchronous operation to prevent accessing invalid states.",
    "why_is_this_important": "`BuildContext` may become invalid if the widget is unmounted during an async operation. Always check `mounted` before using it.",
    "severity": "High",
    "bad_example": "@override\nWidget build(BuildContext context) => OutlinedButton(\n    onPressed: () async {\n        await Future<void>.delayed(const Duration(seconds: 1));\n        Navigator.of(context).pop(); // Non compliant\n    },\n    child: const Text('Delayed pop'),\n  );",
    "good_example": "@override\nWidget build(BuildContext context) => OutlinedButton(\n    onPressed: () async {\n        await Future<void>.delayed(const Duration(seconds: 1));\n        if (context.mounted) {\n          // The context is mounted, so it's safe to use it\n          Navigator.of(context).pop();\n        }\n    },\n    child: const Text('Delayed pop'),\n  );",
    "tags": [
      "Flutter",
      "reliability",
      "async"
    ],
    "examples": [
      {
        "snippet": "@override\nWidget build(BuildContext context) => OutlinedButton(\n    onPressed: () async {\n        await Future<void>.delayed(const Duration(seconds: 1));\n        Navigator.of(context).pop(); // Non compliant\n    },\n    child: const Text('Delayed pop'),\n  );",
        "isCorrect": false
      },
      {
        "snippet": "@override\nWidget build(BuildContext context) => OutlinedButton(\n    onPressed: () async {\n        await Future<void>.delayed(const Duration(seconds: 1));\n        if (context.mounted) {\n          // The context is mounted, so it's safe to use it\n          Navigator.of(context).pop();\n        }\n    },\n    child: const Text('Delayed pop'),\n  );",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "098b7cf8-8c00-4b29-9588-70d4be0370c3",
    "title": "Use Web-Only Libraries Only in Flutter Web Plugins",
    "rule": "Ensure `dart:html`, `dart:js`, and `dart:js_util` are only used in Flutter web plugins to prevent runtime errors in non-web environments.",
    "why_is_this_important": "`dart:html`, `dart:js`, and `dart:js_util` are only supported in web contexts. Using them outside of Flutter web plugins leads to runtime errors.",
    "severity": "High",
    "bad_example": "import 'dart:html';    // Non compliant\nimport 'dart:js';      // Non compliant\nimport 'dart:js_util'; // Non compliant\nimport 'package:other_package/other_library.dart';",
    "good_example": "import 'package:other_package/other_library.dart';",
    "tags": [
      "reliability",
      "Flutter",
      "web"
    ],
    "examples": [
      {
        "snippet": "import 'dart:html';    // Non compliant\nimport 'dart:js';      // Non compliant\nimport 'dart:js_util'; // Non compliant\nimport 'package:other_package/other_library.dart';",
        "isCorrect": false
      },
      {
        "snippet": "import 'package:other_package/other_library.dart';",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "04b1b7e8-0291-47a0-94a3-64f2495666c1",
    "title": "Avoid using Getters and Setters",
    "rule": "Check for the use of getters and setters. These can introduce unexpected side effects and have limited compiler support. Recommend using regular methods unless required by a framework.",
    "why_is_this_important": "Getters and setters can be difficult to reason about and have limited compiler support. They can introduce unexpected side effects and performance issues. Instead, use regular methods to define and modify properties unless working with frameworks that require them.",
    "severity": "Medium",
    "bad_example": "class Foo {\n  get next() { return this.nextId++; }\n}",
    "good_example": "",
    "tags": [
      "google",
      "maintainability"
    ],
    "examples": [
      {
        "snippet": "class Foo {\n  get next() { return this.nextId++; }\n}",
        "isCorrect": false
      }
    ]
  },
  {
    "uuid": "7888bc2b-08b3-49c3-b362-60479a87a2cc",
    "title": "Avoid using eval",
    "rule": "Detect the use of eval(). Eval allows execution of arbitrary code, leading to security vulnerabilities such as code injection. Recommend safer alternatives like function execution.",
    "why_is_this_important": "Using eval to execute code can lead to security vulnerabilities and is not allowed in environments with Content Security Policies. Avoid eval and use safer alternatives.",
    "severity": "Critical",
    "bad_example": "const userInput = 'alert(\"Hacked!\")';\neval(userInput);",
    "good_example": "const userInput = 'alert(\"Hacked!\")';\n// Avoid eval usage; parse or sanitize input appropriately\nconsole.log('Safe execution:', userInput);",
    "tags": [
      "google",
      "maintainability"
    ],
    "examples": [
      {
        "snippet": "const userInput = 'alert(\"Hacked!\")';\neval(userInput);",
        "isCorrect": false
      },
      {
        "snippet": "const userInput = 'alert(\"Hacked!\")';\n// Avoid eval usage; parse or sanitize input appropriately\nconsole.log('Safe execution:', userInput);",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "38bd4144-c918-4eda-a67b-b74534be6e37",
    "title": "Secure Connection Strings from Injection",
    "rule": "Allowing user input in connection strings can lead to injection attacks. Always validate and sanitize inputs before constructing connection strings.",
    "why_is_this_important": "Allowing user input in connection strings can lead to injection attacks. Always validate and sanitize inputs before constructing connection strings.",
    "severity": "Critical",
    "bad_example": "public string ConnectionString { get; set; } = \"Server=10.0.0.101;Database=CustomerData\";\n\npublic SqlConnection ConnectToDatabase(HttpRequest request)\n{\n    string connectionString = string.Format(\"{0};User ID={1};Password={2}\",\n        ConnectionString,\n        request.Form[\"usertitle\"],\n        request.Form[\"password\"]);\n\n    SqlConnection connection = new SqlConnection();\n    connection.ConnectionString = connectionString; // Noncompliant\n    connection.Open();\n    return connection;\n}",
    "good_example": "public string ConnectionString { get; set; } = \"Server=10.0.0.101;Database=CustomerData\";\n\npublic SqlConnection ConnectToDatabase(HttpRequest request)\n{\n    SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(ConnectionString);\n    builder.UserID = request.Form[\"usertitle\"];\n    builder.Password = request.Form[\"password\"];\n\n    SqlConnection connection = new SqlConnection();\n    connection.ConnectionString = builder.ConnectionString;\n    connection.Open();\n    return connection;\n}",
    "tags": [
      "security",
      "owasp",
      "cwe",
      "injection-prevention"
    ],
    "examples": [
      {
        "snippet": "public string ConnectionString { get; set; } = \"Server=10.0.0.101;Database=CustomerData\";\n\npublic SqlConnection ConnectToDatabase(HttpRequest request)\n{\n    string connectionString = string.Format(\"{0};User ID={1};Password={2}\",\n        ConnectionString,\n        request.Form[\"usertitle\"],\n        request.Form[\"password\"]);\n\n    SqlConnection connection = new SqlConnection();\n    connection.ConnectionString = connectionString; // Noncompliant\n    connection.Open();\n    return connection;\n}",
        "isCorrect": false
      },
      {
        "snippet": "public string ConnectionString { get; set; } = \"Server=10.0.0.101;Database=CustomerData\";\n\npublic SqlConnection ConnectToDatabase(HttpRequest request)\n{\n    SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(ConnectionString);\n    builder.UserID = request.Form[\"usertitle\"];\n    builder.Password = request.Form[\"password\"];\n\n    SqlConnection connection = new SqlConnection();\n    connection.ConnectionString = builder.ConnectionString;\n    connection.Open();\n    return connection;\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "8fe21ae4-4037-4afd-bfe2-00364cc4f3a2",
    "title": "Prevent Deserialization Injection",
    "rule": "Deserializing untrusted data can allow attackers to execute arbitrary code. Always validate and sanitize serialized inputs before processing.",
    "why_is_this_important": "Deserializing untrusted data can allow attackers to execute arbitrary code. Always validate and sanitize serialized inputs before processing.",
    "severity": "Critical",
    "bad_example": "public class Example : Controller\n{\n    [HttpPost]\n    public ActionResult Deserialize(HttpPostedFileBase inputFile)\n    {\n        ExpectedType expectedObject = null;\n        var formatter               = new BinaryFormatter();\n        expectedObject              = (ExpectedType)formatter.Deserialize(inputFile.InputStream);\n    }\n}",
    "good_example": "public class Example : Controller\n{\n    [HttpPost]\n    public ActionResult Deserialize(HttpPostedFileBase inputFile)\n    {\n        ExpectedType expectedObject = null;\n        JsonSerializer serializer   = new JsonSerializer(typeof(expectedObject));\n        expectedObject              = (ExpectedType)serializer.Deserialize(inputFile.InputStream);\n    }\n}",
    "tags": [
      "security",
      "owasp",
      "cwe",
      "injection-prevention"
    ],
    "examples": [
      {
        "snippet": "public class Example : Controller\n{\n    [HttpPost]\n    public ActionResult Deserialize(HttpPostedFileBase inputFile)\n    {\n        ExpectedType expectedObject = null;\n        var formatter               = new BinaryFormatter();\n        expectedObject              = (ExpectedType)formatter.Deserialize(inputFile.InputStream);\n    }\n}",
        "isCorrect": false
      },
      {
        "snippet": "public class Example : Controller\n{\n    [HttpPost]\n    public ActionResult Deserialize(HttpPostedFileBase inputFile)\n    {\n        ExpectedType expectedObject = null;\n        JsonSerializer serializer   = new JsonSerializer(typeof(expectedObject));\n        expectedObject              = (ExpectedType)serializer.Deserialize(inputFile.InputStream);\n    }\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "5a0fd2b0-9ff1-41b3-b942-ad8cbebf067e",
    "title": "Always Validate `ModelState.IsValid` in Controllers",
    "rule": "Failing to check `ModelState.IsValid` before processing user input can result in invalid or unverified data being accepted.",
    "why_is_this_important": "Failing to check `ModelState.IsValid` before processing user input can result in invalid or unverified data being accepted.",
    "severity": "High",
    "bad_example": "public async Task<IActionResult> Create(Movie movie) // Noncompliant: model validity check is missing\n{\n    _context.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n\n    return RedirectToAction(titleof(Index));\n}",
    "good_example": "public async Task<IActionResult> Create(Movie movie)\n{\n    if (!ModelState.IsValid)\n    {\n        return View(movie);\n    }\n\n    _context.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n\n    return RedirectToAction(titleof(Index));\n}",
    "tags": [
      "security",
      "reliability",
      "owasp",
      "input-validation"
    ],
    "examples": [
      {
        "snippet": "public async Task<IActionResult> Create(Movie movie) // Noncompliant: model validity check is missing\n{\n    _context.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n\n    return RedirectToAction(titleof(Index));\n}",
        "isCorrect": false
      },
      {
        "snippet": "public async Task<IActionResult> Create(Movie movie)\n{\n    if (!ModelState.IsValid)\n    {\n        return View(movie);\n    }\n\n    _context.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n\n    return RedirectToAction(titleof(Index));\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "a3a30f68-023f-4d9a-8fd7-cc5ebef963c3",
    "title": "Do not nest React components",
    "rule": "Check if React components are defined inside other components. Nested components are recreated on every render, causing unnecessary re-renders. Suggest moving them outside the parent component.",
    "why_is_this_important": "Nesting components within other components causes state to be lost on re-renders and can lead to unnecessary recreations. Move nested components outside the parent to improve maintainability and performance.",
    "severity": "High",
    "bad_example": "function Component() {\n  function NestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n    return <div />;\n  }\n\n  return (\n    <div>\n      <NestedComponent />\n    </div>\n  );\n\nclass Component extends React.Component {\n  render() {\n    function UnstableNestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n      return <div />;\n    }\n\n    return (\n      <div>\n        <UnstableNestedComponent />\n      </div>\n    );\n  }\n}",
    "good_example": "function OutsideComponent(props) {\n  return <div />;\n}\n\nfunction Component() {\n  return (\n    <div>\n      <OutsideComponent />\n    </div>\n  );\n}",
    "tags": [
      "maintainability",
      "performance",
      "react"
    ],
    "examples": [
      {
        "snippet": "function Component() {\n  function NestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n    return <div />;\n  }\n\n  return (\n    <div>\n      <NestedComponent />\n    </div>\n  );\n\nclass Component extends React.Component {\n  render() {\n    function UnstableNestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n      return <div />;\n    }\n\n    return (\n      <div>\n        <UnstableNestedComponent />\n      </div>\n    );\n  }\n}",
        "isCorrect": false
      },
      {
        "snippet": "function OutsideComponent(props) {\n  return <div />;\n}\n\nfunction Component() {\n  return (\n    <div>\n      <OutsideComponent />\n    </div>\n  );\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "68c567f6-0b2c-4796-aef0-cfc6a939cb1c",
    "title": "Avoid using the comma operator",
    "rule": "Detect occurrences of the comma operator in expressions. The comma operator can make code harder to read and debug, as it executes two expressions but only returns the last one. Suggest alternative structures for better readability.",
    "why_is_this_important": "The comma operator executes two expressions and returns the result of the second one, which can make the code confusing and harder to debug. It reduces readability and reliability, and the same outcome can be achieved with clearer alternatives.",
    "severity": "High",
    "bad_example": "i = a += 2, a + b;  // Noncompliant: What's the value of i ?",
    "good_example": "a += 2;\ni = a + b; // We probably expected to assign the result of the addition to i, although the previous code wasn't doing it.",
    "tags": [
      "maintainability"
    ],
    "examples": [
      {
        "snippet": "i = a += 2, a + b;  // Noncompliant: What's the value of i ?",
        "isCorrect": false
      },
      {
        "snippet": "a += 2;\ni = a + b; // We probably expected to assign the result of the addition to i, although the previous code wasn't doing it.",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "2e5ce6d4-0309-4e0d-89bb-8f6209299866",
    "title": "Avoid Empty Finalizers",
    "rule": "Check that finalizers are not left empty. If cleanup is needed, ensure proper resource disposal is implemented instead.",
    "why_is_this_important": "Empty finalizers introduce unnecessary performance overhead. If cleanup is needed, implement proper resource disposal instead.",
    "severity": "High",
    "bad_example": "public class Foo\n{\n    ~Foo() // Noncompliant\n    {\n    }\n}",
    "good_example": "",
    "tags": [
      "performance",
      "memory-management",
      "maintainability"
    ],
    "examples": [
      {
        "snippet": "public class Foo\n{\n    ~Foo() // Noncompliant\n    {\n    }\n}",
        "isCorrect": false
      }
    ]
  },
  {
    "uuid": "7f7601ec-dfa7-47e5-a04f-584fdd17e996",
    "title": "Use PascalCase for Methods and Properties",
    "rule": "Consistent naming conventions improve readability and maintainability. Method and property titles should follow PascalCase.",
    "why_is_this_important": "Consistent naming conventions improve readability and maintainability. Method and property titles should follow PascalCase.",
    "severity": "Low",
    "bad_example": "public int doSomething() {...} // Noncompliant",
    "good_example": "public int DoSomething() {...}",
    "tags": [
      "maintainability",
      "naming-conventions",
      "best-practices"
    ],
    "examples": [
      {
        "snippet": "public int doSomething() {...} // Noncompliant",
        "isCorrect": false
      },
      {
        "snippet": "public int DoSomething() {...}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "4bcc03ff-7efb-4373-bd80-f14195938b70",
    "title": "Use PascalCase for Type Names",
    "rule": "Following PascalCase for type titles ensures consistency and readability across the codebase.",
    "why_is_this_important": "Following PascalCase for type titles ensures consistency and readability across the codebase.",
    "severity": "Low",
    "bad_example": "class my_class {...}\nclass SOMEName42 {...}",
    "good_example": "class MyClass {...}\nclass SomeName42 {...}",
    "tags": [
      "maintainability",
      "naming-conventions",
      "best-practices"
    ],
    "examples": [
      {
        "snippet": "class my_class {...}\nclass SOMEName42 {...}",
        "isCorrect": false
      },
      {
        "snippet": "class MyClass {...}\nclass SomeName42 {...}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "e09250c2-a042-45c5-8a36-2703327d8feb",
    "title": "Avoid Using `!` to Null Check Nullable Type Parameters",
    "rule": "Do not use `!` to check nullable type parameters, as this can lead to runtime exceptions if the type itself is nullable.",
    "why_is_this_important": "If a type parameter itself is nullable, using `!` for null checking can cause runtime exceptions. Use explicit checks instead.",
    "severity": "High",
    "bad_example": "void main() {\n  getOrDefaultIf<int?>(() => 42, false);\n}\n\nT getOrDefaultIf<T>(T retriever(), bool condition) {\n  T? result;\n  final retrieveIfCondition = () {\n    if (condition) {\n        result = retriever();\n    }\n  };\n\n  retrieveIfCondition();\n  return result!; // Noncompliant\n}",
    "good_example": "void main() {\n  getOrDefaultIf<int?>(() => 42, false);\n}\n\nT getOrDefaultIf<T>(T retriever(), bool condition) {\n  T? result;\n  final retrieveIfCondition = () {\n    if (condition) {\n        result = retriever();\n    }\n  };\n\n  retrieveIfCondition();\n  return result as T;\n}",
    "tags": [
      "reliability",
      "null-safety"
    ],
    "examples": [
      {
        "snippet": "void main() {\n  getOrDefaultIf<int?>(() => 42, false);\n}\n\nT getOrDefaultIf<T>(T retriever(), bool condition) {\n  T? result;\n  final retrieveIfCondition = () {\n    if (condition) {\n        result = retriever();\n    }\n  };\n\n  retrieveIfCondition();\n  return result!; // Noncompliant\n}",
        "isCorrect": false
      },
      {
        "snippet": "void main() {\n  getOrDefaultIf<int?>(() => 42, false);\n}\n\nT getOrDefaultIf<T>(T retriever(), bool condition) {\n  T? result;\n  final retrieveIfCondition = () {\n    if (condition) {\n        result = retriever();\n    }\n  };\n\n  retrieveIfCondition();\n  return result as T;\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "82707830-f308-44aa-8b7e-380222f42711",
    "title": "Avoid Excessively Deep Namespaces",
    "rule": "Ensure that titlespace structures are not overly deep. Favor a flat, organized structure to enhance readability and navigation.",
    "why_is_this_important": "Deeply nested titlespaces increase code complexity, making navigation and maintenance more difficult.",
    "severity": "Medium",
    "bad_example": "titlespace Company.Project.Module.Component.Subcomponent.Feature {}",
    "good_example": "titlespace Company.Feature {}\n",
    "tags": [
      "maintainability",
      "organization",
      "readability",
      "google"
    ],
    "examples": [
      {
        "snippet": "titlespace Company.Project.Module.Component.Subcomponent.Feature {}",
        "isCorrect": false
      },
      {
        "snippet": "titlespace Company.Feature {}\n",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "da87d51a-955f-4322-bd25-4f7bd2a5cef2",
    "title": "Avoid building system commands from user input",
    "rule": "Check for occurrences where user input is directly used to construct system commands. This introduces a risk of command injection. Suggest using parameterized queries or safe wrappers instead.",
    "why_is_this_important": "Using user input to construct system commands can lead to security vulnerabilities, such as command injection. Always validate and sanitize inputs or avoid using them in system commands",
    "severity": "High",
    "bad_example": "const { spawn } = require(\"child_process\");\nconst input = req.query.input;\nconst proc = spawn(\"/usr/bin/find\", [input]); // Sensitive",
    "good_example": "const { spawn } = require(\"child_process\");\nconst input = req.query.input;\nif (allowed.includes(input)) {\n  const proc = spawn(\"/usr/bin/find\", [input]);\n}",
    "tags": [
      "security",
      "cwe",
      "owasp"
    ],
    "examples": [
      {
        "snippet": "const { spawn } = require(\"child_process\");\nconst input = req.query.input;\nconst proc = spawn(\"/usr/bin/find\", [input]); // Sensitive",
        "isCorrect": false
      },
      {
        "snippet": "const { spawn } = require(\"child_process\");\nconst input = req.query.input;\nif (allowed.includes(input)) {\n  const proc = spawn(\"/usr/bin/find\", [input]);\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "8d456f43-5f12-4dbc-b8ea-aa62f0f776a7",
    "title": "Prevent open redirect vulnerabilities in DOM updates",
    "rule": "Ensure that URLs used in redirection are properly validated and restricted to trusted domains. Open redirects can be exploited to redirect users to malicious sites.",
    "why_is_this_important": "Open redirects allow attackers to manipulate URLs and redirect users to malicious sites. Always validate and restrict redirection URLs to trusted domains.",
    "severity": "Critical",
    "bad_example": "const queryParams = new URLSearchParams(document.location.search);\nconst redirectUrl = queryParams.get(\"url\");\ndocument.location = redirectUrl; // Noncompliant\n",
    "good_example": "const queryParams = new URLSearchParams(document.location.search);\nconst redirectUrl = queryParams.get(\"url\");\n\nif (redirectUrl.startsWith(\"https://www.example.com/\")) {\n    document.location = redirectUrl;\n}",
    "tags": [
      "cwe",
      "security",
      "owasp"
    ],
    "examples": [
      {
        "snippet": "const queryParams = new URLSearchParams(document.location.search);\nconst redirectUrl = queryParams.get(\"url\");\ndocument.location = redirectUrl; // Noncompliant\n",
        "isCorrect": false
      },
      {
        "snippet": "const queryParams = new URLSearchParams(document.location.search);\nconst redirectUrl = queryParams.get(\"url\");\n\nif (redirectUrl.startsWith(\"https://www.example.com/\")) {\n    document.location = redirectUrl;\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "4d2ea914-b5c0-43b7-be59-be147bf4ac9d",
    "title": "Proper memory management in event listeners",
    "rule": "Ensure that event listeners are removed when no longer needed. Not doing so can lead to memory leaks and unnecessary resource consumption.",
    "why_is_this_important": "Event listeners that are not removed properly can cause memory leaks. Always remove listeners when they are no longer needed to avoid unnecessary resource consumption.",
    "severity": "Medium",
    "bad_example": "",
    "good_example": "",
    "tags": [
      "performance"
    ],
    "examples": []
  },
  {
    "uuid": "8146b323-7825-4d87-83a8-154ca8bc668b",
    "title": "Avoid excessive precision in numeric literals",
    "rule": "Detect floating-point numbers with excessive precision. Overly precise numeric literals can cause rounding errors and unexpected behavior in calculations.",
    "why_is_this_important": "Floating-point numbers have limited precision. Excessively precise numeric literals can lead to rounding errors and unexpected behavior in calculations.",
    "severity": "Medium",
    "bad_example": "var c = 999999999999999999999; // Not good, exceeds precision limits\nvar z = 1.12345678901234567;  // Too precise, may lose accuracy",
    "good_example": "var a = 9;                     // Ok\nvar b = 999999999999999;       // Ok, within safe limits\nvar w = 1.12e-4;               // Ok\nvar y = 1.1234567890123;       // Ok, precise but within limits",
    "tags": [
      "maintainability",
      "performance"
    ],
    "examples": [
      {
        "snippet": "var c = 999999999999999999999; // Not good, exceeds precision limits\nvar z = 1.12345678901234567;  // Too precise, may lose accuracy",
        "isCorrect": false
      },
      {
        "snippet": "var a = 9;                     // Ok\nvar b = 999999999999999;       // Ok, within safe limits\nvar w = 1.12e-4;               // Ok\nvar y = 1.1234567890123;       // Ok, precise but within limits",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "9677039b-81e4-4dea-9cb1-d75f93e6ef51",
    "title": "React children should not be passed as props",
    "rule": "Check if React children are passed as regular props instead of being nested inside components. Passing them incorrectly can cause conflicts and reduce clarity.",
    "why_is_this_important": "Passing React children through the children prop instead of nesting them can lead to conflicts and errors, especially if both approaches are used simultaneously. Always pass children as nested components for clarity.",
    "severity": "High",
    "bad_example": "<div children='Children' />\n<Foo children={<Bar />} />\n\nReact.createElement(\"div\", { children: 'Children' })",
    "good_example": "<div>Children</div>\n<Foo><Bar /></Foo>\n\nReact.createElement(\"div\", {}, 'Children');",
    "tags": [
      "maintainability",
      "reliability",
      "react"
    ],
    "examples": [
      {
        "snippet": "<div children='Children' />\n<Foo children={<Bar />} />\n\nReact.createElement(\"div\", { children: 'Children' })",
        "isCorrect": false
      },
      {
        "snippet": "<div>Children</div>\n<Foo><Bar /></Foo>\n\nReact.createElement(\"div\", {}, 'Children');",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "2092d7f6-b302-4177-9547-7253b05ff842",
    "title": "Ensure React list keys are stable between renders",
    "rule": "Check if React list keys are stable and unique. Using dynamic values like Math.random() or Date.now() can cause rendering issues. Recommend using unique IDs.",
    "why_is_this_important": "To optimize the rendering of React list components, a unique identifier (UID) is required in the key attribute for each list item. This UID lets React identify the item throughout its lifetime. Using generated values like Math.random() or Date.now() is discouraged as their return value will differ between calls, causing the keys to not match up between renders, recreating the DOM. Also, this may cause bugs if values collide.",
    "severity": "High",
    "bad_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={Math.random()}> <!-- Noncompliant: Since the 'key' will be different on each render, React will update the DOM unnecessarily -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
    "good_example": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
    "tags": [
      "maintainability",
      "react"
    ],
    "examples": [
      {
        "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={Math.random()}> <!-- Noncompliant: Since the 'key' will be different on each render, React will update the DOM unnecessarily -->\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
        "isCorrect": false
      },
      {
        "snippet": "function Blog(props) {\n  return (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "8faa2b6e-0c69-4699-94c2-e757aac4f71e",
    "title": "Use Absolute Imports Instead of Relative Imports",
    "rule": "Detect relative imports (e.g., `from .module import x`). Relative imports can break if the project structure changes. Recommend using absolute imports (`from package.module import x`) for better clarity and maintainability.",
    "why_is_this_important": "Relative imports can make the code harder to understand and maintain, especially in large projects. They can also break when the project structure changes. Absolute imports make dependencies clearer and more reliable.",
    "severity": "Medium",
    "bad_example": "from .module import MyClass",
    "good_example": "from project.module import MyClass",
    "tags": [
      "maintainability",
      "clean-code",
      "readability",
      "google"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "from .module import MyClass",
        "isCorrect": false
      },
      {
        "snippet": "from project.module import MyClass",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "047de581-d842-41e9-8e60-b1aa7ceb3bb3",
    "title": "Remove Unnecessary Trailing Whitespace",
    "rule": "Detect lines with trailing whitespace. Trailing spaces add unnecessary noise to version control diffs. Recommend removing them to keep the codebase clean.",
    "why_is_this_important": "Trailing whitespace adds noise to version control diffs and makes the codebase look untidy. Keeping code clean improves maintainability.",
    "severity": "Low",
    "bad_example": "x = 42",
    "good_example": "x = 42",
    "tags": [
      "clean-code",
      "readability",
      "google"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "x = 42",
        "isCorrect": false
      },
      {
        "snippet": "x = 42",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "2502eb35-99bc-43bd-978f-2967d4d6c2fb",
    "title": "Avoid asynchronous operations in constructors",
    "rule": "Ensure that constructors do not include asynchronous operations. Constructors should initialize class instances synchronously. If async logic is required, suggest moving it to a separate initialization method.",
    "why_is_this_important": "Constructors are meant to initialize class instances synchronously. Including asynchronous operations can result in partially initialized objects and unexpected behavior. Use an explicit initialization method instead.",
    "severity": "High",
    "bad_example": "class MyClass {\n  constructor() {\n    Promise.resolve().then(() => this.data = fetchData()); // Noncompliant, this.data will be undefined in the new instance\n  }\n}",
    "good_example": "class MyClass {\n  constructor() {\n    this.data = null;\n  }\n\n  async initialize() {\n    this.data = await fetchData();\n  }\n}\n\n(async () => {\n  const myObject = new MyClass();\n  await myObject.initialize();\n})();",
    "tags": [
      "maintainability",
      "reliability"
    ],
    "examples": [
      {
        "snippet": "class MyClass {\n  constructor() {\n    Promise.resolve().then(() => this.data = fetchData()); // Noncompliant, this.data will be undefined in the new instance\n  }\n}",
        "isCorrect": false
      },
      {
        "snippet": "class MyClass {\n  constructor() {\n    this.data = null;\n  }\n\n  async initialize() {\n    this.data = await fetchData();\n  }\n}\n\n(async () => {\n  const myObject = new MyClass();\n  await myObject.initialize();\n})();",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "4f700025-144e-4534-a0e4-bca56ba9897b",
    "title": "Do not export mutable variables",
    "rule": "Check if modules export mutable variables. Mutable exports can be modified by other modules, leading to unpredictable behavior. Recommend exporting immutable values instead.",
    "why_is_this_important": "Exporting mutable variables allows other modules to modify their values, making it difficult to track changes and leading to potential bugs. Use immutable exports to ensure predictable behavior.",
    "severity": "High",
    "bad_example": "let mutableVar = \"initial value\";\n\nexport { mutableVar }; // Noncompliant",
    "good_example": "const immutableVar = \"constant value\";\nexport { immutableVar };",
    "tags": [
      "maintainability",
      "reliability"
    ],
    "examples": [
      {
        "snippet": "let mutableVar = \"initial value\";\n\nexport { mutableVar }; // Noncompliant",
        "isCorrect": false
      },
      {
        "snippet": "const immutableVar = \"constant value\";\nexport { immutableVar };",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "0ef6c30f-749f-4205-b0a4-7914ba7ad48b",
    "title": "Always Use `with` for Managing Resources",
    "rule": "Ensure that resources such as files, sockets, or database connections are managed using the `with` statement. Code that explicitly calls `.close()` without `with` should be refactored to use context managers for automatic resource cleanup.",
    "why_is_this_important": "Forgetting to close resources like files or sockets can lead to memory leaks or unexpected behavior. The `with` statement ensures resources are properly released, even if an error occurs.",
    "severity": "Medium",
    "bad_example": "file = open('test.txt', 'r')\ndata = file.read()\nfile.close()",
    "good_example": "with open('test.txt', 'r') as file:\n    data = file.read()",
    "tags": [
      "maintainability",
      "performance",
      "resource-management",
      "google"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "file = open('test.txt', 'r')\ndata = file.read()\nfile.close()",
        "isCorrect": false
      },
      {
        "snippet": "with open('test.txt', 'r') as file:\n    data = file.read()",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "dba6cbe1-2bca-4b8c-9edc-8be04349a3b0",
    "title": "Explicitly Close Resources in `finally` Blocks",
    "rule": "Check if resources such as files or database connections are properly closed in a `finally` block. This ensures resources are always released, even if an exception occurs.",
    "why_is_this_important": "Failing to close files, sockets, or other resources can cause memory leaks and unexpected behavior. Placing cleanup code in a `finally` block ensures resources are always released, even if an error occurs.",
    "severity": "High",
    "bad_example": "file = open('test.txt')\ndata = file.read()",
    "good_example": "try:\n    file = open('test.txt')\n    data = file.read()\nfinally:\n    file.close()",
    "tags": [
      "maintainability",
      "resource-management",
      "reliability",
      "google"
    ],
    "language": "Python",
    "examples": [
      {
        "snippet": "file = open('test.txt')\ndata = file.read()",
        "isCorrect": false
      },
      {
        "snippet": "try:\n    file = open('test.txt')\n    data = file.read()\nfinally:\n    file.close()",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "a0a4d9fd-5293-498f-abaf-1da1be711068",
    "title": "Avoid Using Semicolons to Terminate Statements",
    "rule": "Detect unnecessary semicolons at the end of statements. Ruby does not require semicolons, so they should be removed unless multiple statements exist on the same line.",
    "why_is_this_important": "Ruby does not require semicolons at the end of statements. Using them unnecessarily reduces readability and goes against standard Ruby conventions.",
    "severity": "Low",
    "bad_example": "puts 'Hello, world!'; # unnecessary semicolo\n",
    "good_example": "puts 'Hello, world!'\n",
    "tags": [
      "maintainability",
      "readability",
      "Shopify",
      "Ruby-style"
    ],
    "examples": [
      {
        "snippet": "puts 'Hello, world!'; # unnecessary semicolo\n",
        "isCorrect": false
      },
      {
        "snippet": "puts 'Hello, world!'\n",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "5314121d-63de-4aad-9968-21af35032753",
    "title": "Use Spaces Around Operators",
    "rule": "Ensure that arithmetic and logical operators have spaces around them for better readability (e.g., `x + y` instead of `x+y`).",
    "why_is_this_important": "Omitting spaces around operators (`+`, `-`, `*`, etc.) reduces code readability. Proper spacing makes expressions easier to read and understand.",
    "severity": "Low",
    "bad_example": "sum=1+2",
    "good_example": "sum = 1 + 2",
    "tags": [
      "maintainability",
      "readability",
      "Shopify",
      "Ruby-style"
    ],
    "examples": [
      {
        "snippet": "sum=1+2",
        "isCorrect": false
      },
      {
        "snippet": "sum = 1 + 2",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "08d4da8d-d35f-4901-85c7-23284097e004",
    "title": "Always sanitize user inputs",
    "rule": "Check if user inputs are sanitized before being used in rendering or database queries. Unsanitized inputs can lead to injection vulnerabilities like XSS or SQL injection.",
    "why_is_this_important": "Unsanitized inputs can lead to injection vulnerabilities, such as XSS or SQL injection, in cases where inputs are directly used in rendering or database queries.",
    "severity": "Critical",
    "bad_example": "const userInput = '<script>alert(\"Hacked!\")</script>';\ndocument.innerHTML = userInput; // Vulnerable to XSS",
    "good_example": "const userInput = '<script>alert(\"Hacked!\")</script>';\nconst sanitizedInput = userInput.replace(/</g, '&lt;').replace(/>/g, '&gt;');\ndocument.innerHTML = sanitizedInput; // Safe rendering\n",
    "tags": [
      "security",
      "google",
      "owasp"
    ],
    "examples": [
      {
        "snippet": "const userInput = '<script>alert(\"Hacked!\")</script>';\ndocument.innerHTML = userInput; // Vulnerable to XSS",
        "isCorrect": false
      },
      {
        "snippet": "const userInput = '<script>alert(\"Hacked!\")</script>';\nconst sanitizedInput = userInput.replace(/</g, '&lt;').replace(/>/g, '&gt;');\ndocument.innerHTML = sanitizedInput; // Safe rendering\n",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "30b9eda5-6b10-4c01-9245-1361c2b6cc73",
    "title": "Always validate JSON parsing",
    "rule": "Ensure that JSON data is validated before parsing. Parsing untrusted JSON without validation can result in runtime errors or vulnerabilities.",
    "why_is_this_important": "Parsing untrusted JSON without validation can result in runtime errors or vulnerabilities. Always validate the structure of parsed JSON to ensure it meets expected requirements.",
    "severity": "Medium",
    "bad_example": "const data = JSON.parse(userInput); // No validation",
    "good_example": "try {\n  const data = JSON.parse(userInput);\n  if (typeof data !== 'object' || Array.isArray(data)) {\n    throw new Error('Invalid JSON structure');\n  }\n} catch (err) {\n  console.error('JSON parsing error:', err);\n}\n",
    "tags": [
      "security",
      "google",
      "owasp"
    ],
    "examples": [
      {
        "snippet": "const data = JSON.parse(userInput); // No validation",
        "isCorrect": false
      },
      {
        "snippet": "try {\n  const data = JSON.parse(userInput);\n  if (typeof data !== 'object' || Array.isArray(data)) {\n    throw new Error('Invalid JSON structure');\n  }\n} catch (err) {\n  console.error('JSON parsing error:', err);\n}\n",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "d4c6bc9b-997e-4512-8ede-ed642cb95eb5",
    "title": "Place Statements on Separate Lines",
    "rule": "Ensure that multiple statements are not written on the same line. Each statement should be placed on a new line to improve readability.",
    "why_is_this_important": "Writing multiple statements on a single line reduces readability and makes debugging harder. Separate statements should be placed on different lines for clarity.",
    "severity": "Medium",
    "bad_example": "if someCondition; puts \"hello\"; end # Noncompliant\n",
    "good_example": "if someCondition\n  puts \"hello\"\nend",
    "tags": [
      "maintainability",
      "readability",
      "debugging",
      "Shopify"
    ],
    "examples": [
      {
        "snippet": "if someCondition; puts \"hello\"; end # Noncompliant\n",
        "isCorrect": false
      },
      {
        "snippet": "if someCondition\n  puts \"hello\"\nend",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "0c72dff5-a39a-4dd1-981c-5aff6b518cf7",
    "title": "Remove Unused Function Parameters",
    "rule": "Identify function parameters that are declared but never used within the function body. Remove them to improve clarity and maintainability.",
    "why_is_this_important": "Declaring parameters that are never used in a function leads to confusion and unnecessary complexity. Remove unused parameters to improve code clarity and maintainability.",
    "severity": "High",
    "bad_example": "",
    "good_example": "",
    "tags": [
      "maintainability",
      "readability",
      "performance",
      "Shopify"
    ],
    "examples": []
  },
  {
    "uuid": "3c6a4031-525c-48c3-8615-e001555b901c",
    "title": "Ensure Controllers Follow Single Responsibility Principle",
    "rule": "Controllers handling multiple concerns become harder to maintain and test. Split responsibilities into separate controllers.",
    "why_is_this_important": "Controllers handling multiple concerns become harder to maintain and test. Split responsibilities into separate controllers.",
    "severity": "High",
    "bad_example": "",
    "good_example": "",
    "tags": [
      "maintainability",
      "best-practices",
      "clean-code",
      "solid-principles"
    ],
    "examples": []
  },
  {
    "uuid": "097b066b-7bdf-446f-a169-d3dcb689c754",
    "title": "Use Factory Method Injection in `@Configuration` Classes",
    "rule": "Ensure that factory method injection is used in `@Configuration` classes instead of `@Autowired` field injection.",
    "why_is_this_important": "Using `@Autowired` field injection can lead to early initialization issues. Factory method injection ensures dependencies are resolved only when needed.",
    "severity": "Critical",
    "bad_example": "@Configuration\npublic class  FooConfiguration {\n\n  @Autowired private  DataSource dataSource ;  // Noncompliant\n\n  @Bean\n  public  MyService myService() {\n    return new  MyService(this .dataSource );\n  }\n}",
    "good_example": "@Configuration\npublic class  FooConfiguration {\n\n @Bean\n  public  MyService myService(DataSource dataSource) {\n    return new  MyService(dataSource);\n  }\n}",
    "tags": [
      "performance",
      "maintainability",
      "spring"
    ],
    "examples": [
      {
        "snippet": "@Configuration\npublic class  FooConfiguration {\n\n  @Autowired private  DataSource dataSource ;  // Noncompliant\n\n  @Bean\n  public  MyService myService() {\n    return new  MyService(this .dataSource );\n  }\n}",
        "isCorrect": false
      },
      {
        "snippet": "@Configuration\npublic class  FooConfiguration {\n\n @Bean\n  public  MyService myService(DataSource dataSource) {\n    return new  MyService(dataSource);\n  }\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "597a0558-b568-4cc9-89f4-de5a86839ec8",
    "title": "Use Appropriate HTTP Status Codes",
    "rule": "Ensure that HTTP handlers return the appropriate status codes based on request success or failure.",
    "why_is_this_important": "Returning incorrect HTTP status codes can lead to ambiguous API behavior, making it harder for clients to handle responses correctly.",
    "severity": "High",
    "bad_example": "@Controller\npublic class UserController {\n    public ResponseEntity<User> getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(user); // Noncompliant: Setting 500 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.OK).build(); // Noncompliant: Setting 200 for exception\n        }\n    }\n}",
    "good_example": "@Controller\npublic class UserController {\n    public ResponseEntity<User> getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.ok(user); // Compliant: Setting 200 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Compliant: Setting 500 for exception\n        }\n    }\n}",
    "tags": [
      "reliability",
      "spring",
      "maintainability"
    ],
    "examples": [
      {
        "snippet": "@Controller\npublic class UserController {\n    public ResponseEntity<User> getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(user); // Noncompliant: Setting 500 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.OK).build(); // Noncompliant: Setting 200 for exception\n        }\n    }\n}",
        "isCorrect": false
      },
      {
        "snippet": "@Controller\npublic class UserController {\n    public ResponseEntity<User> getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.ok(user); // Compliant: Setting 200 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Compliant: Setting 500 for exception\n        }\n    }\n}",
        "isCorrect": true
      }
    ]
  },
  {
    "uuid": "ec25cda7-b984-4818-a339-dc7ccb7ad278",
    "title": "Verify Server Certificates in SSL/TLS",
    "rule": "Disabling SSL/TLS certificate validation exposes applications to Man-in-the-Middle (MitM) attacks, compromising security.",
    "why_is_this_important": "Disabling SSL/TLS certificate validation exposes applications to Man-in-the-Middle (MitM) attacks, compromising security.",
    "severity": "Critical",
    "bad_example": "using System.Net;\nusing System.Net.Http;\n\npublic static void connect()\n{\n    ServicePointManager.ServerCertificateValidationCallback +=\n\t (sender, certificate, chain, errors) => {\n\t     return true; // Noncompliant\n    };\n\n    HttpClient httpClient = new HttpClient();\n    HttpResponseMessage response = httpClient.GetAsync(\"https://example.com\").Result;\n}",
    "good_example": "",
    "tags": [
      "security",
      "owasp",
      "cwe",
      "tls-security"
    ],
    "examples": [
      {
        "snippet": "using System.Net;\nusing System.Net.Http;\n\npublic static void connect()\n{\n    ServicePointManager.ServerCertificateValidationCallback +=\n\t (sender, certificate, chain, errors) => {\n\t     return true; // Noncompliant\n    };\n\n    HttpClient httpClient = new HttpClient();\n    HttpResponseMessage response = httpClient.GetAsync(\"https://example.com\").Result;\n}",
        "isCorrect": false
      }
    ]
  }
]